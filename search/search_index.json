{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"design-pattern/","text":"\u89c2\u5bdf\u8005\u6a21\u5f0f class IObserver { public : virtual void OnNotify () = 0 ; }; class ISubject { private : std :: vector < IObserver > observers_ ; public : // \u5229\u7528\u8fd9\u4e2a\u65b9\u6cd5\u53ef\u4ee5\u5c06Observer\u5bf9\u8c61\u6ce8\u518c\u5230Subject\u5bf9\u8c61\u4e2d void RegisterObserver ( IObserver observer ) { observers_ . Add ( observer ); } protected : // \u5f53\u7c7b\u5bf9\u8c61\u72b6\u6001\u53d1\u751f\u6539\u53d8\u65f6\u5019\uff0cNotifyObserver \u65b9\u6cd5\u901a\u77e5\u6240\u6709\u6ce8\u518c\u8fdb\uff08\u8c03\u7528 RegisterObserver\uff09\u8fd9\u4e2a\u7c7b\u5bf9\u8c61\u7684\u89c2\u5bdf\u8005 void NotifyObserver () { foreach ( auto observer : observers_ ) observer . OnNotify (); } }; // \u65b0\u521b\u5efa\u7684\u7c7b\u9700\u8981\u7ee7\u627f\u7684\u57fa\u7c7b class ImportantBaseClass { /* Members */ }; // Donot-repeat-yourself \u539f\u5219\uff0cSubject \u4f5c\u4e3a\u57fa\u7c7b\uff0c\u7528\u5230\u591a\u91cd\u7ee7\u627f class SubjectSubClass : public ImportantBaseClass , public ISubject { /* Members */ }; // \u65b0\u521b\u5efa\u7684\u7c7b\u9700\u8981\u7ee7\u627f\u7684\u57fa\u7c7b class AnotherImportantBaseClass {...}; // \u4f7f\u7528\u591a\u91cd\u7ee7\u627f class ObserverSubClass : public AnotherImportantBaseClass , public IObserve {...}; observer class as instance - Software Engineering Stack Exchange \u21a9 Multiple Inheritance: What's a good example? - Stack Overflow \u21a9","title":"\u89c2\u5bdf\u8005\u6a21\u5f0f"},{"location":"design-pattern/#_1","text":"class IObserver { public : virtual void OnNotify () = 0 ; }; class ISubject { private : std :: vector < IObserver > observers_ ; public : // \u5229\u7528\u8fd9\u4e2a\u65b9\u6cd5\u53ef\u4ee5\u5c06Observer\u5bf9\u8c61\u6ce8\u518c\u5230Subject\u5bf9\u8c61\u4e2d void RegisterObserver ( IObserver observer ) { observers_ . Add ( observer ); } protected : // \u5f53\u7c7b\u5bf9\u8c61\u72b6\u6001\u53d1\u751f\u6539\u53d8\u65f6\u5019\uff0cNotifyObserver \u65b9\u6cd5\u901a\u77e5\u6240\u6709\u6ce8\u518c\u8fdb\uff08\u8c03\u7528 RegisterObserver\uff09\u8fd9\u4e2a\u7c7b\u5bf9\u8c61\u7684\u89c2\u5bdf\u8005 void NotifyObserver () { foreach ( auto observer : observers_ ) observer . OnNotify (); } }; // \u65b0\u521b\u5efa\u7684\u7c7b\u9700\u8981\u7ee7\u627f\u7684\u57fa\u7c7b class ImportantBaseClass { /* Members */ }; // Donot-repeat-yourself \u539f\u5219\uff0cSubject \u4f5c\u4e3a\u57fa\u7c7b\uff0c\u7528\u5230\u591a\u91cd\u7ee7\u627f class SubjectSubClass : public ImportantBaseClass , public ISubject { /* Members */ }; // \u65b0\u521b\u5efa\u7684\u7c7b\u9700\u8981\u7ee7\u627f\u7684\u57fa\u7c7b class AnotherImportantBaseClass {...}; // \u4f7f\u7528\u591a\u91cd\u7ee7\u627f class ObserverSubClass : public AnotherImportantBaseClass , public IObserve {...}; observer class as instance - Software Engineering Stack Exchange \u21a9 Multiple Inheritance: What's a good example? - Stack Overflow \u21a9","title":"\u89c2\u5bdf\u8005\u6a21\u5f0f"}]}