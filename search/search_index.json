{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u6249\u9875 Warning \u7531\u4e8e\u6280\u672f\u9650\u5236\uff0c\u73b0\u5728\u4e2d\u6587\u641c\u7d22\u529f\u80fd\u65e0\u6cd5\u5b8c\u5584\uff0c\u8bf7\u6ce8\u610f\u5f53\u641c\u7d22\u5173\u952e\u8bcd\u7684\u65f6\u5019\u81ea\u884c\u5206\u8bcd\uff0c\u4f8b\u5982\uff1a \u679c\u6728\u9999\u9ec4\u6843\u8461\u5f0f\u86cb\u631e \u65e0\u6cd5\u641c\u5230\u4efb\u4f55\u5185\u5bb9\u3002\u4f46\u53ef\u4ee5\u641c\u7d22 \u679c\u6728\u9999 \u9ec4\u6843 \u8461\u5f0f \u86cb\u631e \u5373\u53ef\u786e\u4fdd\u7d22\u5f15\u5230\u4e0a\u8ff0\u5185\u5bb9\u3002","title":"Home"},{"location":"#_1","text":"Warning \u7531\u4e8e\u6280\u672f\u9650\u5236\uff0c\u73b0\u5728\u4e2d\u6587\u641c\u7d22\u529f\u80fd\u65e0\u6cd5\u5b8c\u5584\uff0c\u8bf7\u6ce8\u610f\u5f53\u641c\u7d22\u5173\u952e\u8bcd\u7684\u65f6\u5019\u81ea\u884c\u5206\u8bcd\uff0c\u4f8b\u5982\uff1a \u679c\u6728\u9999\u9ec4\u6843\u8461\u5f0f\u86cb\u631e \u65e0\u6cd5\u641c\u5230\u4efb\u4f55\u5185\u5bb9\u3002\u4f46\u53ef\u4ee5\u641c\u7d22 \u679c\u6728\u9999 \u9ec4\u6843 \u8461\u5f0f \u86cb\u631e \u5373\u53ef\u786e\u4fdd\u7d22\u5f15\u5230\u4e0a\u8ff0\u5185\u5bb9\u3002","title":"\u6249\u9875"},{"location":"design-pattern/","text":"\u89c2\u5bdf\u8005\u6a21\u5f0f \u89c2\u5bdf\u8005\u6a21\u5f0f\u4e2d\u6709\u4e24\u4e2a\u91cd\u8981\u6982\u5ff5\uff0cObserver \u548c Subject\u3002\u89c2\u5bdf\u8005\u6a21\u5f0f\u7684\u672c\u8d28\u662f Subject \u5bf9\u8c61\u53d1\u751f\u53d8\u5316\u7684\u65f6\u5019\uff0c\u901a\u77e5\u6240\u6709\u89c2\u5bdf\u4e86\u8fd9\u4e2a Subject \u7684 Observer\uff0c\u800c Subject \u4e0d\u9700\u8981 Observer \u5b9e\u9645\u7c7b\u578b\u4fe1\u606f\u3002 class IObserver { public : virtual void OnNotify () = 0 ; }; class ISubject { private : std :: vector < IObserver > observers_ ; public : // \u5229\u7528\u8fd9\u4e2a\u65b9\u6cd5\u53ef\u4ee5\u5c06Observer\u5bf9\u8c61\u6ce8\u518c\u5230Subject\u5bf9\u8c61\u4e2d void RegisterObserver ( IObserver observer ) { observers_ . Add ( observer ); } protected : // \u5f53\u7c7b\u5bf9\u8c61\u72b6\u6001\u53d1\u751f\u6539\u53d8\u65f6\u5019\uff0cNotifyObserver \u65b9\u6cd5\u901a\u77e5\u6240\u6709\u6ce8\u518c\u8fdb\uff08\u8c03\u7528 RegisterObserver\uff09\u8fd9\u4e2a\u7c7b\u5bf9\u8c61\u7684\u89c2\u5bdf\u8005 void NotifyObserver () { foreach ( auto observer : observers_ ) observer . OnNotify (); } }; // \u65b0\u521b\u5efa\u7684\u7c7b\u9700\u8981\u7ee7\u627f\u7684\u57fa\u7c7b class ImportantBaseClass { /* Members */ }; // Donot-repeat-yourself \u539f\u5219\uff0cSubject \u4f5c\u4e3a\u57fa\u7c7b\uff0c\u7528\u5230\u591a\u91cd\u7ee7\u627f class SubjectSubClass : public ImportantBaseClass , public ISubject { /* Members */ }; // \u65b0\u521b\u5efa\u7684\u7c7b\u9700\u8981\u7ee7\u627f\u7684\u57fa\u7c7b class AnotherImportantBaseClass {...}; // \u4f7f\u7528\u591a\u91cd\u7ee7\u627f\u3002\u82e5\u4e0d\u7ee7\u627f IObserve\uff0c\u800c\u5728 SubClass \u6dfb\u52a0 OnNotify \u65b9\u6cd5\uff0c\u5219\u65e0\u6cd5\u4f7f\u7528 Subject \u7684 Register \u65b9\u6cd5 class ObserverSubClass : public AnotherImportantBaseClass , public IObserve {...}; observer class as instance - Software Engineering Stack Exchange \u21a9 Multiple Inheritance: What's a good example? - Stack Overflow \u21a9","title":"\u89c2\u5bdf\u8005\u6a21\u5f0f"},{"location":"design-pattern/#_1","text":"\u89c2\u5bdf\u8005\u6a21\u5f0f\u4e2d\u6709\u4e24\u4e2a\u91cd\u8981\u6982\u5ff5\uff0cObserver \u548c Subject\u3002\u89c2\u5bdf\u8005\u6a21\u5f0f\u7684\u672c\u8d28\u662f Subject \u5bf9\u8c61\u53d1\u751f\u53d8\u5316\u7684\u65f6\u5019\uff0c\u901a\u77e5\u6240\u6709\u89c2\u5bdf\u4e86\u8fd9\u4e2a Subject \u7684 Observer\uff0c\u800c Subject \u4e0d\u9700\u8981 Observer \u5b9e\u9645\u7c7b\u578b\u4fe1\u606f\u3002 class IObserver { public : virtual void OnNotify () = 0 ; }; class ISubject { private : std :: vector < IObserver > observers_ ; public : // \u5229\u7528\u8fd9\u4e2a\u65b9\u6cd5\u53ef\u4ee5\u5c06Observer\u5bf9\u8c61\u6ce8\u518c\u5230Subject\u5bf9\u8c61\u4e2d void RegisterObserver ( IObserver observer ) { observers_ . Add ( observer ); } protected : // \u5f53\u7c7b\u5bf9\u8c61\u72b6\u6001\u53d1\u751f\u6539\u53d8\u65f6\u5019\uff0cNotifyObserver \u65b9\u6cd5\u901a\u77e5\u6240\u6709\u6ce8\u518c\u8fdb\uff08\u8c03\u7528 RegisterObserver\uff09\u8fd9\u4e2a\u7c7b\u5bf9\u8c61\u7684\u89c2\u5bdf\u8005 void NotifyObserver () { foreach ( auto observer : observers_ ) observer . OnNotify (); } }; // \u65b0\u521b\u5efa\u7684\u7c7b\u9700\u8981\u7ee7\u627f\u7684\u57fa\u7c7b class ImportantBaseClass { /* Members */ }; // Donot-repeat-yourself \u539f\u5219\uff0cSubject \u4f5c\u4e3a\u57fa\u7c7b\uff0c\u7528\u5230\u591a\u91cd\u7ee7\u627f class SubjectSubClass : public ImportantBaseClass , public ISubject { /* Members */ }; // \u65b0\u521b\u5efa\u7684\u7c7b\u9700\u8981\u7ee7\u627f\u7684\u57fa\u7c7b class AnotherImportantBaseClass {...}; // \u4f7f\u7528\u591a\u91cd\u7ee7\u627f\u3002\u82e5\u4e0d\u7ee7\u627f IObserve\uff0c\u800c\u5728 SubClass \u6dfb\u52a0 OnNotify \u65b9\u6cd5\uff0c\u5219\u65e0\u6cd5\u4f7f\u7528 Subject \u7684 Register \u65b9\u6cd5 class ObserverSubClass : public AnotherImportantBaseClass , public IObserve {...}; observer class as instance - Software Engineering Stack Exchange \u21a9 Multiple Inheritance: What's a good example? - Stack Overflow \u21a9","title":"\u89c2\u5bdf\u8005\u6a21\u5f0f"},{"location":"github-project-boards/","text":"\u7ec4\u5185\u654f\u6377\u5f00\u53d1\u8bf4\u660e \u5de5\u4f5c\u6d41\u7a0b \u4efb\u52a1\u5212\u5206 Sprint \u5468\u671f\u76ee\u6807 Sprint \u5468\u671f\u4efb\u52a1\u6e05\u5355 \u96be\u5ea6\u6295\u70b9 \u4efb\u52a1\u5206\u914d \u8fdb\u884c\u4efb\u52a1 Github \u521b\u5efa\u65b0\u5206\u652f \u7f16\u7801 TDD \u6d4b\u8bd5\u9a71\u52a8 \u4ee3\u7801\u98ce\u683c\u89c4\u8303 Commit & Push Pull Request Code Review \u6bcf\u5468\u4f9d\u636e\u4efb\u52a1\u6570\u91cf\u8fdb\u884c\u591a\u6b21 Code Review \u5b8c\u6210\u4efb\u52a1 \u6587\u6863\u66f4\u65b0\u5230 Project/docs \u76ee\u5f55\u4e0b \u6d41\u7a0b \u65f6\u95f4\u8bf4\u660e \u65f6\u957f \u4f8b\u4f1a \u5de5\u4f5c\u65e5 \u6bcf\u65e5 10 min \u4efb\u52a1\u5212\u5206 \u5468\u4e00 30 min Code Review \u5468\u4e09\u3001\u5468\u4e94 - \u6587\u6863\u66f4\u65b0 \u5468\u4e94 - \u627e\u8001\u5f20 \u5468\u4e00/\u5468\u4e8c - Github Project Boards Kanban \u67e5\u770b/\u7ba1\u7406\u4efb\u52a1\u8fdb\u5ea6 Kanban \u5361\u7247\u7ba1\u7406 Pull Request \u8fdb\u5ea6 Kanban \u5361\u7247\u7ba1\u7406 Issue \u8fdb\u5ea6 Pull Request \u548c Code Review","title":"\u7ec4\u5185\u654f\u6377\u5f00\u53d1\u8bf4\u660e"},{"location":"github-project-boards/#_1","text":"","title":"\u7ec4\u5185\u654f\u6377\u5f00\u53d1\u8bf4\u660e"},{"location":"github-project-boards/#_2","text":"\u4efb\u52a1\u5212\u5206 Sprint \u5468\u671f\u76ee\u6807 Sprint \u5468\u671f\u4efb\u52a1\u6e05\u5355 \u96be\u5ea6\u6295\u70b9 \u4efb\u52a1\u5206\u914d \u8fdb\u884c\u4efb\u52a1 Github \u521b\u5efa\u65b0\u5206\u652f \u7f16\u7801 TDD \u6d4b\u8bd5\u9a71\u52a8 \u4ee3\u7801\u98ce\u683c\u89c4\u8303 Commit & Push Pull Request Code Review \u6bcf\u5468\u4f9d\u636e\u4efb\u52a1\u6570\u91cf\u8fdb\u884c\u591a\u6b21 Code Review \u5b8c\u6210\u4efb\u52a1 \u6587\u6863\u66f4\u65b0\u5230 Project/docs \u76ee\u5f55\u4e0b \u6d41\u7a0b \u65f6\u95f4\u8bf4\u660e \u65f6\u957f \u4f8b\u4f1a \u5de5\u4f5c\u65e5 \u6bcf\u65e5 10 min \u4efb\u52a1\u5212\u5206 \u5468\u4e00 30 min Code Review \u5468\u4e09\u3001\u5468\u4e94 - \u6587\u6863\u66f4\u65b0 \u5468\u4e94 - \u627e\u8001\u5f20 \u5468\u4e00/\u5468\u4e8c -","title":"\u5de5\u4f5c\u6d41\u7a0b"},{"location":"github-project-boards/#github-project-boards","text":"Kanban \u67e5\u770b/\u7ba1\u7406\u4efb\u52a1\u8fdb\u5ea6 Kanban \u5361\u7247\u7ba1\u7406 Pull Request \u8fdb\u5ea6 Kanban \u5361\u7247\u7ba1\u7406 Issue \u8fdb\u5ea6","title":"Github Project Boards"},{"location":"github-project-boards/#pull-request-code-review","text":"","title":"Pull Request \u548c Code Review"},{"location":"directx/","text":"DirectML \u6458\u8981 Hybrid Rendering \u603b\u7eb2\u3002\u672c\u9875\u5c06\u8bb2\u8ff0DirectML\u539f\u7406\uff0c\u7ed3\u6784\u8bbe\u8ba1\u53ca\u6e32\u67d3\u5b9e\u8df5\u3002\u6e90\u7801\u53ca\u76f8\u5173\u5de5\u5177\uff0c\u53ef\u53c2\u9605 Github \u9879\u76ee\u3002 RTX \u6e32\u67d3\u7ba1\u7ebf\u6982\u8ff0 THE HYBRID RENDERING MODEL Previously, real-time graphics relied on rasterizing triangles to render images. Now, with the introduction of RT Cores and Tensor Cores, Turing hardware enables real-time ray tracing for lighting and the use of AI for image enhancement and other applications. The graphics API has evolved in the same direction, with the introduction of DirectX Raytracing and Windows ML as part of the Windows 10 October 2018 update. Taken together, these changes enable a new rendering model, Hybrid Rendering, in which graphics applications use a combination of traditional rendering, ray traced rendering, and AI to produce amazing images in real time. DirectML \u5b9e\u65f6\u6e32\u67d3 ...domains such as games and engines... For reliable real-time, high-performance, low-latency, and/or resource-constrained scenarios...You can integrate DirectML directly into your existing engine or rendering pipeline. 1 TensorRT/ NGX \u5b9e\u65f6\u6e32\u67d3 NGX DNN models can interface with CUDA 10, the DirectX and Vulkan drivers, as well as take advantage of NVIDIA TensorRT... 2 Introduction to DirectML \u21a9 NVIDIA-Turing-Architecture-Whitepaper \u21a9","title":"\u6249\u9875"},{"location":"directx/#directml","text":"\u6458\u8981 Hybrid Rendering \u603b\u7eb2\u3002\u672c\u9875\u5c06\u8bb2\u8ff0DirectML\u539f\u7406\uff0c\u7ed3\u6784\u8bbe\u8ba1\u53ca\u6e32\u67d3\u5b9e\u8df5\u3002\u6e90\u7801\u53ca\u76f8\u5173\u5de5\u5177\uff0c\u53ef\u53c2\u9605 Github \u9879\u76ee\u3002","title":"DirectML"},{"location":"directx/#rtx","text":"THE HYBRID RENDERING MODEL Previously, real-time graphics relied on rasterizing triangles to render images. Now, with the introduction of RT Cores and Tensor Cores, Turing hardware enables real-time ray tracing for lighting and the use of AI for image enhancement and other applications. The graphics API has evolved in the same direction, with the introduction of DirectX Raytracing and Windows ML as part of the Windows 10 October 2018 update. Taken together, these changes enable a new rendering model, Hybrid Rendering, in which graphics applications use a combination of traditional rendering, ray traced rendering, and AI to produce amazing images in real time.","title":"RTX \u6e32\u67d3\u7ba1\u7ebf\u6982\u8ff0"},{"location":"directx/#directml_1","text":"...domains such as games and engines... For reliable real-time, high-performance, low-latency, and/or resource-constrained scenarios...You can integrate DirectML directly into your existing engine or rendering pipeline. 1","title":"DirectML \u5b9e\u65f6\u6e32\u67d3"},{"location":"directx/#tensorrt-ngx","text":"NGX DNN models can interface with CUDA 10, the DirectX and Vulkan drivers, as well as take advantage of NVIDIA TensorRT... 2 Introduction to DirectML \u21a9 NVIDIA-Turing-Architecture-Whitepaper \u21a9","title":"TensorRT/ NGX \u5b9e\u65f6\u6e32\u67d3"},{"location":"directx/directml/","text":"DirectML \u5b98\u65b9\u6982\u8ff0 Direct Machine Learning (DirectML) is a low-level API for machine learning (ML). Hardware-accelerated machine learning primitives (called operators) are the building blocks of DirectML. From those building blocks, you can develop such machine learning techniques as upscaling, anti-aliasing, and style transfer, to name but a few. Denoising and super-resolution, for example, allow you to achieve impressive raytraced effects with fewer rays per pixel. Prerequisites DirectX 12-capable GPU drivers Windows 10 version 1903 or newer Windows 10 SDK version 1903 DirectML Resource The key to resource binding in DirectX 12 are the concepts of a descriptor, descriptor tables, descriptor heaps, and a root signature. A descriptor is a small object that contains information about one resource. typedef struct D3D12_SHADER_RESOURCE_VIEW_DESC { DXGI_FORMAT Format ; D3D12_SRV_DIMENSION ViewDimension ; union { D3D12_BUFFER_SRV Buffer ; D3D12_TEX1D_SRV Texture1D ; D3D12_TEX1D_ARRAY_SRV Texture1DArray ; D3D12_TEX2D_SRV Texture2D ; D3D12_TEX2D_ARRAY_SRV Texture2DArray ; D3D12_TEX2DMS_SRV Texture2DMS ; D3D12_TEX2DMS_ARRAY_SRV Texture2DMSArray ; D3D12_TEX3D_SRV Texture3D ; D3D12_TEXCUBE_SRV TextureCube ; D3D12_TEXCUBE_ARRAY_SRV TextureCubeArray ; D3D12_BUFFEREX_SRV BufferEx ; }; } D3D12_SHADER_RESOURCE_VIEW_DESC ; interface ID3D12Device { ... void CreateShaderResourceView ( _In_opt_ ID3D12Resource * pResource , _In_opt_ const D3D12_SHADER_RESOURCE_VIEW_DESC * pDesc , _In_ D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor ); }; // create SRV D3D12_SHADER_RESOURCE_VIEW_DESC srvDesc ; ZeroMemory ( & srvDesc , sizeof ( D3D12_SHADER_RESOURCE_VIEW_DESC )); srvDesc . Format = mTexture -> Format ; srvDesc . ViewDimension = D3D12_SRV_DIMENSION_TEXTURE2D ; srvDesc . Texture2D . MipLevels = 1 ; mDevice -> CreateShaderResourceView ( mTexture . Get (), & srvDesc , mCbvSrvDescriptorHeap -> GetCPUDescriptorHandleForHeapStart ()); Descriptor\uff1a \u63cf\u8ff0 GPU \u4e2d\u8d44\u6e90\u7c7b\u578b\u3001\u6570\u636e\u683c\u5f0f\u3001\u5b58\u50a8\u5730\u5740\u3002 \u5e38\u89c1\u7684 Descriptor \u7c7b\u578b: Constant buffer views (CBVs) Unordered access views (UAVs) Shader resource views (SRVs) Samplers Descriptor Table\uff1aDescriptors \u5206\u7c7b\u5b58\u5165 Descriptor Table Descriptor Heap\uff1aDescriptors \u5b58\u50a8\u5728 Descriptor Heap \u4e2d Topic Description Descriptor Descriptor Heap Descriptor Table Root Singature Descriptor \u521b\u5efa\u6d41\u7a0b\uff1a GPU \u521b\u5efa Descriptor Heap GPU \u521b\u5efa\u8d44\u6e90 GPU \u5229\u7528 1. \u521b\u5efa Descriptor Table \uff08\u53ef\u9009\uff09 GPU \u5229\u7528 1.2. \u7684\u4fe1\u606f\uff0c\u5728 Descriptor Heap / Table \u4e0a\u521b\u5efa Descriptor Windows provides APIs and components that support graphics, gaming, and imaging. \u21a9 Introduction to Resource Binding in Microsoft DirectX 12 \u21a9 Microsoft DirectX* 12 \u4e2d\u8d44\u6e90\u7ed1\u5b9a\u7684\u6027\u80fd\u8003\u8651\u56e0\u7d20 \u21a9","title":"DirectML"},{"location":"directx/directml/#prerequisites","text":"DirectX 12-capable GPU drivers Windows 10 version 1903 or newer Windows 10 SDK version 1903","title":"Prerequisites"},{"location":"directx/directml/#directml-resource","text":"The key to resource binding in DirectX 12 are the concepts of a descriptor, descriptor tables, descriptor heaps, and a root signature. A descriptor is a small object that contains information about one resource. typedef struct D3D12_SHADER_RESOURCE_VIEW_DESC { DXGI_FORMAT Format ; D3D12_SRV_DIMENSION ViewDimension ; union { D3D12_BUFFER_SRV Buffer ; D3D12_TEX1D_SRV Texture1D ; D3D12_TEX1D_ARRAY_SRV Texture1DArray ; D3D12_TEX2D_SRV Texture2D ; D3D12_TEX2D_ARRAY_SRV Texture2DArray ; D3D12_TEX2DMS_SRV Texture2DMS ; D3D12_TEX2DMS_ARRAY_SRV Texture2DMSArray ; D3D12_TEX3D_SRV Texture3D ; D3D12_TEXCUBE_SRV TextureCube ; D3D12_TEXCUBE_ARRAY_SRV TextureCubeArray ; D3D12_BUFFEREX_SRV BufferEx ; }; } D3D12_SHADER_RESOURCE_VIEW_DESC ; interface ID3D12Device { ... void CreateShaderResourceView ( _In_opt_ ID3D12Resource * pResource , _In_opt_ const D3D12_SHADER_RESOURCE_VIEW_DESC * pDesc , _In_ D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor ); }; // create SRV D3D12_SHADER_RESOURCE_VIEW_DESC srvDesc ; ZeroMemory ( & srvDesc , sizeof ( D3D12_SHADER_RESOURCE_VIEW_DESC )); srvDesc . Format = mTexture -> Format ; srvDesc . ViewDimension = D3D12_SRV_DIMENSION_TEXTURE2D ; srvDesc . Texture2D . MipLevels = 1 ; mDevice -> CreateShaderResourceView ( mTexture . Get (), & srvDesc , mCbvSrvDescriptorHeap -> GetCPUDescriptorHandleForHeapStart ()); Descriptor\uff1a \u63cf\u8ff0 GPU \u4e2d\u8d44\u6e90\u7c7b\u578b\u3001\u6570\u636e\u683c\u5f0f\u3001\u5b58\u50a8\u5730\u5740\u3002 \u5e38\u89c1\u7684 Descriptor \u7c7b\u578b: Constant buffer views (CBVs) Unordered access views (UAVs) Shader resource views (SRVs) Samplers Descriptor Table\uff1aDescriptors \u5206\u7c7b\u5b58\u5165 Descriptor Table Descriptor Heap\uff1aDescriptors \u5b58\u50a8\u5728 Descriptor Heap \u4e2d Topic Description Descriptor Descriptor Heap Descriptor Table Root Singature Descriptor \u521b\u5efa\u6d41\u7a0b\uff1a GPU \u521b\u5efa Descriptor Heap GPU \u521b\u5efa\u8d44\u6e90 GPU \u5229\u7528 1. \u521b\u5efa Descriptor Table \uff08\u53ef\u9009\uff09 GPU \u5229\u7528 1.2. \u7684\u4fe1\u606f\uff0c\u5728 Descriptor Heap / Table \u4e0a\u521b\u5efa Descriptor Windows provides APIs and components that support graphics, gaming, and imaging. \u21a9 Introduction to Resource Binding in Microsoft DirectX 12 \u21a9 Microsoft DirectX* 12 \u4e2d\u8d44\u6e90\u7ed1\u5b9a\u7684\u6027\u80fd\u8003\u8651\u56e0\u7d20 \u21a9","title":"DirectML Resource"}]}