{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u6249\u9875 \u9886\u57df \u56fe\u5f62\u5b66 | \u76ee\u5f55 \u673a\u5668\u89c6\u89c9 | \u76ee\u5f55 \u6df1\u5ea6\u5b66\u4e60 | \u76ee\u5f55 \u7814\u8bfb \u6db5\u76d6\u4e0a\u8ff0\u9886\u57df\u4e2d\u7ecf\u5178\u8bba\u6587 \u56fe\u5f62\u5b66 Multi-Frame Rendering \u6846\u67b6 \u6df1\u5ea6\u5b66\u4e60 \u8d85\u5206\u8fa8\u7387 Sota \u673a\u5668\u89c6\u89c9 \u4e3b\u6d41 VI-SLAM\u3001V-SLAM\u3002 \u57fa\u7840 C++ \u8bbe\u8ba1\u6a21\u5f0f \u6742\u8bb0 \u53ef\u91cd\u7528\u7684\u4ee3\u7801\u7247\u6bb5\u3001\u7cfb\u7edf\u6280\u5de7\u3001\u5b9e\u7528\u7a0b\u5e8f\u7b49\u8bb0\u5f55 Warning \u7531\u4e8e\u6280\u672f\u9650\u5236\uff0c\u73b0\u5728\u4e2d\u6587\u641c\u7d22\u529f\u80fd\u65e0\u6cd5\u5b8c\u5584\uff0c\u8bf7\u6ce8\u610f\u5f53\u641c\u7d22\u5173\u952e\u8bcd\u7684\u65f6\u5019\u81ea\u884c\u5206\u8bcd\uff0c\u4f8b\u5982\uff1a \u679c\u6728\u9999\u9ec4\u6843\u8461\u5f0f\u86cb\u631e \u65e0\u6cd5\u641c\u5230\u4efb\u4f55\u5185\u5bb9\u3002\u4f46\u53ef\u4ee5\u641c\u7d22 \u679c\u6728\u9999 \u9ec4\u6843 \u8461\u5f0f \u86cb\u631e \u5373\u53ef\u786e\u4fdd\u7d22\u5f15\u5230\u4e0a\u8ff0\u5185\u5bb9\u3002","title":"\u6249\u9875"},{"location":"#_1","text":"","title":"\u6249\u9875"},{"location":"#_2","text":"\u56fe\u5f62\u5b66 | \u76ee\u5f55 \u673a\u5668\u89c6\u89c9 | \u76ee\u5f55 \u6df1\u5ea6\u5b66\u4e60 | \u76ee\u5f55","title":"\u9886\u57df"},{"location":"#_3","text":"\u6db5\u76d6\u4e0a\u8ff0\u9886\u57df\u4e2d\u7ecf\u5178\u8bba\u6587 \u56fe\u5f62\u5b66 Multi-Frame Rendering \u6846\u67b6 \u6df1\u5ea6\u5b66\u4e60 \u8d85\u5206\u8fa8\u7387 Sota \u673a\u5668\u89c6\u89c9 \u4e3b\u6d41 VI-SLAM\u3001V-SLAM\u3002","title":"\u7814\u8bfb"},{"location":"#_4","text":"C++ \u8bbe\u8ba1\u6a21\u5f0f","title":"\u57fa\u7840"},{"location":"#_5","text":"\u53ef\u91cd\u7528\u7684\u4ee3\u7801\u7247\u6bb5\u3001\u7cfb\u7edf\u6280\u5de7\u3001\u5b9e\u7528\u7a0b\u5e8f\u7b49\u8bb0\u5f55 Warning \u7531\u4e8e\u6280\u672f\u9650\u5236\uff0c\u73b0\u5728\u4e2d\u6587\u641c\u7d22\u529f\u80fd\u65e0\u6cd5\u5b8c\u5584\uff0c\u8bf7\u6ce8\u610f\u5f53\u641c\u7d22\u5173\u952e\u8bcd\u7684\u65f6\u5019\u81ea\u884c\u5206\u8bcd\uff0c\u4f8b\u5982\uff1a \u679c\u6728\u9999\u9ec4\u6843\u8461\u5f0f\u86cb\u631e \u65e0\u6cd5\u641c\u5230\u4efb\u4f55\u5185\u5bb9\u3002\u4f46\u53ef\u4ee5\u641c\u7d22 \u679c\u6728\u9999 \u9ec4\u6843 \u8461\u5f0f \u86cb\u631e \u5373\u53ef\u786e\u4fdd\u7d22\u5f15\u5230\u4e0a\u8ff0\u5185\u5bb9\u3002","title":"\u6742\u8bb0"},{"location":"ar/","text":"AR | \u8054\u5408\u5bfc\u822a \u6982\u8ff0 VIO frontend \u63d0\u4f9bAR\u4ea4\u4e92 SfM backend \u63d0\u4f9b\u9ad8\u7cbe\u5ea6\u5b9a\u4f4d \u67b6\u6784 VIO SfM","title":"AR | \u8054\u5408\u5bfc\u822a"},{"location":"ar/#ar","text":"","title":"AR | \u8054\u5408\u5bfc\u822a"},{"location":"ar/#_1","text":"VIO frontend \u63d0\u4f9bAR\u4ea4\u4e92 SfM backend \u63d0\u4f9b\u9ad8\u7cbe\u5ea6\u5b9a\u4f4d","title":"\u6982\u8ff0"},{"location":"ar/#_2","text":"","title":"\u67b6\u6784"},{"location":"ar/#vio","text":"","title":"VIO"},{"location":"ar/#sfm","text":"","title":"SfM"},{"location":"ems-rendering/","text":"\u56fe\u5f62\u5b66 | \u5927\u578b\u573a\u666f\u6e32\u67d3 \u6e90\u4e8e\u5b9e\u9a8c\u5ba4\u4e0e\u5ddd\u5927\u667a\u80dc\u7684\u5408\u4f5c\u9879\u76ee\uff0c\u5ddd\u5927\u667a\u80dc\u63d0\u4f9b\u5ce8\u7709\u5c71\u6a21\u578b\uff0c\u9879\u76ee\u7ec4\u5229\u7528\u56fe\u5f62\u5b66\u73b0\u6709\u7b97\u6cd5\u6e32\u67d3\u6a21\u578b\u3002 \u6e32\u67d3\u6548\u679c\u56fe \u4f53\u79ef\u4e91 \u52a8\u6001 IBL \u53c2\u8003\u8d44\u6599 HDR https://www.slideshare.net/ozlael/hable-john-uncharted2-hdr-lighting https://docs.nvidia.com/gameworks/content/gameworkslibrary/graphicssamples/opengl_samples/hdrsample.htm (NVIDIA\u7684HDR\u5b9e\u73b0) Bloom\u3001Glare\u3001Ghost\u6548\u679c \u53c2\u8003\u4efb\u52a1\u8bf4\u660e [NVIDIA HDR Sample] \u53c2\u8003\u5b9e\u73b0 Auto Exposure https://docs.unrealengine.com/enus/Engine/Rendering/PostProcessEffects/AutomaticExposure https://docs.unity3d.com/Manual/PostProcessing-EyeAdaptation.html https://frictionalgames.blogspot.com/2012/09/tech-feature-hdr-lightning.html https://github.com/Unity-Technologies/PostProcessing/wiki/Auto-Exposure (Unity\u7684auto exposure\u7cfb\u7edf) https://knarkowicz.wordpress.com/2016/01/09/automatic-exposure/ (\u5bf9automatic exposure\u7684\u8be6\u7ec6\u4ecb\u7ecd) LLL\u7b97\u6cd5 GPU Pro 6 Chapter: Real-Time Lighting via Light Linked List SIGGRAPH 2014 Course http://advances.realtimerendering.com/s2014/index.html \u7ea2\u5b9d\u4e66OIT\u987a\u5e8f\u65e0\u5173\u7684\u900f\u660e\u6e32\u67d3 \u6570\u636e\u7ed3\u6784\u56fe\u4f8b\u53ef\u5f53\u4f5c\u91cd\u8981\u53c2\u8003 Github DX\u5b9e\u73b0 https://github.com/wolfgangfengel/GPU-Pro-6/tree/master/03_Lighting PBR\u7b97\u6cd5 SIGGRAPH Course\u4e2d\u7684 Physically Based Shading in Theory and Practice\u8bfe\u7a0b GDC\u4e2d\u76f8\u5173\u8d44\u6599 PBR\u7406\u8bba https://learnopengl.com/PBR/Theory Physically Based Rendering - From Theory to Implementation 3rd edition Real Shading in Unreal Engine 4 http://blog.selfshadow.com/publications/s2013-shading-course/karis/s2013_pbs_epic_notes_v2.pdf PBR\u76f8\u5173\u8d44\u6599\u5408\u96c6 https://interplayoflight.wordpress.com/2013/12/30/readings-on-physically-based-rendering/ \u5b9e\u9a8c\u5ba42012\u7ea7\u7855\u58eb\u5b66\u4f4d\u8bba\u6587(\u7a0b\u8d53)-\u57fa\u4e8e\u7269\u7406\u7684\u5168\u5c40\u5149\u7167\u7ed8\u5236\u7cfb\u7edf Fog Fog Formulas[DX9] Fog\u7684\u4efb\u52a1\u8bf4\u660e(\u5305\u542b\u4e86\u53c2\u8003\u8d44\u6599) Parallax Cubemap Parallax Corrected CubeMaps from Siggraph 2012 - S\u00e9bastien Lagarde \u8bba\u6587\u4f5c\u8005\u7f51\u7ad9\uff0c\u5305\u542b\u5176\u4ed6\u8d44\u6599 TAA High-Quality Temporal Super Sampling[Siggraph 2014] Temporal Super Sampling and Antialiasing[2014] Temporal Reprojection Anti-Aliasing in INSIDE[GDC][2016] An Excursion in Temporal Super Sampling[GDC][2016] Amortized Super Sampling[Siggraph Asia 2009] Adaptive Temporal Antialiasing[HPG 2018] From the Lab Bench: Real-Time Rendering Advances from NVIDIA Research (presented by NVIDIA) Conservative Z-Prepass for Frustum-Traced Irregular Z-Buffers CSM\u7b97\u6cd5 Cascaded Shadow Map [Cascaded Shadow Map[Microsoft]] PCSS\u7b97\u6cd5 PCSS\u6e90\u7801 http://developer.download.nvidia.com/whitepapers/2008/PCSS_Integration.pdf PCSS\u8bba\u6587 http://developer.download.nvidia.com/shaderlibrary/docs/shadow_PCSS.pdf PostProcessVolumatricLight\u7b97\u6cd5 GPU GEM3 Chapter 13. Volumetric Light Scattering as a Post-Process https://developer.nvidia.com/gpugems/GPUGems3/gpugems3_ch13.html \u5927\u6c14\u6563\u5c04 precompute atmosphere scattering,2008 precompute atmosphere scattering\u7684\u4f5c\u8005\u7f51\u7ad9 physically based sky atmosphere and cloud rendering in frostbite Volumetric Cloud GPU Pro 7 Real-Time Volumetric Cloudscapes SIGGRAPH 2015 Advances in Realtime Rendering SIGGRAPH 2017 Advances in Realtime Rendering \u4e66\u7c4d Real-time rendering GPU Pro GPU Gem ShaderX \u4f1a\u8bae GDC Advances in Real-Time Rendering in 3D Graphics and Games SIGGRAPH Course Ke-Sen Huang's conference pages PBR\u7eb9\u7406\u8d44\u6e90 Texture Haven\uff0c\u514d\u8d39\u7684Scanned Texture","title":"\u56fe\u5f62\u5b66 | \u5927\u578b\u573a\u666f\u6e32\u67d3"},{"location":"ems-rendering/#_1","text":"\u6e90\u4e8e\u5b9e\u9a8c\u5ba4\u4e0e\u5ddd\u5927\u667a\u80dc\u7684\u5408\u4f5c\u9879\u76ee\uff0c\u5ddd\u5927\u667a\u80dc\u63d0\u4f9b\u5ce8\u7709\u5c71\u6a21\u578b\uff0c\u9879\u76ee\u7ec4\u5229\u7528\u56fe\u5f62\u5b66\u73b0\u6709\u7b97\u6cd5\u6e32\u67d3\u6a21\u578b\u3002","title":"\u56fe\u5f62\u5b66 | \u5927\u578b\u573a\u666f\u6e32\u67d3"},{"location":"ems-rendering/#_2","text":"","title":"\u6e32\u67d3\u6548\u679c\u56fe"},{"location":"ems-rendering/#_3","text":"","title":"\u4f53\u79ef\u4e91"},{"location":"ems-rendering/#ibl","text":"","title":"\u52a8\u6001 IBL"},{"location":"ems-rendering/#_4","text":"","title":"\u53c2\u8003\u8d44\u6599"},{"location":"ems-rendering/#hdr","text":"https://www.slideshare.net/ozlael/hable-john-uncharted2-hdr-lighting https://docs.nvidia.com/gameworks/content/gameworkslibrary/graphicssamples/opengl_samples/hdrsample.htm (NVIDIA\u7684HDR\u5b9e\u73b0)","title":"HDR"},{"location":"ems-rendering/#bloomglareghost","text":"\u53c2\u8003\u4efb\u52a1\u8bf4\u660e [NVIDIA HDR Sample] \u53c2\u8003\u5b9e\u73b0","title":"Bloom\u3001Glare\u3001Ghost\u6548\u679c"},{"location":"ems-rendering/#auto-exposure","text":"https://docs.unrealengine.com/enus/Engine/Rendering/PostProcessEffects/AutomaticExposure https://docs.unity3d.com/Manual/PostProcessing-EyeAdaptation.html https://frictionalgames.blogspot.com/2012/09/tech-feature-hdr-lightning.html https://github.com/Unity-Technologies/PostProcessing/wiki/Auto-Exposure (Unity\u7684auto exposure\u7cfb\u7edf) https://knarkowicz.wordpress.com/2016/01/09/automatic-exposure/ (\u5bf9automatic exposure\u7684\u8be6\u7ec6\u4ecb\u7ecd)","title":"Auto Exposure"},{"location":"ems-rendering/#lll","text":"GPU Pro 6 Chapter: Real-Time Lighting via Light Linked List SIGGRAPH 2014 Course http://advances.realtimerendering.com/s2014/index.html \u7ea2\u5b9d\u4e66OIT\u987a\u5e8f\u65e0\u5173\u7684\u900f\u660e\u6e32\u67d3 \u6570\u636e\u7ed3\u6784\u56fe\u4f8b\u53ef\u5f53\u4f5c\u91cd\u8981\u53c2\u8003 Github DX\u5b9e\u73b0 https://github.com/wolfgangfengel/GPU-Pro-6/tree/master/03_Lighting","title":"LLL\u7b97\u6cd5"},{"location":"ems-rendering/#pbr","text":"SIGGRAPH Course\u4e2d\u7684 Physically Based Shading in Theory and Practice\u8bfe\u7a0b GDC\u4e2d\u76f8\u5173\u8d44\u6599 PBR\u7406\u8bba https://learnopengl.com/PBR/Theory Physically Based Rendering - From Theory to Implementation 3rd edition Real Shading in Unreal Engine 4 http://blog.selfshadow.com/publications/s2013-shading-course/karis/s2013_pbs_epic_notes_v2.pdf PBR\u76f8\u5173\u8d44\u6599\u5408\u96c6 https://interplayoflight.wordpress.com/2013/12/30/readings-on-physically-based-rendering/ \u5b9e\u9a8c\u5ba42012\u7ea7\u7855\u58eb\u5b66\u4f4d\u8bba\u6587(\u7a0b\u8d53)-\u57fa\u4e8e\u7269\u7406\u7684\u5168\u5c40\u5149\u7167\u7ed8\u5236\u7cfb\u7edf","title":"PBR\u7b97\u6cd5"},{"location":"ems-rendering/#fog","text":"Fog Formulas[DX9] Fog\u7684\u4efb\u52a1\u8bf4\u660e(\u5305\u542b\u4e86\u53c2\u8003\u8d44\u6599)","title":"Fog"},{"location":"ems-rendering/#parallax-cubemap","text":"Parallax Corrected CubeMaps from Siggraph 2012 - S\u00e9bastien Lagarde \u8bba\u6587\u4f5c\u8005\u7f51\u7ad9\uff0c\u5305\u542b\u5176\u4ed6\u8d44\u6599","title":"Parallax Cubemap"},{"location":"ems-rendering/#taa","text":"High-Quality Temporal Super Sampling[Siggraph 2014] Temporal Super Sampling and Antialiasing[2014] Temporal Reprojection Anti-Aliasing in INSIDE[GDC][2016] An Excursion in Temporal Super Sampling[GDC][2016] Amortized Super Sampling[Siggraph Asia 2009] Adaptive Temporal Antialiasing[HPG 2018] From the Lab Bench: Real-Time Rendering Advances from NVIDIA Research (presented by NVIDIA) Conservative Z-Prepass for Frustum-Traced Irregular Z-Buffers","title":"TAA"},{"location":"ems-rendering/#csm","text":"Cascaded Shadow Map [Cascaded Shadow Map[Microsoft]]","title":"CSM\u7b97\u6cd5"},{"location":"ems-rendering/#pcss","text":"PCSS\u6e90\u7801 http://developer.download.nvidia.com/whitepapers/2008/PCSS_Integration.pdf PCSS\u8bba\u6587 http://developer.download.nvidia.com/shaderlibrary/docs/shadow_PCSS.pdf","title":"PCSS\u7b97\u6cd5"},{"location":"ems-rendering/#postprocessvolumatriclight","text":"GPU GEM3 Chapter 13. Volumetric Light Scattering as a Post-Process https://developer.nvidia.com/gpugems/GPUGems3/gpugems3_ch13.html","title":"PostProcessVolumatricLight\u7b97\u6cd5"},{"location":"ems-rendering/#_5","text":"precompute atmosphere scattering,2008 precompute atmosphere scattering\u7684\u4f5c\u8005\u7f51\u7ad9 physically based sky atmosphere and cloud rendering in frostbite","title":"\u5927\u6c14\u6563\u5c04"},{"location":"ems-rendering/#volumetric-cloud","text":"GPU Pro 7 Real-Time Volumetric Cloudscapes SIGGRAPH 2015 Advances in Realtime Rendering SIGGRAPH 2017 Advances in Realtime Rendering","title":"Volumetric Cloud"},{"location":"ems-rendering/#_6","text":"Real-time rendering GPU Pro GPU Gem ShaderX","title":"\u4e66\u7c4d"},{"location":"ems-rendering/#_7","text":"GDC Advances in Real-Time Rendering in 3D Graphics and Games SIGGRAPH Course Ke-Sen Huang's conference pages","title":"\u4f1a\u8bae"},{"location":"ems-rendering/#pbr_1","text":"Texture Haven\uff0c\u514d\u8d39\u7684Scanned Texture","title":"PBR\u7eb9\u7406\u8d44\u6e90"},{"location":"frss/","text":"\u6df1\u5ea6\u5b66\u4e60 | \u6df1\u5ea6\u5b66\u4e60\u56fe\u5f62\u589e\u5f3a","title":"\u6df1\u5ea6\u5b66\u4e60 | \u6df1\u5ea6\u5b66\u4e60\u56fe\u5f62\u589e\u5f3a"},{"location":"frss/#_1","text":"","title":"\u6df1\u5ea6\u5b66\u4e60 | \u6df1\u5ea6\u5b66\u4e60\u56fe\u5f62\u589e\u5f3a"},{"location":"github-project-boards/","text":"\u7ec4\u5185\u5f00\u53d1\u8bf4\u660e \u5de5\u4f5c\u6d41\u7a0b \u4efb\u52a1\u5212\u5206 Sprint \u5468\u671f\u76ee\u6807 Sprint \u5468\u671f\u4efb\u52a1\u6e05\u5355 \u96be\u5ea6\u6295\u70b9 \u4efb\u52a1\u5206\u914d \u8fdb\u884c\u4efb\u52a1 Github \u521b\u5efa\u65b0\u5206\u652f \u7f16\u7801 TDD \u6d4b\u8bd5\u9a71\u52a8 \u4ee3\u7801\u98ce\u683c\u89c4\u8303 Commit & Push Pull Request Code Review \u6bcf\u5468\u4f9d\u636e\u4efb\u52a1\u6570\u91cf\u8fdb\u884c\u591a\u6b21 Code Review \u5b8c\u6210\u4efb\u52a1 \u6587\u6863\u66f4\u65b0\u5230 Project/docs \u76ee\u5f55\u4e0b \u6d41\u7a0b \u65f6\u95f4\u8bf4\u660e \u65f6\u957f \u4f8b\u4f1a \u5de5\u4f5c\u65e5 \u6bcf\u65e5 10 min \u4efb\u52a1\u5212\u5206 \u5468\u4e00 30 min Code Review \u5468\u4e09\u3001\u5468\u4e94 - \u6587\u6863\u66f4\u65b0 \u5468\u4e94 - \u627e\u8001\u5f20 \u5468\u4e00/\u5468\u4e8c - Github Project Boards Kanban \u67e5\u770b/\u7ba1\u7406\u4efb\u52a1\u8fdb\u5ea6 Kanban \u5361\u7247\u7ba1\u7406 Pull Request \u8fdb\u5ea6 Kanban \u5361\u7247\u7ba1\u7406 Issue \u8fdb\u5ea6 Pull Request \u548c Code Review","title":"\u7ec4\u5185\u5f00\u53d1\u8bf4\u660e"},{"location":"github-project-boards/#_1","text":"","title":"\u7ec4\u5185\u5f00\u53d1\u8bf4\u660e"},{"location":"github-project-boards/#_2","text":"\u4efb\u52a1\u5212\u5206 Sprint \u5468\u671f\u76ee\u6807 Sprint \u5468\u671f\u4efb\u52a1\u6e05\u5355 \u96be\u5ea6\u6295\u70b9 \u4efb\u52a1\u5206\u914d \u8fdb\u884c\u4efb\u52a1 Github \u521b\u5efa\u65b0\u5206\u652f \u7f16\u7801 TDD \u6d4b\u8bd5\u9a71\u52a8 \u4ee3\u7801\u98ce\u683c\u89c4\u8303 Commit & Push Pull Request Code Review \u6bcf\u5468\u4f9d\u636e\u4efb\u52a1\u6570\u91cf\u8fdb\u884c\u591a\u6b21 Code Review \u5b8c\u6210\u4efb\u52a1 \u6587\u6863\u66f4\u65b0\u5230 Project/docs \u76ee\u5f55\u4e0b \u6d41\u7a0b \u65f6\u95f4\u8bf4\u660e \u65f6\u957f \u4f8b\u4f1a \u5de5\u4f5c\u65e5 \u6bcf\u65e5 10 min \u4efb\u52a1\u5212\u5206 \u5468\u4e00 30 min Code Review \u5468\u4e09\u3001\u5468\u4e94 - \u6587\u6863\u66f4\u65b0 \u5468\u4e94 - \u627e\u8001\u5f20 \u5468\u4e00/\u5468\u4e8c -","title":"\u5de5\u4f5c\u6d41\u7a0b"},{"location":"github-project-boards/#github-project-boards","text":"Kanban \u67e5\u770b/\u7ba1\u7406\u4efb\u52a1\u8fdb\u5ea6 Kanban \u5361\u7247\u7ba1\u7406 Pull Request \u8fdb\u5ea6 Kanban \u5361\u7247\u7ba1\u7406 Issue \u8fdb\u5ea6","title":"Github Project Boards"},{"location":"github-project-boards/#pull-request-code-review","text":"","title":"Pull Request \u548c Code Review"},{"location":"cplusplus/design-pattern/","text":"\u89c2\u5bdf\u8005\u6a21\u5f0f \u89c2\u5bdf\u8005\u6a21\u5f0f\u4e2d\u6709\u4e24\u4e2a\u91cd\u8981\u6982\u5ff5\uff0cObserver \u548c Subject\u3002\u89c2\u5bdf\u8005\u6a21\u5f0f\u7684\u672c\u8d28\u662f Subject \u5bf9\u8c61\u53d1\u751f\u53d8\u5316\u7684\u65f6\u5019\uff0c\u901a\u77e5\u6240\u6709\u89c2\u5bdf\u4e86\u8fd9\u4e2a Subject \u7684 Observer\uff0c\u800c Subject \u4e0d\u9700\u8981 Observer \u5b9e\u9645\u7c7b\u578b\u4fe1\u606f\u3002 class IObserver { public : virtual ~ IObserver () { // \u8c03\u7528 Subject RemoveObserver \u65b9\u6cd5\uff0c\u4ece\u6570\u7ec4\u4e2d\u79fb\u9664 } virtual void OnNotify ( const Entity & entity , Event event ) = 0 ; }; class ISubject { private : std :: vector < Observer *> observers_ ; public : // \u5229\u7528\u8fd9\u4e2a\u65b9\u6cd5\u53ef\u4ee5\u5c06Observer\u5bf9\u8c61\u6ce8\u518c\u5230Subject\u5bf9\u8c61\u4e2d void RegisterObserver ( Observer * observer ) { observers_ . push_back ( observer ); } void RemoveObserver ( Observer * observer ) { // \u4ece\u6570\u7ec4\u4e2d\u79fb\u9664\u2026\u2026 } protected : // \u5f53\u7c7b\u5bf9\u8c61\u72b6\u6001\u53d1\u751f\u6539\u53d8\u65f6\u5019\uff0cNotifyObserver \u65b9\u6cd5\u901a\u77e5\u6240\u6709\u6ce8\u518c\u8fdb\uff08\u8c03\u7528 RegisterObserver\uff09\u8fd9\u4e2a\u7c7b\u5bf9\u8c61\u7684\u89c2\u5bdf\u8005 void NotifyObserver ( const Entity & entity , Event event ) { foreach ( auto observer : observers_ ) observer -> OnNotify ( entity , event ); } }; // \u65b0\u521b\u5efa\u7684\u7c7b\u9700\u8981\u7ee7\u627f\u7684\u57fa\u7c7b class ImportantBaseClass {...}; // \u4f7f\u7528\u591a\u91cd\u7ee7\u627f\u3002\u82e5\u4e0d\u7ee7\u627f IObserve\uff0c\u800c\u5728 SubClass \u6dfb\u52a0 OnNotify \u65b9\u6cd5\uff0c\u5219\u65e0\u6cd5\u4f7f\u7528 Subject \u7684 Register \u65b9\u6cd5 class ObserverSubClass : public ImportantBaseClass , public IObserve {...}; observer class as instance - Software Engineering Stack Exchange \u21a9 Multiple Inheritance: What's a good example? - Stack Overflow \u21a9","title":"\u89c2\u5bdf\u8005\u6a21\u5f0f"},{"location":"cplusplus/design-pattern/#_1","text":"\u89c2\u5bdf\u8005\u6a21\u5f0f\u4e2d\u6709\u4e24\u4e2a\u91cd\u8981\u6982\u5ff5\uff0cObserver \u548c Subject\u3002\u89c2\u5bdf\u8005\u6a21\u5f0f\u7684\u672c\u8d28\u662f Subject \u5bf9\u8c61\u53d1\u751f\u53d8\u5316\u7684\u65f6\u5019\uff0c\u901a\u77e5\u6240\u6709\u89c2\u5bdf\u4e86\u8fd9\u4e2a Subject \u7684 Observer\uff0c\u800c Subject \u4e0d\u9700\u8981 Observer \u5b9e\u9645\u7c7b\u578b\u4fe1\u606f\u3002 class IObserver { public : virtual ~ IObserver () { // \u8c03\u7528 Subject RemoveObserver \u65b9\u6cd5\uff0c\u4ece\u6570\u7ec4\u4e2d\u79fb\u9664 } virtual void OnNotify ( const Entity & entity , Event event ) = 0 ; }; class ISubject { private : std :: vector < Observer *> observers_ ; public : // \u5229\u7528\u8fd9\u4e2a\u65b9\u6cd5\u53ef\u4ee5\u5c06Observer\u5bf9\u8c61\u6ce8\u518c\u5230Subject\u5bf9\u8c61\u4e2d void RegisterObserver ( Observer * observer ) { observers_ . push_back ( observer ); } void RemoveObserver ( Observer * observer ) { // \u4ece\u6570\u7ec4\u4e2d\u79fb\u9664\u2026\u2026 } protected : // \u5f53\u7c7b\u5bf9\u8c61\u72b6\u6001\u53d1\u751f\u6539\u53d8\u65f6\u5019\uff0cNotifyObserver \u65b9\u6cd5\u901a\u77e5\u6240\u6709\u6ce8\u518c\u8fdb\uff08\u8c03\u7528 RegisterObserver\uff09\u8fd9\u4e2a\u7c7b\u5bf9\u8c61\u7684\u89c2\u5bdf\u8005 void NotifyObserver ( const Entity & entity , Event event ) { foreach ( auto observer : observers_ ) observer -> OnNotify ( entity , event ); } }; // \u65b0\u521b\u5efa\u7684\u7c7b\u9700\u8981\u7ee7\u627f\u7684\u57fa\u7c7b class ImportantBaseClass {...}; // \u4f7f\u7528\u591a\u91cd\u7ee7\u627f\u3002\u82e5\u4e0d\u7ee7\u627f IObserve\uff0c\u800c\u5728 SubClass \u6dfb\u52a0 OnNotify \u65b9\u6cd5\uff0c\u5219\u65e0\u6cd5\u4f7f\u7528 Subject \u7684 Register \u65b9\u6cd5 class ObserverSubClass : public ImportantBaseClass , public IObserve {...}; observer class as instance - Software Engineering Stack Exchange \u21a9 Multiple Inheritance: What's a good example? - Stack Overflow \u21a9","title":"\u89c2\u5bdf\u8005\u6a21\u5f0f"},{"location":"cplusplus/effective-c++/","text":"\u300aEffective C++\u300b \u6761\u6b3e 01 \u89c6C++\u4e3a\u4e00\u4e2a\u8bed\u8a00\u8054\u90a6 C Object-Oriented C++ Template C++ STL \u6761\u6b3e 02 \u5c3d\u91cf\u4ee5const\uff0cenum\uff0cinline\u66ff\u6362#define const\u66ff\u6362#define const\u4fdd\u8bc1\u4f5c\u7528\u57df const\u4fdd\u8bc1\u8c03\u8bd5\u65f6\u8ffd\u8e2a\u8bb0\u53f7 enum\u66ff\u6362#define \u76f8\u6bd4\u4e8econst\uff0cenum\u9632\u6b62\u53d6\u5730\u5740 \u5728template metaprogramming\u4e2d\u7ecf\u5e38\u4f7f\u7528\u5230\uff08## \u6761\u6b3e 48\uff09 inline\u66ff\u6362#define #define \u5b8f\u5b9a\u4e49\u770b\u8d77\u6765\u50cf\u51fd\u6570\uff0c\u4f46\u4e0d\u4f1a\u62db\u81f4\u51fd\u6570\u8c03\u7528 #define \u975e\u7c7b\u578b\u5b89\u5168\uff1f\uff1f\uff0c\u884c\u4e3a\u96be\u4ee5\u9884\u6599 inline\u7c7b\u578b\u5b89\u5168\uff0c\u4e14\u9075\u5b88\u4f5c\u7528\u57df #define #include \u662f\u5fc5\u9700\u54c1\uff0c#ifdef/#ifndef\u63a7\u5236\u7f16\u8bd1\u4e2d\u8d77\u4f5c\u7528 \u6761\u6b3e 03 \u5c3d\u53ef\u80fd\u4f7f\u7528const const\u5141\u8bb8\u8bed\u4e49\u7ea6\u675f\uff0c\u4ee4\u7f16\u8bd1\u5668\u5f3a\u5236\u5b9e\u65bd \u4fee\u9970\u53d8\u91cf \u524d\u51fa\u73b0const\uff0c\u6570\u636e\u4e3aconst \u540e\u51fa\u73b0const\uff0c\u6307\u9488\u4e3aconst STL\u8fed\u4ee3\u5668 const ::iterator\uff0c\u8fed\u4ee3\u5668\u4e3aconst ::const_iterator\uff0c\u4e0d\u53ef\u66f4\u6539\u8fed\u4ee3\u5668\u6307\u5411\u7684\u6570\u636e \u4fee\u9970\u51fd\u6570\u53c2\u6570\u3001\u8fd4\u56de\u503c \u964d\u4f4e\u56e0\u5ba2\u6237\u9519\u8bef\u9020\u6210\u7684\u610f\u5916 const\u6210\u5458\u51fd\u6570 const\u4e0d\u540c\uff0c\u51fd\u6570\u91cd\u8f7d const\u6210\u5458\u51fd\u6570 bitwise const\u96be\u4ee5\u5b9e\u73b0\uff0c\u4f8b\u5982\u5bf9\u8c61\u542b\u6709\u6307\u9488\uff0c\u6307\u9488\u6307\u5411\u53e6\u4e00\u4e2a\u5bf9\u8c61 mutable\u4f7f\u5f97\u5bf9\u8c61\u67d0\u4e9b\u53d8\u91cf\u5728const\u6210\u5458\u51fd\u6570\u4e2d\u53ef\u4ee5\u4fee\u6539 const\u3001non-const\u6210\u5458\u51fd\u6570\u5185\u5bb9\u7b49\u4ef7\u65f6\u5019\uff0cnon-const\u76f4\u63a5\u8c03\u7528const\u6210\u5458\u51fd\u6570\uff0c\u5e76\u5229\u7528static_cast\u8fdb\u884cconst\u6d88\u9664 \u6761\u6b3e 04 \u786e\u5b9a\u5bf9\u8c61\u88ab\u4f7f\u7528\u524d\u5df2\u5148\u88ab\u521d\u59cb\u5316 \u5185\u7f6e\u7c7b\u578b\u4e0d\u4fdd\u8bc1\u521d\u59cb\u5316 \u5bf9\u8c61\u521d\u59cb\u5316\uff0c\u6784\u9020\u51fd\u6570\u5229\u7528\u521d\u59cb\u5316\u5217\u8868 \u521d\u59cb\u5316\u5217\u8868\u987a\u5e8f\u6309\u7167\u58f0\u660e\u6b21\u5e8f\u6392\u5217 non-local\uff08\u975e\u51fd\u6570\u5185\uff09static\u4e0d\u4fdd\u8bc1\u8de8\u7f16\u8bd1\u5355\u5143\u7684\u521d\u59cb\u5316\u987a\u5e8f \u5229\u7528local static\u5bf9\u8c61\u66ff\u6362non-local static local static\u5bf9\u8c61\u88ab\u5305\u542b\u5728\u7c7b\u7684\u6210\u5458\u51fd\u6570\u4e2d \u4f7f\u7528\u65f6\u5b9a\u4e49\u4e00\u4e2a\u5bf9\u8c61\uff0c\u8c03\u7528\u8be5\u6210\u5458\u51fd\u6570\uff0c\u6210\u5458\u51fd\u6570\u8fd4\u56delocal static\u7684\u5f15\u7528 \u6761\u6b3e 05 \u4e86\u89e3C++\u9ed8\u9ed8\u7f16\u5199\u5e76\u8c03\u7528\u54ea\u4e9b\u51fd\u6570 \u6784\u9020 \u6790\u6784 \u62f7\u8d1d\u6784\u9020 \u62f7\u8d1d\u64cd\u4f5c\u7b26 \u79fb\u52a8\u6784\u9020 \u79fb\u52a8\u64cd\u4f5c\u7b26 \u6761\u6b3e 06 \u82e5\u4e0d\u60f3\u4f7f\u7528\u7f16\u8bd1\u5668\u81ea\u52a8\u751f\u6210\u7684\u51fd\u6570\uff0c\u5c31\u8be5\u660e\u786e\u62d2\u7edd \u58f0\u660e\u4e3aprivate\u5e76\u4e14\u4e0d\u4e88\u5b9e\u73b0 private\u5229\u7528\u7f16\u8bd1\u5668\u4fdd\u8bc1\u4e0d\u88ab\u5916\u90e8\u8c03\u7528 \u4e0d\u4e88\u5b9e\u73b0\u4fdd\u8bc1\u5185\u90e8\u8c03\u7528\u65f6\u4ea7\u751f\u94fe\u63a5\u9519\u8bef \u4e13\u95e8\u963b\u6b62\u9ed8\u8ba4\u51fd\u6570\u7684\u57fa\u7c7b \u63d0\u524d\u5230\u7f16\u8bd1\u671f\u68c0\u67e5 \u7f16\u8bd1\u5668\u751f\u6210\u65f6\u5019\uff0c\u5c1d\u8bd5\u8c03\u7528\u57fa\u7c7b\u51fd\u6570\uff0c\u8c03\u7528\u88ab\u62d2\u7edd \u4f46\u4f1a\u5bfc\u81f4\u591a\u91cd\u7ee7\u627f \u6761\u6b3e 07 \u4e3a\u591a\u6001\u57fa\u7c7b\u58f0\u660evirtual\u6790\u6784\u51fd\u6570 \u57fa\u7c7b\u6307\u9488\u6307\u5411\u6d3e\u751f\u5bf9\u8c61\uff0c\u6790\u6784\u65f6\uff0c\u57fa\u7c7b\u7684\u6790\u6784\u82e5\u4e3anon-virtual\uff0c\u5219\u4f1a\u53d1\u751f\u5c40\u90e8\u9500\u6bc1\uff0c\u5bfc\u81f4\u5185\u5b58\u6cc4\u6f0f \u82e5\u53ea\u6709\u5f53class\u5185\u542b\u81f3\u5c11\u4e00\u4e2avirtual\u51fd\u6570\uff0c\u624d\u4e3a\u5b83\u58f0\u660evirtual\u51fd\u6570 \u9632\u6b62virtual\u5e26\u6765\u7684\u989d\u5916\u7a7a\u95f4\u5f00\u9500\u4ee5\u53ca\u8c03\u7528 \u6761\u6b3e 08 \u522b\u8ba9\u5f02\u5e38\u9003\u79bb\u6790\u6784\u51fd\u6570 \u8df3\u51fa\u4ee3\u7801\u5757\u65f6\u5019\uff0c\u591a\u4e2a\u5bf9\u8c61\u88ab\u6790\u6784\uff0c\u629b\u51fa\u591a\u4e2a\u5f02\u5e38\u5bfc\u81f4\u4e0d\u660e\u786e\u7684\u884c\u4e3a \u6790\u6784\u51fd\u6570\u5e94\u5f53\u6355\u6349\u4efb\u4f55\u5f02\u5e38 \u6761\u6b3e 09\u7edd\u4e0d\u518d\u6784\u9020\u548c\u6790\u6784\u8fc7\u7a0b\u4e2d\u8c03\u7528virtual\u51fd\u6570 \u6784\u9020\u8fc7\u7a0b\u3001\u6790\u6784\u8fc7\u7a0b\u865a\u51fd\u6570\u4ece\u4e0d\u4e0b\u964d\u81f3\u6d3e\u751f\u7c7b \u6761\u6b3e 10 \u4ee4operater=\u8fd4\u56de\u4e00\u4e2areference to *this \u5b9e\u73b0\u8fde\u9501\u8d4b\u503c \u6761\u6b3e 11 \u5728operator=\u4e2d\u5904\u7406\u81ea\u6211\u8d4b\u503c if(this == &obj) return *this; \u6761\u6b3e 12 \u590d\u5236\u5bf9\u8c61\u52ff\u5fd8\u5176\u6bcf\u4e00\u4e2a\u6210\u5206 \u62f7\u8d1d\u6784\u9020\u51fd\u6570\u4e2d\u521d\u59cb\u5316\u5217\u8868 \u62f7\u8d1d\u64cd\u4f5c\u7b26\u51fd\u6570\u4f53\u4e2d\u8c03\u7528\u57fa\u7c7b\u62f7\u8d1d\u64cd\u4f5c\u7b26 \u6761\u6b3e 13 \u4ee5\u5bf9\u8c61\u7ba1\u7406\u8d44\u6e90 RAII \u5c06\u8d44\u6e90\u5c01\u88c5\u8fdb\u4e00\u4e2a\u8d44\u6e90\u7c7b\u4e2d \u83b7\u53d6\u5230\u8d44\u6e90\u65f6\uff0c\u521d\u59cb\u5316\u8d44\u6e90\u7c7b\u5bf9\u8c61 \u5bf9\u8c61\u81ea\u52a8\u6790\u6784\uff0c\u91ca\u653e\u8d44\u6e90 \u5e38\u7528\u7684RAII\u7c7b\u6709 shared_ptr\u548cauto_ptr \u6761\u6b3e 14 \u8d44\u6e90\u7ba1\u7406\u7c7b\u4e2d\u5c0f\u5fc3\u4f7f\u7528copying\u884c\u4e3a \u7981\u6b62\u590d\u5236 \u91cd\u5199shared_ptr\u7684\u5220\u9664\u5668 \u6df1\u62f7\u8d1d \u8f6c\u79fb\u5e95\u90e8\u8d44\u6e90\u6240\u6709\u6743 \u6761\u6b3e 15 \u5728\u8d44\u6e90\u7ba1\u7406\u7c7b\u4e2d\u63d0\u4f9b\u5bf9\u539f\u59cb\u8d44\u6e90\u7684\u8bbf\u95ee RAII\u5e94\u63d0\u4f9b\u4e00\u4e2a\u53ef\u4ee5\u8bbf\u95ee\u539f\u59cb\u8d44\u6e90\u7684API \u63d0\u4f9b\u9690\u5f0f\u8f6c\u6362 \u6761\u6b3e 16 \u6210\u5bf9\u4f7f\u7528new\u548cdelete\u65f6\u8981\u91c7\u7528\u76f8\u540c\u5f62\u5f0f new delete new[] delete[] \u6761\u6b3e 17 \u72ec\u7acb\u4e8e\u636e\u5c06newed\u5bf9\u8c61\u7f6e\u5165\u667a\u80fd\u6307\u9488 \u51fd\u6570\u8c03\u7528\uff0c\u5b9e\u53c2\u6838\u7b97\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u786e\u5b9a\u7684\u6838\u7b97\u987a\u5e8f\uff0c\u4e2d\u95f4\u51fa\u73b0\u5f02\u5e38\u65f6\uff0c\u5bfc\u81f4\u8d44\u6e90\u6cc4\u9732 \u6761\u6b3e 18 \u6761\u6b3e 19 \u6761\u6b3e 20 \u5b81\u4ee5pass-by-reference-to-const\u66ff\u6362pass by value pass-by-reference-to-const\u901a\u5e38\u8f83\u9ad8\u6548\uff0c\u53ef\u4ee5\u907f\u514dslicing problem \u5185\u7f6e\u7c7b\u578b\u3001STL\u7684\u8fed\u4ee3\u5668\u3001\u51fd\u6570\u5bf9\u8c61\uff0cpass-by-value\u6bd4\u8f83\u9002\u5f53 \u6761\u6b3e 21 \u5fc5\u987b\u8fd4\u56de\u5bf9\u8c61\u65f6\uff0c\u522b\u5984\u60f3\u8fd4\u56de\u5176reference \u5bf9\u4e8e\u8c03\u7528\u51fd\u6570\u5c40\u90e8\u53d8\u91cf\uff0c\u8fd4\u56de\u6307\u9488\u540e\uff0c\u5c40\u90e8\u53d8\u91cf\u88ab\u9500\u6bc1\uff0c\u6307\u9488\u6240\u6307\u5411\u5185\u5bb9\u4e3a\u975e\u6cd5\u5185\u5b58 \u5bf9\u4e8e\u8c03\u7528\u51fd\u6570new\u51fa\u7684\u5bf9\u8c61\uff0c\u8fd4\u56de\u5176\u6307\u9488\uff0c\u5bfc\u81f4\u8d44\u6e90\u6cc4\u9732 \u5fc5\u987b\u8fd4\u56de\u5bf9\u8c61\u65f6\uff0c\u8fd4\u56de\u5bf9\u8c61\u5373\u53ef \u6761\u6b3e 22 \u5c06\u6210\u5458\u53d8\u91cf\u58f0\u660e\u4e3aprivate \u5c06\u6210\u5458\u53d8\u91cf\u58f0\u660e\u4e3aprivate \u5ba2\u6237\u4e0d\u7528\u601d\u8003\u662f\u5426\u8981\u52a0()\uff0c\u56e0\u4e3a\u6240\u6709\u53ef\u8c03\u7528\u7684\u90fd\u662f\u51fd\u6570 \u51fd\u6570\u5b9e\u73b0\u4e0d\u51c6\u8bbf\u95ee\u3001\u53ea\u8bfb\u8bbf\u95ee\u3001\u8bfb\u5199\u8bbf\u95ee\u3001\u60df\u5199\u8bbf\u95ee \u5c01\u88c5\u6027\uff0c\u5ba2\u6237\u4e0d\u9700\u8981\u77e5\u9053\u5185\u90e8\u53d8\u66f4 \u4e3a\u6240\u6709\u53ef\u80fd\u7684\u5b9e\u73b0\u63d0\u4f9b\u5f39\u6027 \u591a\u7ebf\u7a0b\u540c\u6b65\u3001\u8bfb\u5199\u65f6\u901a\u77e5\u5176\u4ed6\u5bf9\u8c61... \u5ba2\u6237\u4ee3\u7801\u9650\u5236\u4e86\u5176\u6269\u5c55 protected\u4e0epublic\u7c7b\u4f3c\uff0c\u5e76\u4e0d\u6bd4public\u66f4\u5177\u6709\u5c01\u88c5\u6027 derived classes\u88ab\u7834\u574f \u6761\u6b3e 23 \u6761\u6b3e 24 \u6761\u6b3e 25 \u6761\u6b3e 26 \u6761\u6b3e 27 \u5c3d\u91cf\u51cf\u5c11\u8f6c\u578b\u52a8\u4f5c \u6ce8\u91cd\u6548\u7387\u7684\u4ee3\u7801\u4e2d\u907f\u514ddynamic_cast \u5c3d\u53ef\u80fd\u57fa\u4e8evirtual\u51fd\u6570\u8c03\u7528 \u8f6c\u578b\u5fc5\u8981\u7684\u8bdd\uff0c\u9690\u85cf\u4e8e\u67d0\u4e2a\u51fd\u6570\u80cc\u540e \u5b81\u53ef\u4f7f\u7528C++\u98ce\u683c\u7684\u8f6c\u578b\uff0c\u66f4\u6613\u4e8e\u8fa8\u8bc6 \u6761\u6b3e 31 \u5c06\u6587\u4ef6\u95f4\u7684\u7f16\u8bd1\u4f9d\u5b58\u5173\u7cfb\u964d\u81f3\u6700\u4f4e \u5982\u679c\u7528references\u6216pointers\u53ef\u4ee5\u5b8c\u6210\u4efb\u52a1\uff0c\u5c31\u4e0d\u8981\u4f7f\u7528objects \u5c3d\u91cf\u4ee5class\u58f0\u660e\u66ff\u6362class\u5b9a\u4e49 \u6761\u6b3e 47 \u8bf7\u4f7f\u7528 traits classes \u8868\u73b0\u7c7b\u578b\u4fe1\u606f Traits classes\u8ba9\u7c7b\u578b\u76f8\u5173\u4fe1\u606f\u5728\u7f16\u8bd1\u671f\u53ef\u7528\uff0c\u4ed6\u4eec\u4ee5templates\u548ctemplates\u7279\u5316\u6765\u5b9e\u73b0 \u6574\u5408\u91cd\u8f7d\u6280\u672f\u540e\uff0ctraits classes\u6709\u53ef\u80fd\u5728\u7f16\u8bd1\u5668\u5bf9\u7c7b\u578b\u6267\u884cif else\u6d4b\u8bd5/ \u6761\u6b3e 53 \u4e0d\u8981\u5ffd\u89c6\u7f16\u8bd1\u5668\u7684\u8b66\u544a \u4e25\u8083\u5bf9\u5f85\u7f16\u8bd1\u5668\u8b66\u544a \u4e0d\u8fc7\u5ea6\u4f9d\u8d56\u4e8e\u7f16\u8bd1\u5668\u8b66\u544a \u6761\u6b3e 54 \u8ba9\u81ea\u5df1\u719f\u6089\u5305\u62ecTR1\u5728\u5185\u7684\u6807\u51c6\u7a0b\u5e8f\u5e93 STL iostream \u667a\u80fd\u6307\u9488 bind Type traits TR1\u4e3a\u89c4\u8303\u9010\u6e10\u88ab\u65b0\u7248\u672cC++\u5b9e\u73b0 \u6761\u6b3e 55 \u8ba9\u81ea\u5df1\u719f\u6089Boost \u9010\u6b65\u88abstd::\u91c7\u7eb3","title":"\u300aEffective C++\u300b"},{"location":"cplusplus/effective-c++/#effective-c","text":"","title":"\u300aEffective C++\u300b"},{"location":"cplusplus/effective-c++/#01-c","text":"C Object-Oriented C++ Template C++ STL","title":"\u6761\u6b3e 01 \u89c6C++\u4e3a\u4e00\u4e2a\u8bed\u8a00\u8054\u90a6"},{"location":"cplusplus/effective-c++/#02-constenuminlinedefine","text":"const\u66ff\u6362#define const\u4fdd\u8bc1\u4f5c\u7528\u57df const\u4fdd\u8bc1\u8c03\u8bd5\u65f6\u8ffd\u8e2a\u8bb0\u53f7 enum\u66ff\u6362#define \u76f8\u6bd4\u4e8econst\uff0cenum\u9632\u6b62\u53d6\u5730\u5740 \u5728template metaprogramming\u4e2d\u7ecf\u5e38\u4f7f\u7528\u5230\uff08## \u6761\u6b3e 48\uff09 inline\u66ff\u6362#define #define \u5b8f\u5b9a\u4e49\u770b\u8d77\u6765\u50cf\u51fd\u6570\uff0c\u4f46\u4e0d\u4f1a\u62db\u81f4\u51fd\u6570\u8c03\u7528 #define \u975e\u7c7b\u578b\u5b89\u5168\uff1f\uff1f\uff0c\u884c\u4e3a\u96be\u4ee5\u9884\u6599 inline\u7c7b\u578b\u5b89\u5168\uff0c\u4e14\u9075\u5b88\u4f5c\u7528\u57df #define #include \u662f\u5fc5\u9700\u54c1\uff0c#ifdef/#ifndef\u63a7\u5236\u7f16\u8bd1\u4e2d\u8d77\u4f5c\u7528","title":"\u6761\u6b3e 02 \u5c3d\u91cf\u4ee5const\uff0cenum\uff0cinline\u66ff\u6362#define"},{"location":"cplusplus/effective-c++/#03-const","text":"const\u5141\u8bb8\u8bed\u4e49\u7ea6\u675f\uff0c\u4ee4\u7f16\u8bd1\u5668\u5f3a\u5236\u5b9e\u65bd \u4fee\u9970\u53d8\u91cf \u524d\u51fa\u73b0const\uff0c\u6570\u636e\u4e3aconst \u540e\u51fa\u73b0const\uff0c\u6307\u9488\u4e3aconst STL\u8fed\u4ee3\u5668 const ::iterator\uff0c\u8fed\u4ee3\u5668\u4e3aconst ::const_iterator\uff0c\u4e0d\u53ef\u66f4\u6539\u8fed\u4ee3\u5668\u6307\u5411\u7684\u6570\u636e \u4fee\u9970\u51fd\u6570\u53c2\u6570\u3001\u8fd4\u56de\u503c \u964d\u4f4e\u56e0\u5ba2\u6237\u9519\u8bef\u9020\u6210\u7684\u610f\u5916 const\u6210\u5458\u51fd\u6570 const\u4e0d\u540c\uff0c\u51fd\u6570\u91cd\u8f7d const\u6210\u5458\u51fd\u6570 bitwise const\u96be\u4ee5\u5b9e\u73b0\uff0c\u4f8b\u5982\u5bf9\u8c61\u542b\u6709\u6307\u9488\uff0c\u6307\u9488\u6307\u5411\u53e6\u4e00\u4e2a\u5bf9\u8c61 mutable\u4f7f\u5f97\u5bf9\u8c61\u67d0\u4e9b\u53d8\u91cf\u5728const\u6210\u5458\u51fd\u6570\u4e2d\u53ef\u4ee5\u4fee\u6539 const\u3001non-const\u6210\u5458\u51fd\u6570\u5185\u5bb9\u7b49\u4ef7\u65f6\u5019\uff0cnon-const\u76f4\u63a5\u8c03\u7528const\u6210\u5458\u51fd\u6570\uff0c\u5e76\u5229\u7528static_cast\u8fdb\u884cconst\u6d88\u9664","title":"\u6761\u6b3e 03 \u5c3d\u53ef\u80fd\u4f7f\u7528const"},{"location":"cplusplus/effective-c++/#04","text":"\u5185\u7f6e\u7c7b\u578b\u4e0d\u4fdd\u8bc1\u521d\u59cb\u5316 \u5bf9\u8c61\u521d\u59cb\u5316\uff0c\u6784\u9020\u51fd\u6570\u5229\u7528\u521d\u59cb\u5316\u5217\u8868 \u521d\u59cb\u5316\u5217\u8868\u987a\u5e8f\u6309\u7167\u58f0\u660e\u6b21\u5e8f\u6392\u5217 non-local\uff08\u975e\u51fd\u6570\u5185\uff09static\u4e0d\u4fdd\u8bc1\u8de8\u7f16\u8bd1\u5355\u5143\u7684\u521d\u59cb\u5316\u987a\u5e8f \u5229\u7528local static\u5bf9\u8c61\u66ff\u6362non-local static local static\u5bf9\u8c61\u88ab\u5305\u542b\u5728\u7c7b\u7684\u6210\u5458\u51fd\u6570\u4e2d \u4f7f\u7528\u65f6\u5b9a\u4e49\u4e00\u4e2a\u5bf9\u8c61\uff0c\u8c03\u7528\u8be5\u6210\u5458\u51fd\u6570\uff0c\u6210\u5458\u51fd\u6570\u8fd4\u56delocal static\u7684\u5f15\u7528","title":"\u6761\u6b3e 04 \u786e\u5b9a\u5bf9\u8c61\u88ab\u4f7f\u7528\u524d\u5df2\u5148\u88ab\u521d\u59cb\u5316"},{"location":"cplusplus/effective-c++/#05-c","text":"\u6784\u9020 \u6790\u6784 \u62f7\u8d1d\u6784\u9020 \u62f7\u8d1d\u64cd\u4f5c\u7b26 \u79fb\u52a8\u6784\u9020 \u79fb\u52a8\u64cd\u4f5c\u7b26","title":"\u6761\u6b3e 05 \u4e86\u89e3C++\u9ed8\u9ed8\u7f16\u5199\u5e76\u8c03\u7528\u54ea\u4e9b\u51fd\u6570"},{"location":"cplusplus/effective-c++/#06","text":"\u58f0\u660e\u4e3aprivate\u5e76\u4e14\u4e0d\u4e88\u5b9e\u73b0 private\u5229\u7528\u7f16\u8bd1\u5668\u4fdd\u8bc1\u4e0d\u88ab\u5916\u90e8\u8c03\u7528 \u4e0d\u4e88\u5b9e\u73b0\u4fdd\u8bc1\u5185\u90e8\u8c03\u7528\u65f6\u4ea7\u751f\u94fe\u63a5\u9519\u8bef \u4e13\u95e8\u963b\u6b62\u9ed8\u8ba4\u51fd\u6570\u7684\u57fa\u7c7b \u63d0\u524d\u5230\u7f16\u8bd1\u671f\u68c0\u67e5 \u7f16\u8bd1\u5668\u751f\u6210\u65f6\u5019\uff0c\u5c1d\u8bd5\u8c03\u7528\u57fa\u7c7b\u51fd\u6570\uff0c\u8c03\u7528\u88ab\u62d2\u7edd \u4f46\u4f1a\u5bfc\u81f4\u591a\u91cd\u7ee7\u627f","title":"\u6761\u6b3e 06 \u82e5\u4e0d\u60f3\u4f7f\u7528\u7f16\u8bd1\u5668\u81ea\u52a8\u751f\u6210\u7684\u51fd\u6570\uff0c\u5c31\u8be5\u660e\u786e\u62d2\u7edd"},{"location":"cplusplus/effective-c++/#07-virtual","text":"\u57fa\u7c7b\u6307\u9488\u6307\u5411\u6d3e\u751f\u5bf9\u8c61\uff0c\u6790\u6784\u65f6\uff0c\u57fa\u7c7b\u7684\u6790\u6784\u82e5\u4e3anon-virtual\uff0c\u5219\u4f1a\u53d1\u751f\u5c40\u90e8\u9500\u6bc1\uff0c\u5bfc\u81f4\u5185\u5b58\u6cc4\u6f0f \u82e5\u53ea\u6709\u5f53class\u5185\u542b\u81f3\u5c11\u4e00\u4e2avirtual\u51fd\u6570\uff0c\u624d\u4e3a\u5b83\u58f0\u660evirtual\u51fd\u6570 \u9632\u6b62virtual\u5e26\u6765\u7684\u989d\u5916\u7a7a\u95f4\u5f00\u9500\u4ee5\u53ca\u8c03\u7528","title":"\u6761\u6b3e 07 \u4e3a\u591a\u6001\u57fa\u7c7b\u58f0\u660evirtual\u6790\u6784\u51fd\u6570"},{"location":"cplusplus/effective-c++/#08","text":"\u8df3\u51fa\u4ee3\u7801\u5757\u65f6\u5019\uff0c\u591a\u4e2a\u5bf9\u8c61\u88ab\u6790\u6784\uff0c\u629b\u51fa\u591a\u4e2a\u5f02\u5e38\u5bfc\u81f4\u4e0d\u660e\u786e\u7684\u884c\u4e3a \u6790\u6784\u51fd\u6570\u5e94\u5f53\u6355\u6349\u4efb\u4f55\u5f02\u5e38","title":"\u6761\u6b3e 08 \u522b\u8ba9\u5f02\u5e38\u9003\u79bb\u6790\u6784\u51fd\u6570"},{"location":"cplusplus/effective-c++/#09virtual","text":"\u6784\u9020\u8fc7\u7a0b\u3001\u6790\u6784\u8fc7\u7a0b\u865a\u51fd\u6570\u4ece\u4e0d\u4e0b\u964d\u81f3\u6d3e\u751f\u7c7b","title":"\u6761\u6b3e 09\u7edd\u4e0d\u518d\u6784\u9020\u548c\u6790\u6784\u8fc7\u7a0b\u4e2d\u8c03\u7528virtual\u51fd\u6570"},{"location":"cplusplus/effective-c++/#10-operaterreference-to-this","text":"\u5b9e\u73b0\u8fde\u9501\u8d4b\u503c","title":"\u6761\u6b3e 10 \u4ee4operater=\u8fd4\u56de\u4e00\u4e2areference to *this"},{"location":"cplusplus/effective-c++/#11-operator","text":"if(this == &obj) return *this;","title":"\u6761\u6b3e 11 \u5728operator=\u4e2d\u5904\u7406\u81ea\u6211\u8d4b\u503c"},{"location":"cplusplus/effective-c++/#12","text":"\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u4e2d\u521d\u59cb\u5316\u5217\u8868 \u62f7\u8d1d\u64cd\u4f5c\u7b26\u51fd\u6570\u4f53\u4e2d\u8c03\u7528\u57fa\u7c7b\u62f7\u8d1d\u64cd\u4f5c\u7b26","title":"\u6761\u6b3e 12  \u590d\u5236\u5bf9\u8c61\u52ff\u5fd8\u5176\u6bcf\u4e00\u4e2a\u6210\u5206"},{"location":"cplusplus/effective-c++/#13","text":"RAII \u5c06\u8d44\u6e90\u5c01\u88c5\u8fdb\u4e00\u4e2a\u8d44\u6e90\u7c7b\u4e2d \u83b7\u53d6\u5230\u8d44\u6e90\u65f6\uff0c\u521d\u59cb\u5316\u8d44\u6e90\u7c7b\u5bf9\u8c61 \u5bf9\u8c61\u81ea\u52a8\u6790\u6784\uff0c\u91ca\u653e\u8d44\u6e90 \u5e38\u7528\u7684RAII\u7c7b\u6709 shared_ptr\u548cauto_ptr","title":"\u6761\u6b3e 13 \u4ee5\u5bf9\u8c61\u7ba1\u7406\u8d44\u6e90"},{"location":"cplusplus/effective-c++/#14-copying","text":"\u7981\u6b62\u590d\u5236 \u91cd\u5199shared_ptr\u7684\u5220\u9664\u5668 \u6df1\u62f7\u8d1d \u8f6c\u79fb\u5e95\u90e8\u8d44\u6e90\u6240\u6709\u6743","title":"\u6761\u6b3e 14 \u8d44\u6e90\u7ba1\u7406\u7c7b\u4e2d\u5c0f\u5fc3\u4f7f\u7528copying\u884c\u4e3a"},{"location":"cplusplus/effective-c++/#15","text":"RAII\u5e94\u63d0\u4f9b\u4e00\u4e2a\u53ef\u4ee5\u8bbf\u95ee\u539f\u59cb\u8d44\u6e90\u7684API \u63d0\u4f9b\u9690\u5f0f\u8f6c\u6362","title":"\u6761\u6b3e 15 \u5728\u8d44\u6e90\u7ba1\u7406\u7c7b\u4e2d\u63d0\u4f9b\u5bf9\u539f\u59cb\u8d44\u6e90\u7684\u8bbf\u95ee"},{"location":"cplusplus/effective-c++/#16-newdelete","text":"new delete new[] delete[]","title":"\u6761\u6b3e 16 \u6210\u5bf9\u4f7f\u7528new\u548cdelete\u65f6\u8981\u91c7\u7528\u76f8\u540c\u5f62\u5f0f"},{"location":"cplusplus/effective-c++/#17-newed","text":"\u51fd\u6570\u8c03\u7528\uff0c\u5b9e\u53c2\u6838\u7b97\u8fc7\u7a0b\u4e2d\uff0c\u4e0d\u786e\u5b9a\u7684\u6838\u7b97\u987a\u5e8f\uff0c\u4e2d\u95f4\u51fa\u73b0\u5f02\u5e38\u65f6\uff0c\u5bfc\u81f4\u8d44\u6e90\u6cc4\u9732","title":"\u6761\u6b3e 17 \u72ec\u7acb\u4e8e\u636e\u5c06newed\u5bf9\u8c61\u7f6e\u5165\u667a\u80fd\u6307\u9488"},{"location":"cplusplus/effective-c++/#18","text":"","title":"\u6761\u6b3e 18"},{"location":"cplusplus/effective-c++/#19","text":"","title":"\u6761\u6b3e 19"},{"location":"cplusplus/effective-c++/#20-pass-by-reference-to-constpass-by-value","text":"pass-by-reference-to-const\u901a\u5e38\u8f83\u9ad8\u6548\uff0c\u53ef\u4ee5\u907f\u514dslicing problem \u5185\u7f6e\u7c7b\u578b\u3001STL\u7684\u8fed\u4ee3\u5668\u3001\u51fd\u6570\u5bf9\u8c61\uff0cpass-by-value\u6bd4\u8f83\u9002\u5f53","title":"\u6761\u6b3e 20 \u5b81\u4ee5pass-by-reference-to-const\u66ff\u6362pass by value"},{"location":"cplusplus/effective-c++/#21-reference","text":"\u5bf9\u4e8e\u8c03\u7528\u51fd\u6570\u5c40\u90e8\u53d8\u91cf\uff0c\u8fd4\u56de\u6307\u9488\u540e\uff0c\u5c40\u90e8\u53d8\u91cf\u88ab\u9500\u6bc1\uff0c\u6307\u9488\u6240\u6307\u5411\u5185\u5bb9\u4e3a\u975e\u6cd5\u5185\u5b58 \u5bf9\u4e8e\u8c03\u7528\u51fd\u6570new\u51fa\u7684\u5bf9\u8c61\uff0c\u8fd4\u56de\u5176\u6307\u9488\uff0c\u5bfc\u81f4\u8d44\u6e90\u6cc4\u9732 \u5fc5\u987b\u8fd4\u56de\u5bf9\u8c61\u65f6\uff0c\u8fd4\u56de\u5bf9\u8c61\u5373\u53ef","title":"\u6761\u6b3e 21 \u5fc5\u987b\u8fd4\u56de\u5bf9\u8c61\u65f6\uff0c\u522b\u5984\u60f3\u8fd4\u56de\u5176reference"},{"location":"cplusplus/effective-c++/#22-private","text":"\u5c06\u6210\u5458\u53d8\u91cf\u58f0\u660e\u4e3aprivate \u5ba2\u6237\u4e0d\u7528\u601d\u8003\u662f\u5426\u8981\u52a0()\uff0c\u56e0\u4e3a\u6240\u6709\u53ef\u8c03\u7528\u7684\u90fd\u662f\u51fd\u6570 \u51fd\u6570\u5b9e\u73b0\u4e0d\u51c6\u8bbf\u95ee\u3001\u53ea\u8bfb\u8bbf\u95ee\u3001\u8bfb\u5199\u8bbf\u95ee\u3001\u60df\u5199\u8bbf\u95ee \u5c01\u88c5\u6027\uff0c\u5ba2\u6237\u4e0d\u9700\u8981\u77e5\u9053\u5185\u90e8\u53d8\u66f4 \u4e3a\u6240\u6709\u53ef\u80fd\u7684\u5b9e\u73b0\u63d0\u4f9b\u5f39\u6027 \u591a\u7ebf\u7a0b\u540c\u6b65\u3001\u8bfb\u5199\u65f6\u901a\u77e5\u5176\u4ed6\u5bf9\u8c61... \u5ba2\u6237\u4ee3\u7801\u9650\u5236\u4e86\u5176\u6269\u5c55 protected\u4e0epublic\u7c7b\u4f3c\uff0c\u5e76\u4e0d\u6bd4public\u66f4\u5177\u6709\u5c01\u88c5\u6027 derived classes\u88ab\u7834\u574f","title":"\u6761\u6b3e 22 \u5c06\u6210\u5458\u53d8\u91cf\u58f0\u660e\u4e3aprivate"},{"location":"cplusplus/effective-c++/#23","text":"","title":"\u6761\u6b3e 23"},{"location":"cplusplus/effective-c++/#24","text":"","title":"\u6761\u6b3e 24"},{"location":"cplusplus/effective-c++/#25","text":"","title":"\u6761\u6b3e 25"},{"location":"cplusplus/effective-c++/#26","text":"","title":"\u6761\u6b3e 26"},{"location":"cplusplus/effective-c++/#27","text":"\u6ce8\u91cd\u6548\u7387\u7684\u4ee3\u7801\u4e2d\u907f\u514ddynamic_cast \u5c3d\u53ef\u80fd\u57fa\u4e8evirtual\u51fd\u6570\u8c03\u7528 \u8f6c\u578b\u5fc5\u8981\u7684\u8bdd\uff0c\u9690\u85cf\u4e8e\u67d0\u4e2a\u51fd\u6570\u80cc\u540e \u5b81\u53ef\u4f7f\u7528C++\u98ce\u683c\u7684\u8f6c\u578b\uff0c\u66f4\u6613\u4e8e\u8fa8\u8bc6","title":"\u6761\u6b3e 27 \u5c3d\u91cf\u51cf\u5c11\u8f6c\u578b\u52a8\u4f5c"},{"location":"cplusplus/effective-c++/#31","text":"\u5982\u679c\u7528references\u6216pointers\u53ef\u4ee5\u5b8c\u6210\u4efb\u52a1\uff0c\u5c31\u4e0d\u8981\u4f7f\u7528objects \u5c3d\u91cf\u4ee5class\u58f0\u660e\u66ff\u6362class\u5b9a\u4e49","title":"\u6761\u6b3e 31 \u5c06\u6587\u4ef6\u95f4\u7684\u7f16\u8bd1\u4f9d\u5b58\u5173\u7cfb\u964d\u81f3\u6700\u4f4e"},{"location":"cplusplus/effective-c++/#47-traits-classes","text":"Traits classes\u8ba9\u7c7b\u578b\u76f8\u5173\u4fe1\u606f\u5728\u7f16\u8bd1\u671f\u53ef\u7528\uff0c\u4ed6\u4eec\u4ee5templates\u548ctemplates\u7279\u5316\u6765\u5b9e\u73b0 \u6574\u5408\u91cd\u8f7d\u6280\u672f\u540e\uff0ctraits classes\u6709\u53ef\u80fd\u5728\u7f16\u8bd1\u5668\u5bf9\u7c7b\u578b\u6267\u884cif else\u6d4b\u8bd5/","title":"\u6761\u6b3e 47 \u8bf7\u4f7f\u7528 traits classes \u8868\u73b0\u7c7b\u578b\u4fe1\u606f"},{"location":"cplusplus/effective-c++/#53","text":"\u4e25\u8083\u5bf9\u5f85\u7f16\u8bd1\u5668\u8b66\u544a \u4e0d\u8fc7\u5ea6\u4f9d\u8d56\u4e8e\u7f16\u8bd1\u5668\u8b66\u544a","title":"\u6761\u6b3e 53 \u4e0d\u8981\u5ffd\u89c6\u7f16\u8bd1\u5668\u7684\u8b66\u544a"},{"location":"cplusplus/effective-c++/#54-tr1","text":"STL iostream \u667a\u80fd\u6307\u9488 bind Type traits TR1\u4e3a\u89c4\u8303\u9010\u6e10\u88ab\u65b0\u7248\u672cC++\u5b9e\u73b0","title":"\u6761\u6b3e 54 \u8ba9\u81ea\u5df1\u719f\u6089\u5305\u62ecTR1\u5728\u5185\u7684\u6807\u51c6\u7a0b\u5e8f\u5e93"},{"location":"cplusplus/effective-c++/#55-boost","text":"\u9010\u6b65\u88abstd::\u91c7\u7eb3","title":"\u6761\u6b3e 55 \u8ba9\u81ea\u5df1\u719f\u6089Boost"},{"location":"cplusplus/enum-class/","text":"\u679a\u4e3e\u7c7b enum class Error { OK , FileNotFount , OutOfMemory }; enum oldStyle { OH , OK , OR }; \u679a\u4e3e\u503c\u80fd\u76f4\u63a5\u8d4b\u4e88 int \u53d8\u91cf\uff0c\u53ef\u8bfb\u6027\u5dee \u679a\u4e3e\u7c7b\u5fc5\u987b\u7528 static_cast \u8fdb\u884c\u8f6c\u6362","title":"\u679a\u4e3e\u7c7b"},{"location":"cplusplus/enum-class/#_1","text":"enum class Error { OK , FileNotFount , OutOfMemory }; enum oldStyle { OH , OK , OR }; \u679a\u4e3e\u503c\u80fd\u76f4\u63a5\u8d4b\u4e88 int \u53d8\u91cf\uff0c\u53ef\u8bfb\u6027\u5dee \u679a\u4e3e\u7c7b\u5fc5\u987b\u7528 static_cast \u8fdb\u884c\u8f6c\u6362","title":"\u679a\u4e3e\u7c7b"},{"location":"cplusplus/factory/","text":"\u5de5\u5382\u6a21\u5f0f \u8981\u7d20 \u57fa\u7840\u7248\u672c\u8bf4\u660e ProductData::CreateFoo(SignatureType sig) global\uff0cfunction\uff0c\u7a0b\u5e8f\u8c03\u7528\uff0c\u8fd4\u56de\u57fa\u7c7b\u6307\u9488ptr_foo\uff0c\u5229\u7528\u5176\u8fdb\u884c\u591a\u6001\u8c03\u7528\uff08ptr_foo->make()\uff09 ProductData::factory_map_ global\uff0cstd::map<signature\uff0cfunction>\uff0c\u5b58\u50a8\u6620\u5c04\u5173\u7cfb\uff0c\u4f8b\u5982 CreateFoo(signature) \u65f6\uff0cCreateFoo \u5185\u90e8\u5229\u7528 Signature \u4e0e\u521b\u5efa\u5bf9\u8c61\u51fd\u6570\u7684\u6620\u5c04\u5173\u7cfb\uff08\u901a\u8fc7\u8fd9\u4e2a map \u67e5\u627e\uff09\u6765\u8fd4\u56de\u4e0d\u540c\u5bf9\u8c61 ProductData::RegisterProductFactory global\uff0cfunction\uff0c\u5c06\u6620\u5c04\u5173\u7cfb\u6ce8\u518c\u8fdb FuncMap \u4e2d FactoryRegister \u6784\u9020\u51fd\u6570\u4e2d\u8c03\u7528 ProductData::RegisterProductFactory \u5c06 function \u6ce8\u518c\u8fdb ProductData \u5355\u4f8b\u4e2d\u7684 factory_map_ \u57fa\u7840\u7248\u672c class Foo { virtual void make () = 0 ; } class Foobar : public Foo { void make () override { std :: cout << \"making foobar...\" << std :: endl ; } } FactoryRegister < Foobar > foobarRegister ( FOOBAR_SIGNATURE ); class ProductData { public : using SignatureType = int ; using Factory = std :: function < Foo * () > ; public : static ProductData & GetInstance (); public : ~ ProductData () = default ; bool RegisterProductFactory ( SignatureType sig , const Factory & factory ); Foo * CreateFoo ( SignatureType sig ); private : bool IsProductRegistered ( SignatureType sig ); std :: map < SignatureType , Factory > factory_map_ ; } template < typename T > class FactoryRegister { public : explicit FactoryRegister ( ProductData :: SignatureType sig ){ auto ProductFactory = []() -> Foo * { reutrn new T ; }; auto & ProductData = ProductData :: GetInstance (); ProductData . registerProductFactory ( sig , ProductFactory ); } }; int main(int argc, char* argv[]){ Foo* foo = createFoo(FOOBAR_SIGNATURE); foo->make(); return 0; } \u53ef\u53d8\u53c2\u6570\u7248\u672c template < typename ... Parameters > // \u6b64\u5904\u4f7f\u7528\u6a21\u677f\u662f\u4e3a\u4e86\u7ef4\u6301 function \u7684\u6cdb\u578b class ProductData { public : using SignatureType = int ; using Factory = std :: function < Foo * ( Parameters ...) > ; public : static ProductData & GetInstance (); public : ~ ProductData () = default ; bool RegisterProductFactory ( SignatureType sig , const Factory & factory ); Foo * CreateFoo ( SignatureType sig , Parameters ... parameters ); private : bool IsProductRegistered ( SignatureType sig ); std :: map < SignatureType , Factory > factory_map_ ; } template < typename T , typename ... Parameters > class FactoryRegister { public : explicit FactoryRegister ( ProductData :: SignatureType sig , Parameters ... parameters ){ static_assert ( std :: is_constructible < T , Parameters ... >:: value ); auto ProductFactory = []( Parameters ... parameters ) -> Foo * { reutrn new T ( parameters ...); }; auto & productData = ProductData < Parameters ... >:: GetInstance (); productData . RegisterProductFactory ( sig , ProductFactory ); } }; class Foobar : public Foo { Foobar ( uint ); void make () override { std :: cout << \"making foobar...\" << std :: endl ; } }; FactoryRegister < Foobar , uint > foobarRegister ( FOOBAR_SIGNATURE ); int main ( int argc , char * argv []){ Foo * foo = createFoo ( FOOBAR_SIGNATURE , 8U ); foo -> make (); return 0 ; }","title":"\u5de5\u5382\u6a21\u5f0f"},{"location":"cplusplus/factory/#_1","text":"\u8981\u7d20 \u57fa\u7840\u7248\u672c\u8bf4\u660e ProductData::CreateFoo(SignatureType sig) global\uff0cfunction\uff0c\u7a0b\u5e8f\u8c03\u7528\uff0c\u8fd4\u56de\u57fa\u7c7b\u6307\u9488ptr_foo\uff0c\u5229\u7528\u5176\u8fdb\u884c\u591a\u6001\u8c03\u7528\uff08ptr_foo->make()\uff09 ProductData::factory_map_ global\uff0cstd::map<signature\uff0cfunction>\uff0c\u5b58\u50a8\u6620\u5c04\u5173\u7cfb\uff0c\u4f8b\u5982 CreateFoo(signature) \u65f6\uff0cCreateFoo \u5185\u90e8\u5229\u7528 Signature \u4e0e\u521b\u5efa\u5bf9\u8c61\u51fd\u6570\u7684\u6620\u5c04\u5173\u7cfb\uff08\u901a\u8fc7\u8fd9\u4e2a map \u67e5\u627e\uff09\u6765\u8fd4\u56de\u4e0d\u540c\u5bf9\u8c61 ProductData::RegisterProductFactory global\uff0cfunction\uff0c\u5c06\u6620\u5c04\u5173\u7cfb\u6ce8\u518c\u8fdb FuncMap \u4e2d FactoryRegister \u6784\u9020\u51fd\u6570\u4e2d\u8c03\u7528 ProductData::RegisterProductFactory \u5c06 function \u6ce8\u518c\u8fdb ProductData \u5355\u4f8b\u4e2d\u7684 factory_map_","title":"\u5de5\u5382\u6a21\u5f0f"},{"location":"cplusplus/factory/#_2","text":"class Foo { virtual void make () = 0 ; } class Foobar : public Foo { void make () override { std :: cout << \"making foobar...\" << std :: endl ; } } FactoryRegister < Foobar > foobarRegister ( FOOBAR_SIGNATURE ); class ProductData { public : using SignatureType = int ; using Factory = std :: function < Foo * () > ; public : static ProductData & GetInstance (); public : ~ ProductData () = default ; bool RegisterProductFactory ( SignatureType sig , const Factory & factory ); Foo * CreateFoo ( SignatureType sig ); private : bool IsProductRegistered ( SignatureType sig ); std :: map < SignatureType , Factory > factory_map_ ; } template < typename T > class FactoryRegister { public : explicit FactoryRegister ( ProductData :: SignatureType sig ){ auto ProductFactory = []() -> Foo * { reutrn new T ; }; auto & ProductData = ProductData :: GetInstance (); ProductData . registerProductFactory ( sig , ProductFactory ); } }; int main(int argc, char* argv[]){ Foo* foo = createFoo(FOOBAR_SIGNATURE); foo->make(); return 0; }","title":"\u57fa\u7840\u7248\u672c"},{"location":"cplusplus/factory/#_3","text":"template < typename ... Parameters > // \u6b64\u5904\u4f7f\u7528\u6a21\u677f\u662f\u4e3a\u4e86\u7ef4\u6301 function \u7684\u6cdb\u578b class ProductData { public : using SignatureType = int ; using Factory = std :: function < Foo * ( Parameters ...) > ; public : static ProductData & GetInstance (); public : ~ ProductData () = default ; bool RegisterProductFactory ( SignatureType sig , const Factory & factory ); Foo * CreateFoo ( SignatureType sig , Parameters ... parameters ); private : bool IsProductRegistered ( SignatureType sig ); std :: map < SignatureType , Factory > factory_map_ ; } template < typename T , typename ... Parameters > class FactoryRegister { public : explicit FactoryRegister ( ProductData :: SignatureType sig , Parameters ... parameters ){ static_assert ( std :: is_constructible < T , Parameters ... >:: value ); auto ProductFactory = []( Parameters ... parameters ) -> Foo * { reutrn new T ( parameters ...); }; auto & productData = ProductData < Parameters ... >:: GetInstance (); productData . RegisterProductFactory ( sig , ProductFactory ); } }; class Foobar : public Foo { Foobar ( uint ); void make () override { std :: cout << \"making foobar...\" << std :: endl ; } }; FactoryRegister < Foobar , uint > foobarRegister ( FOOBAR_SIGNATURE ); int main ( int argc , char * argv []){ Foo * foo = createFoo ( FOOBAR_SIGNATURE , 8U ); foo -> make (); return 0 ; }","title":"\u53ef\u53d8\u53c2\u6570\u7248\u672c"},{"location":"cplusplus/forward/","text":"\u5b8c\u7f8e\u8f6c\u53d1 \u53ef\u53d8\u6a21\u677f\u53c2\u6570\u5f15\u7528\u4f20\u9012 void modifyData ( std :: vector < int >& vData ){ vData [ 0 ] = 100 ; } template < class ... TArgs > void wrapper ( TArgs & ... vArgs ){ modifyData ( vArgs ...); } int main ( int argc , char * argv []){ std :: vector < int > t ; t . push_back ( 10 ); t . push_back ( 3 ); t . push_back ( 12 ); wrapper ( t ); std :: cout << t [ 0 ] << std :: endl ; // out\uff1a100 } \u5b57\u9762\u503c\u4f20\u9012\u5bfc\u81f4\u7684\u95ee\u9898 void modifyData ( std :: vector < int >& vData , const int & value ){ vData [ 0 ] = value ; } int main ( int argc , char * argv []){ std :: vector < int > t ; t . push_back ( 10 ); t . push_back ( 3 ); t . push_back ( 12 ); wrapper ( t , 888 ); std :: cout << t [ 0 ] << std :: endl ; // complilation error\uff1a\u65e0\u6cd5\u5c06 int \u8f6c\u6362\u4e3a int& } \u5b57\u9762\u91cf\u4e3a\u53f3\u503c\uff0c\u4e3a\u4e34\u65f6\u5bf9\u8c61\uff0c\u65e0\u6cd5\u83b7\u53d6\u5f15\u7528 \u89e3\u51b3\u65b9\u6848 \u53f3\u503c\u5f15\u7528 & \u5f15\u7528\u6298\u53e0 template < class ... TArgs > void wrapper ( TArgs && ... vArgs ){ //\u5229\u7528\u7f16\u8bd1\u5668\u5bf9\u5f15\u7528\u7c7b\u578b\u8fdb\u884c\u6b63\u786e\u63a8\u65ad modifyData ( vArgs ...); } void modifyData ( std :: vector < int >& vData , const int & value ){ vData [ 0 ] = value ; } wrapper \u5bfc\u81f4\u7684\u95ee\u9898 void modifyData ( std :: vector < int > vData , const int & value ); void modifyData ( std :: vector < int > vData , int && value ); int main (){ ... wrapper ( t , 888 ); // \u8c03\u7528 const int& value \u7248\u672c ... } \u7ecf\u8fc7\u4e86\u4e00\u5c42 wrapper\uff0c\u53c2\u6570\u5168\u53d8\u4e3a\u5de6\u503c \u89e3\u51b3\u65b9\u6848 std::forward void wrapper ( TArgs && ... vArgs ){ //\u5229\u7528\u7f16\u8bd1\u5668\u5bf9\u5f15\u7528\u7c7b\u578b\u8fdb\u884c\u6b63\u786e\u63a8\u65ad modifyData ( std :: forward < Targs > ( vArgs )...); }","title":"\u5b8c\u7f8e\u8f6c\u53d1"},{"location":"cplusplus/forward/#_1","text":"","title":"\u5b8c\u7f8e\u8f6c\u53d1"},{"location":"cplusplus/forward/#_2","text":"void modifyData ( std :: vector < int >& vData ){ vData [ 0 ] = 100 ; } template < class ... TArgs > void wrapper ( TArgs & ... vArgs ){ modifyData ( vArgs ...); } int main ( int argc , char * argv []){ std :: vector < int > t ; t . push_back ( 10 ); t . push_back ( 3 ); t . push_back ( 12 ); wrapper ( t ); std :: cout << t [ 0 ] << std :: endl ; // out\uff1a100 }","title":"\u53ef\u53d8\u6a21\u677f\u53c2\u6570\u5f15\u7528\u4f20\u9012"},{"location":"cplusplus/forward/#_3","text":"void modifyData ( std :: vector < int >& vData , const int & value ){ vData [ 0 ] = value ; } int main ( int argc , char * argv []){ std :: vector < int > t ; t . push_back ( 10 ); t . push_back ( 3 ); t . push_back ( 12 ); wrapper ( t , 888 ); std :: cout << t [ 0 ] << std :: endl ; // complilation error\uff1a\u65e0\u6cd5\u5c06 int \u8f6c\u6362\u4e3a int& } \u5b57\u9762\u91cf\u4e3a\u53f3\u503c\uff0c\u4e3a\u4e34\u65f6\u5bf9\u8c61\uff0c\u65e0\u6cd5\u83b7\u53d6\u5f15\u7528 \u89e3\u51b3\u65b9\u6848 \u53f3\u503c\u5f15\u7528 & \u5f15\u7528\u6298\u53e0 template < class ... TArgs > void wrapper ( TArgs && ... vArgs ){ //\u5229\u7528\u7f16\u8bd1\u5668\u5bf9\u5f15\u7528\u7c7b\u578b\u8fdb\u884c\u6b63\u786e\u63a8\u65ad modifyData ( vArgs ...); } void modifyData ( std :: vector < int >& vData , const int & value ){ vData [ 0 ] = value ; }","title":"\u5b57\u9762\u503c\u4f20\u9012\u5bfc\u81f4\u7684\u95ee\u9898"},{"location":"cplusplus/forward/#wrapper","text":"void modifyData ( std :: vector < int > vData , const int & value ); void modifyData ( std :: vector < int > vData , int && value ); int main (){ ... wrapper ( t , 888 ); // \u8c03\u7528 const int& value \u7248\u672c ... } \u7ecf\u8fc7\u4e86\u4e00\u5c42 wrapper\uff0c\u53c2\u6570\u5168\u53d8\u4e3a\u5de6\u503c \u89e3\u51b3\u65b9\u6848 std::forward void wrapper ( TArgs && ... vArgs ){ //\u5229\u7528\u7f16\u8bd1\u5668\u5bf9\u5f15\u7528\u7c7b\u578b\u8fdb\u884c\u6b63\u786e\u63a8\u65ad modifyData ( std :: forward < Targs > ( vArgs )...); }","title":"wrapper \u5bfc\u81f4\u7684\u95ee\u9898"},{"location":"cplusplus/inside-the-cpp-object-model/","text":"\u300a\u6df1\u5165\u63a2\u7d22 C++ \u5bf9\u8c61\u6a21\u578b\u300b C++ \u5bf9\u8c61\u6a21\u578b\u6982\u5ff5 \u8bed\u8a00\u4e2d\u76f4\u63a5\u652f\u6301\u9762\u5411\u5bf9\u8c61\u7a0b\u5e8f\u8bbe\u8ba1\u7684\u90e8\u5206 \u5bf9\u4e8e\u5404\u79cd\u652f\u6301\u7684\u5e95\u5c42\u5b9e\u73b0\u673a\u5236 \u5173\u4e8e\u5bf9\u8c61 C \u8bed\u8a00 \u4e0d\u652f\u6301\u201c\u6570\u636e\u201d\u4e0e\u201c\u9488\u5bf9\u6570\u636e\u64cd\u4f5c\u201d\u7684\u5173\u8054 \u7a0b\u5e8f\u6027\u7684\uff08procedural\uff09 C++ \u62bd\u8c61\u6570\u636e\u7c7b\u578b\uff08ADT\uff09 \u53c2\u6570\u5316 \u52a0\u4e0a\u5c01\u88c5\u540e\u7684\u5e03\u5c40\u6210\u672c C++ \u5728\u5e03\u5c40\u53ca\u5b58\u53d6\u65f6\u95f4\u4e0a\u7684\u4e3b\u8981\u5f00\u9500\u662f\u7531 virtual \u5f15\u8d77\u7684 virtual function \u673a\u5236\uff0c\u7528\u4e8e\u652f\u6301\u6267\u884c\u65f6\u7ed1\u5b9a virtual base class\uff0c\u591a\u6b21\u51fa\u73b0\u5728\u7ee7\u627f\u4f53\u7cfb\u4e2d\u7684 base class \u6709\u4e00\u4e2a\u5355\u4e00\u800c\u88ab\u5171\u4eab\u7684\u5b9e\u4f8b \u6b64\u5916\u4e5f\u5305\u62ec derived class \u548c\u975e\u7b2c\u4e00 base class \u4e4b\u95f4\u7684\u8f6c\u6362 1.1 C++ \u5bf9\u8c61\u6a21\u578b C++ \u4e2d\u7684\u7c7b\u5305\u542b\u4ee5\u4e0b\u5185\u5bb9\uff1a class data members static nonstatic class menber functions static nonstatic virtual \u7b80\u5355\u5bf9\u8c61\u6a21\u578b \u6bcf\u4e2a slot \u6307\u5411\u4e00\u4e2a members\uff08data/function\uff09\u3002 \u8868\u683c\u9a71\u52a8\u5bf9\u8c61\u6a21\u578b data member table member function table C++ \u5bf9\u8c61\u6a21\u578b class object \u4e4b\u5916\u5305\u542b\u4ee5\u4e0b\u5185\u5bb9 static data static function non-static function Virtual functions \u7531\u4ee5\u4e0b\u65b9\u5f0f\u652f\u6301 class \u4ea7\u751f\u4e00\u5806\u6307\u5411 virtual functions \u7684\u6307\u9488\uff0c\u7f6e\u5165\u8868\u683c\u4e2d\uff0c\u79f0\u4e3a virtual table\uff08vtbl\uff09 class object \u4e2d\u5b89\u63d2\u4e00\u4e2a\u6307\u5411 virtual table \u7684\u6307\u9488\uff0c\u79f0\u4e3a vptr vptr \u8bbe\u5b9a\u548c\u91cd\u7f6e\u7531\u6bcf\u4e00\u4e2a class \u7684 constructor\u3001destructor\u3001copy assign \u81ea\u52a8\u5b8c\u6210 \u7528\u4ee5\u652f\u6301 RTTI \u7684\uff0c\u4e0e class \u5173\u8054\u7684 type_info object \u4e5f\u7531 virtual table \u6307\u51fa\uff0c\u901a\u5e38\u653e\u5728 vtbl \u7b2c\u4e00\u4e2a slot \u52a0\u4e0a\u7ee7\u627f \u7b80\u5355\u6a21\u578b\uff0cobject \u542b bptr\uff0c\u6307\u5411\u57fa\u7c7b object \u95f4\u63a5\u6027\u5e26\u6765\u5f00\u9500 class object \u5bf9\u7ee7\u627f\u90fd\u6709\u4e00\u81f4\u7684\u8868\u73b0\u65b9\u5f0f\uff0cclass object \u5927\u5c0f\u4e0e base classes \u65e0\u5173 \u65e0\u9700\u6539\u53d8 class object\uff0c\u4fee\u6539 base class table C++ \u6700\u521d\u7ee7\u627f\u6a21\u578b\u4e0d\u91c7\u7528\u4efb\u4f55\u95f4\u63a5\u6027\uff0cbase class subobject \u7684 data members \u76f4\u63a5\u653e\u7f6e\u5728 derived class \u4e2d base class members \u4efb\u4f55\u6539\u53d8\uff0c\u90fd\u9700\u8981\u91cd\u65b0\u7f16\u8bd1 C++ 2.0 Virtual base class\uff0c\u52a0\u5165\u4e86\u95f4\u63a5\u6027\uff0c\u901a\u8fc7\u5bfc\u5165 virtual base class table\uff0c\u6216\u6269\u5145 virtual table \u7684\u65b9\u5f0f \u5bf9\u8c61\u6a21\u578b\u5982\u4f55\u5f71\u54cd\u7a0b\u5e8f \u7a0b\u5e8f\u5728\u5185\u90e8\u8f6c\u6362\u65f6\uff0c\u4f1a\u4fee\u6539\u5df2\u6709\u4ee3\u7801\uff0c\u6216\u52a0\u5165\u65b0\u7684\u4ee3\u7801\u3002 1.2 \u5173\u952e\u8bcd\u6240\u5e26\u6765\u7684\u5dee\u5f02 \u4e0e C \u517c\u5bb9\u5bfc\u81f4 C++ \u7f16\u8bd1\u89e3\u51b3\u65b9\u5f0f\u590d\u6742 \u5173\u952e\u8bcd\u7684\u56f0\u6270 struct \u4ec5\u4ec5\u4e3a\u4e86\u517c\u5bb9 C\uff0c\u4e0e class \u552f\u4e00\u7684\u4e0d\u540c\u5728\u4e8e struct \u6210\u5458\u9ed8\u8ba4\u8bbf\u95ee\u4e3a public\uff0c\u4e8c\u8005\u5728\u7f16\u8bd1\u5c42\u7ea7\u5171\u4eab\u4e00\u5957\u4ee3\u7801\u3002 \u7b56\u7565\u6027\u6b63\u786e\u7684 struct C++ class \u4e2d\u5904\u4e8e\u4e0d\u540c access section \u7684\u6570\u636e\u6392\u5217\u987a\u5e8f\u672a\u5b9a\u4e49 C++ class \u4e2d base class \u4e0e derived class \u5e03\u5c40\u987a\u5e8f\u672a\u5b9a\u4e49 virtual function \u4e5f\u4f1a\u5f71\u54cd\u5e03\u5c40 \u82e5\u9700\u8981\u590d\u6742\u7684 C++ class \u67d0\u90e8\u5206\u6570\u636e \u4f7f\u7528\u7ec4\u5408 conversion \u8fd0\u7b97\u7b26\u91cd\u8f7d struct C_point {}; class Point { public : operator C_point (){ return _c_point ; } private : C_point _c_point ; } 1.3 \u5bf9\u8c61\u7684\u5dee\u5f02 C++ \u7a0b\u5e8f\u8bbe\u8ba1\u6a21\u5f0f\u76f4\u63a5\u652f\u6301\u4e09\u79cd programming paradigms \u7a0b\u5e8f\u6a21\u578b \u62bd\u8c61\u6570\u636e\u7c7b\u578b\u6a21\u578b \u6570\u636e\u548c\u5176\u64cd\u4f5c\u4e00\u8d77\u63d0\u4f9b \u9762\u5411\u5bf9\u8c61\u6a21\u578b \u591a\u6001 \u4e0d\u540c\u8303\u5f0f\u7684\u6df7\u5408\u5bfc\u81f4\u884c\u4e3a\u4e0d\u7a33\u5b9a ADT \u5904\u7406\u5df2\u77e5\u7c7b\u578b\u7684\u5b9e\u4f8b\uff0c\u7f16\u8bd1\u65f6\u671f\u786e\u5b9a OO \u7a0b\u5e8f\u7684\u591a\u6001\uff0c\u9700\u901a\u8fc7 pointer/reference \u95f4\u63a5\u5904\u7406 C++ \u4e2d\u591a\u6001\u4ec5\u5b58\u5728\u4e8e public class \u4f53\u7cfb\u4e2d C++ \u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u652f\u6301\u591a\u6001 \u9690\u5f0f\u8f6c\u5316 virtual function dynamic cast \u53ca typeid \u591a\u6001\u901a\u8fc7\u5171\u540c\u63a5\u53e3\u5f71\u54cd\u7c7b\u578b\u5c01\u88c5\uff0c\u63a5\u53e3\u5b9a\u4e49\u5728 base class \u4e2d \u5171\u4eab\u63a5\u53e3\u7531 virtual function \u673a\u5236\u5b8c\u6210 class object \u5185\u5b58\u9700\u6c42 non static data members \u4e4b\u95f4\u7684 alignment virtual \u4ea7\u751f\u7684 overhead \u6307\u9488\u7684\u7c7b\u578b \u8f6c\u6362\u662f\u7f16\u8bd1\u5668\u6307\u4ee4\uff0c\u53ea\u5f71\u54cd\u201c\u88ab\u6307\u51fa\u5185\u5b58\u7684\u5927\u5c0f\u548c\u5176\u5185\u5bb9\u7684\u89e3\u91ca\u65b9\u5f0f\u201d \u52a0\u4e0a\u591a\u6001\u4e4b\u540e \u7f16\u8bd1\u65f6\u671f\uff0c\u6307\u9488\u7c7b\u578b\u51b3\u5b9a\u4ee5\u4e0b\u4e24\u70b9 \u53ef\u7528\u63a5\u53e3 \u63a5\u53e3\u7684 access level \u6267\u884c\u65f6\u671f\uff0c\u6307\u9488\u6240\u6307\u7684 object \u7c7b\u578b\u5c06\u51b3\u5b9a\u6240\u8c03\u7528\u7684\u5b9e\u4f8b\uff08virtual \u673a\u5236\uff09 \u9762\u5411\u5bf9\u8c61\u7684\u8bbe\u8ba1\u98ce\u683c base class object \u5bf9\u8c61\u76f4\u63a5\u88ab\u521d\u59cb\u5316\u4e3a derived class object \u65f6 \u5f15\u8d77\u5207\u5272 \u7236\u7c7b\u5b9e\u4f8b\u4e0e\u5b50\u7c7b\u65e0\u5173 \u591a\u6001\u5931\u6548 OO \u7a0b\u5e8f\u8bbe\u8ba1 \u591a\u6001\u662f\u4e00\u79cd\u5f3a\u5927\u7684\u8bbe\u8ba1\u673a\u5236\uff0c\u5141\u8bb8\u7ee7\u627f\u62bd\u8c61\u7684 public \u63a5\u53e3\uff0c\u5c01\u88c5\u76f8\u5173\u7684\u7c7b\u578b \u4ed8\u51fa\u7684\u662f\u95f4\u63a5\u6027\uff0c\u5305\u62ec\u5185\u5b58\u7684\u83b7\u5f97/\u7c7b\u578b\u7684\u51b3\u65ad C++ \u901a\u8fc7 pointers/references \u652f\u6301\u591a\u6001 ADT \u7a0b\u5e8f\u98ce\u683c \u5305\u62ec\u6570\u636e\u548c\u7b97\u6cd5 \u4e0d\u652f\u6301\u7c7b\u578b\u7684\u6269\u5145 OO & ADT \u6bd4\u8f83 ADT \u901f\u5ea6\u5feb\uff0c\u7a7a\u95f4\u7d27\u51d1\uff08\u901f\u5ea6\u5feb\u7531\u4e8e\u51fd\u6570\u8c03\u7528\u7f16\u8bd1\u671f\u89e3\u6790\uff0c\u7a7a\u95f4\u7d27\u51d1\u7531\u4e8e\u4e0d\u9700\u8981\u8d1f\u62c5 virtual \u673a\u5236\u5e26\u6765\u7684\u989d\u5916\u5f00\u9500 OO \u8bbe\u8ba1\u6269\u5c55\u6027\u597d \u6784\u9020\u51fd\u6570\u8bed\u4e49\u5b66","title":"\u300a\u6df1\u5165\u63a2\u7d22 C++ \u5bf9\u8c61\u6a21\u578b\u300b"},{"location":"cplusplus/inside-the-cpp-object-model/#c","text":"C++ \u5bf9\u8c61\u6a21\u578b\u6982\u5ff5 \u8bed\u8a00\u4e2d\u76f4\u63a5\u652f\u6301\u9762\u5411\u5bf9\u8c61\u7a0b\u5e8f\u8bbe\u8ba1\u7684\u90e8\u5206 \u5bf9\u4e8e\u5404\u79cd\u652f\u6301\u7684\u5e95\u5c42\u5b9e\u73b0\u673a\u5236","title":"\u300a\u6df1\u5165\u63a2\u7d22 C++ \u5bf9\u8c61\u6a21\u578b\u300b"},{"location":"cplusplus/inside-the-cpp-object-model/#_1","text":"C \u8bed\u8a00 \u4e0d\u652f\u6301\u201c\u6570\u636e\u201d\u4e0e\u201c\u9488\u5bf9\u6570\u636e\u64cd\u4f5c\u201d\u7684\u5173\u8054 \u7a0b\u5e8f\u6027\u7684\uff08procedural\uff09 C++ \u62bd\u8c61\u6570\u636e\u7c7b\u578b\uff08ADT\uff09 \u53c2\u6570\u5316","title":"\u5173\u4e8e\u5bf9\u8c61"},{"location":"cplusplus/inside-the-cpp-object-model/#_2","text":"C++ \u5728\u5e03\u5c40\u53ca\u5b58\u53d6\u65f6\u95f4\u4e0a\u7684\u4e3b\u8981\u5f00\u9500\u662f\u7531 virtual \u5f15\u8d77\u7684 virtual function \u673a\u5236\uff0c\u7528\u4e8e\u652f\u6301\u6267\u884c\u65f6\u7ed1\u5b9a virtual base class\uff0c\u591a\u6b21\u51fa\u73b0\u5728\u7ee7\u627f\u4f53\u7cfb\u4e2d\u7684 base class \u6709\u4e00\u4e2a\u5355\u4e00\u800c\u88ab\u5171\u4eab\u7684\u5b9e\u4f8b \u6b64\u5916\u4e5f\u5305\u62ec derived class \u548c\u975e\u7b2c\u4e00 base class \u4e4b\u95f4\u7684\u8f6c\u6362","title":"\u52a0\u4e0a\u5c01\u88c5\u540e\u7684\u5e03\u5c40\u6210\u672c"},{"location":"cplusplus/inside-the-cpp-object-model/#11-c","text":"C++ \u4e2d\u7684\u7c7b\u5305\u542b\u4ee5\u4e0b\u5185\u5bb9\uff1a class data members static nonstatic class menber functions static nonstatic virtual","title":"1.1 C++ \u5bf9\u8c61\u6a21\u578b"},{"location":"cplusplus/inside-the-cpp-object-model/#_3","text":"\u6bcf\u4e2a slot \u6307\u5411\u4e00\u4e2a members\uff08data/function\uff09\u3002","title":"\u7b80\u5355\u5bf9\u8c61\u6a21\u578b"},{"location":"cplusplus/inside-the-cpp-object-model/#_4","text":"data member table member function table","title":"\u8868\u683c\u9a71\u52a8\u5bf9\u8c61\u6a21\u578b"},{"location":"cplusplus/inside-the-cpp-object-model/#c_1","text":"class object \u4e4b\u5916\u5305\u542b\u4ee5\u4e0b\u5185\u5bb9 static data static function non-static function Virtual functions \u7531\u4ee5\u4e0b\u65b9\u5f0f\u652f\u6301 class \u4ea7\u751f\u4e00\u5806\u6307\u5411 virtual functions \u7684\u6307\u9488\uff0c\u7f6e\u5165\u8868\u683c\u4e2d\uff0c\u79f0\u4e3a virtual table\uff08vtbl\uff09 class object \u4e2d\u5b89\u63d2\u4e00\u4e2a\u6307\u5411 virtual table \u7684\u6307\u9488\uff0c\u79f0\u4e3a vptr vptr \u8bbe\u5b9a\u548c\u91cd\u7f6e\u7531\u6bcf\u4e00\u4e2a class \u7684 constructor\u3001destructor\u3001copy assign \u81ea\u52a8\u5b8c\u6210 \u7528\u4ee5\u652f\u6301 RTTI \u7684\uff0c\u4e0e class \u5173\u8054\u7684 type_info object \u4e5f\u7531 virtual table \u6307\u51fa\uff0c\u901a\u5e38\u653e\u5728 vtbl \u7b2c\u4e00\u4e2a slot","title":"C++ \u5bf9\u8c61\u6a21\u578b"},{"location":"cplusplus/inside-the-cpp-object-model/#_5","text":"\u7b80\u5355\u6a21\u578b\uff0cobject \u542b bptr\uff0c\u6307\u5411\u57fa\u7c7b object \u95f4\u63a5\u6027\u5e26\u6765\u5f00\u9500 class object \u5bf9\u7ee7\u627f\u90fd\u6709\u4e00\u81f4\u7684\u8868\u73b0\u65b9\u5f0f\uff0cclass object \u5927\u5c0f\u4e0e base classes \u65e0\u5173 \u65e0\u9700\u6539\u53d8 class object\uff0c\u4fee\u6539 base class table C++ \u6700\u521d\u7ee7\u627f\u6a21\u578b\u4e0d\u91c7\u7528\u4efb\u4f55\u95f4\u63a5\u6027\uff0cbase class subobject \u7684 data members \u76f4\u63a5\u653e\u7f6e\u5728 derived class \u4e2d base class members \u4efb\u4f55\u6539\u53d8\uff0c\u90fd\u9700\u8981\u91cd\u65b0\u7f16\u8bd1 C++ 2.0 Virtual base class\uff0c\u52a0\u5165\u4e86\u95f4\u63a5\u6027\uff0c\u901a\u8fc7\u5bfc\u5165 virtual base class table\uff0c\u6216\u6269\u5145 virtual table \u7684\u65b9\u5f0f","title":"\u52a0\u4e0a\u7ee7\u627f"},{"location":"cplusplus/inside-the-cpp-object-model/#_6","text":"\u7a0b\u5e8f\u5728\u5185\u90e8\u8f6c\u6362\u65f6\uff0c\u4f1a\u4fee\u6539\u5df2\u6709\u4ee3\u7801\uff0c\u6216\u52a0\u5165\u65b0\u7684\u4ee3\u7801\u3002","title":"\u5bf9\u8c61\u6a21\u578b\u5982\u4f55\u5f71\u54cd\u7a0b\u5e8f"},{"location":"cplusplus/inside-the-cpp-object-model/#12","text":"\u4e0e C \u517c\u5bb9\u5bfc\u81f4 C++ \u7f16\u8bd1\u89e3\u51b3\u65b9\u5f0f\u590d\u6742","title":"1.2 \u5173\u952e\u8bcd\u6240\u5e26\u6765\u7684\u5dee\u5f02"},{"location":"cplusplus/inside-the-cpp-object-model/#_7","text":"struct \u4ec5\u4ec5\u4e3a\u4e86\u517c\u5bb9 C\uff0c\u4e0e class \u552f\u4e00\u7684\u4e0d\u540c\u5728\u4e8e struct \u6210\u5458\u9ed8\u8ba4\u8bbf\u95ee\u4e3a public\uff0c\u4e8c\u8005\u5728\u7f16\u8bd1\u5c42\u7ea7\u5171\u4eab\u4e00\u5957\u4ee3\u7801\u3002","title":"\u5173\u952e\u8bcd\u7684\u56f0\u6270"},{"location":"cplusplus/inside-the-cpp-object-model/#struct","text":"C++ class \u4e2d\u5904\u4e8e\u4e0d\u540c access section \u7684\u6570\u636e\u6392\u5217\u987a\u5e8f\u672a\u5b9a\u4e49 C++ class \u4e2d base class \u4e0e derived class \u5e03\u5c40\u987a\u5e8f\u672a\u5b9a\u4e49 virtual function \u4e5f\u4f1a\u5f71\u54cd\u5e03\u5c40 \u82e5\u9700\u8981\u590d\u6742\u7684 C++ class \u67d0\u90e8\u5206\u6570\u636e \u4f7f\u7528\u7ec4\u5408 conversion \u8fd0\u7b97\u7b26\u91cd\u8f7d struct C_point {}; class Point { public : operator C_point (){ return _c_point ; } private : C_point _c_point ; }","title":"\u7b56\u7565\u6027\u6b63\u786e\u7684 struct"},{"location":"cplusplus/inside-the-cpp-object-model/#13","text":"C++ \u7a0b\u5e8f\u8bbe\u8ba1\u6a21\u5f0f\u76f4\u63a5\u652f\u6301\u4e09\u79cd programming paradigms \u7a0b\u5e8f\u6a21\u578b \u62bd\u8c61\u6570\u636e\u7c7b\u578b\u6a21\u578b \u6570\u636e\u548c\u5176\u64cd\u4f5c\u4e00\u8d77\u63d0\u4f9b \u9762\u5411\u5bf9\u8c61\u6a21\u578b \u591a\u6001 \u4e0d\u540c\u8303\u5f0f\u7684\u6df7\u5408\u5bfc\u81f4\u884c\u4e3a\u4e0d\u7a33\u5b9a ADT \u5904\u7406\u5df2\u77e5\u7c7b\u578b\u7684\u5b9e\u4f8b\uff0c\u7f16\u8bd1\u65f6\u671f\u786e\u5b9a OO \u7a0b\u5e8f\u7684\u591a\u6001\uff0c\u9700\u901a\u8fc7 pointer/reference \u95f4\u63a5\u5904\u7406 C++ \u4e2d\u591a\u6001\u4ec5\u5b58\u5728\u4e8e public class \u4f53\u7cfb\u4e2d C++ \u901a\u8fc7\u4ee5\u4e0b\u65b9\u5f0f\u652f\u6301\u591a\u6001 \u9690\u5f0f\u8f6c\u5316 virtual function dynamic cast \u53ca typeid \u591a\u6001\u901a\u8fc7\u5171\u540c\u63a5\u53e3\u5f71\u54cd\u7c7b\u578b\u5c01\u88c5\uff0c\u63a5\u53e3\u5b9a\u4e49\u5728 base class \u4e2d \u5171\u4eab\u63a5\u53e3\u7531 virtual function \u673a\u5236\u5b8c\u6210 class object \u5185\u5b58\u9700\u6c42 non static data members \u4e4b\u95f4\u7684 alignment virtual \u4ea7\u751f\u7684 overhead","title":"1.3 \u5bf9\u8c61\u7684\u5dee\u5f02"},{"location":"cplusplus/inside-the-cpp-object-model/#_8","text":"\u8f6c\u6362\u662f\u7f16\u8bd1\u5668\u6307\u4ee4\uff0c\u53ea\u5f71\u54cd\u201c\u88ab\u6307\u51fa\u5185\u5b58\u7684\u5927\u5c0f\u548c\u5176\u5185\u5bb9\u7684\u89e3\u91ca\u65b9\u5f0f\u201d","title":"\u6307\u9488\u7684\u7c7b\u578b"},{"location":"cplusplus/inside-the-cpp-object-model/#_9","text":"\u7f16\u8bd1\u65f6\u671f\uff0c\u6307\u9488\u7c7b\u578b\u51b3\u5b9a\u4ee5\u4e0b\u4e24\u70b9 \u53ef\u7528\u63a5\u53e3 \u63a5\u53e3\u7684 access level \u6267\u884c\u65f6\u671f\uff0c\u6307\u9488\u6240\u6307\u7684 object \u7c7b\u578b\u5c06\u51b3\u5b9a\u6240\u8c03\u7528\u7684\u5b9e\u4f8b\uff08virtual \u673a\u5236\uff09","title":"\u52a0\u4e0a\u591a\u6001\u4e4b\u540e"},{"location":"cplusplus/inside-the-cpp-object-model/#_10","text":"base class object \u5bf9\u8c61\u76f4\u63a5\u88ab\u521d\u59cb\u5316\u4e3a derived class object \u65f6 \u5f15\u8d77\u5207\u5272 \u7236\u7c7b\u5b9e\u4f8b\u4e0e\u5b50\u7c7b\u65e0\u5173 \u591a\u6001\u5931\u6548 OO \u7a0b\u5e8f\u8bbe\u8ba1 \u591a\u6001\u662f\u4e00\u79cd\u5f3a\u5927\u7684\u8bbe\u8ba1\u673a\u5236\uff0c\u5141\u8bb8\u7ee7\u627f\u62bd\u8c61\u7684 public \u63a5\u53e3\uff0c\u5c01\u88c5\u76f8\u5173\u7684\u7c7b\u578b \u4ed8\u51fa\u7684\u662f\u95f4\u63a5\u6027\uff0c\u5305\u62ec\u5185\u5b58\u7684\u83b7\u5f97/\u7c7b\u578b\u7684\u51b3\u65ad C++ \u901a\u8fc7 pointers/references \u652f\u6301\u591a\u6001 ADT \u7a0b\u5e8f\u98ce\u683c \u5305\u62ec\u6570\u636e\u548c\u7b97\u6cd5 \u4e0d\u652f\u6301\u7c7b\u578b\u7684\u6269\u5145 OO & ADT \u6bd4\u8f83 ADT \u901f\u5ea6\u5feb\uff0c\u7a7a\u95f4\u7d27\u51d1\uff08\u901f\u5ea6\u5feb\u7531\u4e8e\u51fd\u6570\u8c03\u7528\u7f16\u8bd1\u671f\u89e3\u6790\uff0c\u7a7a\u95f4\u7d27\u51d1\u7531\u4e8e\u4e0d\u9700\u8981\u8d1f\u62c5 virtual \u673a\u5236\u5e26\u6765\u7684\u989d\u5916\u5f00\u9500 OO \u8bbe\u8ba1\u6269\u5c55\u6027\u597d","title":"\u9762\u5411\u5bf9\u8c61\u7684\u8bbe\u8ba1\u98ce\u683c"},{"location":"cplusplus/inside-the-cpp-object-model/#_11","text":"","title":"\u6784\u9020\u51fd\u6570\u8bed\u4e49\u5b66"},{"location":"cplusplus/move-semantics/","text":"\u79fb\u52a8\u8bed\u4e49 void addData ( int vNumData , std :: vector < std :: vector < int >>& voOutput ){ std :: vector < int > T ; T . reserve ( vNumData ); for ( int i = 0 ; i < vNumData ; i ++ ){ T . push_back ( 100 ); } voOutput . push_back ( T ); // \u8017\u65f6\u64cd\u4f5c } int main (){ std :: vector < std :: vector < int >> Data ; for ( int i = 0 ; i < 10000 ; i ++ ){ addData ( 10000 , Data ); } } voOutput.push_back(T) \u8017\u65f6\u64cd\u4f5c \u89e3\u51b3\u65b9\u6848 \u5b9e\u73b0\u79fb\u52a8\u6784\u9020\u51fd\u6570 \u4f7f\u7528 std::move \u4f20\u9012\u53c2\u6570\uff0cvoOutput.push_back(std::move(T));","title":"\u79fb\u52a8\u8bed\u4e49"},{"location":"cplusplus/move-semantics/#_1","text":"void addData ( int vNumData , std :: vector < std :: vector < int >>& voOutput ){ std :: vector < int > T ; T . reserve ( vNumData ); for ( int i = 0 ; i < vNumData ; i ++ ){ T . push_back ( 100 ); } voOutput . push_back ( T ); // \u8017\u65f6\u64cd\u4f5c } int main (){ std :: vector < std :: vector < int >> Data ; for ( int i = 0 ; i < 10000 ; i ++ ){ addData ( 10000 , Data ); } } voOutput.push_back(T) \u8017\u65f6\u64cd\u4f5c \u89e3\u51b3\u65b9\u6848 \u5b9e\u73b0\u79fb\u52a8\u6784\u9020\u51fd\u6570 \u4f7f\u7528 std::move \u4f20\u9012\u53c2\u6570\uff0cvoOutput.push_back(std::move(T));","title":"\u79fb\u52a8\u8bed\u4e49"},{"location":"cplusplus/stl/","text":"\u300aSTL \u6e90\u7801\u5256\u6790\u300b map map \u7279\u5f81 key \u952e\u503c\uff0cvalue \u5b9e\u503c map \u6240\u6709\u5143\u7d20\u90fd\u662f key-value pair \u5143\u7d20\u6839\u636e\u952e\u503c\u6392\u5e8f \u4efb\u610f\u4e24\u4e2a\u5143\u7d20\u952e\u503c\u4e0d\u540c \u901a\u8fc7\u8fed\u4ee3\u5668\u4fee\u6539 \u65e0\u6cd5\u4fee\u6539 key \u53ef\u4ee5\u4fee\u6539 value \u65e2\u4e0d\u662f constant iterators\uff0c\u4e5f\u4e0d\u662f mutable iterators \u6570\u636e\u7ed3\u6784 RB-tree \u7ea2\u9ed1\u6811 \u6240\u6709 map \u7684\u884c\u4e3a\uff0c\u53ea\u662f RB-tree \u64cd\u4f5c\u7684\u5c01\u88c5","title":"\u300aSTL \u6e90\u7801\u5256\u6790\u300b"},{"location":"cplusplus/stl/#stl","text":"","title":"\u300aSTL \u6e90\u7801\u5256\u6790\u300b"},{"location":"cplusplus/stl/#map","text":"map \u7279\u5f81 key \u952e\u503c\uff0cvalue \u5b9e\u503c map \u6240\u6709\u5143\u7d20\u90fd\u662f key-value pair \u5143\u7d20\u6839\u636e\u952e\u503c\u6392\u5e8f \u4efb\u610f\u4e24\u4e2a\u5143\u7d20\u952e\u503c\u4e0d\u540c \u901a\u8fc7\u8fed\u4ee3\u5668\u4fee\u6539 \u65e0\u6cd5\u4fee\u6539 key \u53ef\u4ee5\u4fee\u6539 value \u65e2\u4e0d\u662f constant iterators\uff0c\u4e5f\u4e0d\u662f mutable iterators \u6570\u636e\u7ed3\u6784 RB-tree \u7ea2\u9ed1\u6811 \u6240\u6709 map \u7684\u884c\u4e3a\uff0c\u53ea\u662f RB-tree \u64cd\u4f5c\u7684\u5c01\u88c5","title":"map"},{"location":"deep-learning/","text":"\u6df1\u5ea6\u5b66\u4e60 | \u76ee\u5f55","title":"\u6df1\u5ea6\u5b66\u4e60 | \u76ee\u5f55"},{"location":"deep-learning/#_1","text":"","title":"\u6df1\u5ea6\u5b66\u4e60 | \u76ee\u5f55"},{"location":"deep-learning/recurrent/","text":"\u5e8f\u5217\u5efa\u6a21\uff1a\u5faa\u73af\u548c\u9012\u5f52\u795e\u7ecf\u7f51\u7edc \u6a21\u578b\u7684\u4e0d\u540c\u90e8\u5206\u5171\u4eab\u53c2\u6570\uff0c\u53c2\u6570\u5171\u4eab\u4f7f\u5f97\u6a21\u578b\u80fd\u591f\u6269\u5c55\u5230\u53ef\u53d8\u957f\u5e8f\u5217 10.1 \u5c55\u5f00\u8ba1\u7b97\u56fe 10.2 \u5faa\u73af\u795e\u7ecf\u7f51\u7edc \u8bbe\u8ba1\u6a21\u5f0f \u6bcf\u4e2a\u65f6\u95f4\u6b65\u90fd\u6709\u8f93\u51fa\uff0c\u9690\u85cf\u5355\u5143\u4e4b\u95f4\u6709\u5faa\u73af\u8fde\u63a5\u7684\u5faa\u73af\u7f51\u7edc \u6bcf\u4e2a\u65f6\u95f4\u6b65\u90fd\u4ea7\u751f\u4e00\u4e2a\u8f93\u51fa\uff0c\u53ea\u6709\u5f53\u524d\u65f6\u523b\u7684\u8f93\u51fa\u5230\u4e0b\u4e00\u65f6\u523b\u9690\u85cf\u5355\u5143\u95f4\u6709\u5faa\u73af\u8fde\u63a5\u7684\u5faa\u73af\u7f51\u7edc \u9690\u85cf\u5355\u5143\u4e4b\u95f4\u5b58\u5728\u5faa\u73af\u8fde\u63a5\uff0c\u4f46\u8bfb\u53d6\u6574\u4e2a\u5e8f\u5217\u540e\u4ea7\u751f\u5355\u4e2a\u8f93\u51fa\u7684\u5faa\u73af\u7f51\u7edc","title":"\u5e8f\u5217\u5efa\u6a21\uff1a\u5faa\u73af\u548c\u9012\u5f52\u795e\u7ecf\u7f51\u7edc"},{"location":"deep-learning/recurrent/#_1","text":"\u6a21\u578b\u7684\u4e0d\u540c\u90e8\u5206\u5171\u4eab\u53c2\u6570\uff0c\u53c2\u6570\u5171\u4eab\u4f7f\u5f97\u6a21\u578b\u80fd\u591f\u6269\u5c55\u5230\u53ef\u53d8\u957f\u5e8f\u5217","title":"\u5e8f\u5217\u5efa\u6a21\uff1a\u5faa\u73af\u548c\u9012\u5f52\u795e\u7ecf\u7f51\u7edc"},{"location":"deep-learning/recurrent/#101","text":"","title":"10.1 \u5c55\u5f00\u8ba1\u7b97\u56fe"},{"location":"deep-learning/recurrent/#102","text":"\u8bbe\u8ba1\u6a21\u5f0f \u6bcf\u4e2a\u65f6\u95f4\u6b65\u90fd\u6709\u8f93\u51fa\uff0c\u9690\u85cf\u5355\u5143\u4e4b\u95f4\u6709\u5faa\u73af\u8fde\u63a5\u7684\u5faa\u73af\u7f51\u7edc \u6bcf\u4e2a\u65f6\u95f4\u6b65\u90fd\u4ea7\u751f\u4e00\u4e2a\u8f93\u51fa\uff0c\u53ea\u6709\u5f53\u524d\u65f6\u523b\u7684\u8f93\u51fa\u5230\u4e0b\u4e00\u65f6\u523b\u9690\u85cf\u5355\u5143\u95f4\u6709\u5faa\u73af\u8fde\u63a5\u7684\u5faa\u73af\u7f51\u7edc \u9690\u85cf\u5355\u5143\u4e4b\u95f4\u5b58\u5728\u5faa\u73af\u8fde\u63a5\uff0c\u4f46\u8bfb\u53d6\u6574\u4e2a\u5e8f\u5217\u540e\u4ea7\u751f\u5355\u4e2a\u8f93\u51fa\u7684\u5faa\u73af\u7f51\u7edc","title":"10.2 \u5faa\u73af\u795e\u7ecf\u7f51\u7edc"},{"location":"deep-learning/u-net/","text":"U-net autoencoder Autoencoder: Downsampling and Upsampling \u4e0b\u91c7\u6837 \u4e0a\u91c7\u6837 Wojna Z, Ferrari V, Guadarrama S, et al. The devil is in the decoder[J]. arXiv preprint arXiv:1707.05847, 2017. Deep shading \u4e2d\u91c7\u7528 bilinear \u4e0a\u91c7\u6837 - Nalbach O, Arabadzhiyska E, Mehta D, et al. Deep shading: convolutional neural networks for screen space shading[C]//Computer graphics forum. 2017, 36(4): 65-78. Skip Connection - Isola P, Zhu J Y, Zhou T, et al. Image-to-image translation with conditional adversarial networks[C]//Proceedings of the IEEE conference on computer vision and pattern recognition. 2017: 1125-1134. Lu J, Tong K. Visualized Insights into the Optimization Landscape of Fully Convolutional Networks[J]. arXiv preprint arXiv:1901.08556, 2019. Deep Shading Deep Shading RED Mao X J, Shen C, Yang Y B. Image restoration using convolutional auto-encoders with symmetric skip connections[J]. arXiv preprint arXiv:1606.08921, 2016. \u6570\u636e\u91cf pix2pix/datasets - cityscapes.tar.gz ~3k pairs 256x256","title":"U-net"},{"location":"deep-learning/u-net/#u-net","text":"","title":"U-net"},{"location":"deep-learning/u-net/#autoencoder","text":"Autoencoder: Downsampling and Upsampling","title":"autoencoder"},{"location":"deep-learning/u-net/#_1","text":"","title":"\u4e0b\u91c7\u6837"},{"location":"deep-learning/u-net/#_2","text":"Wojna Z, Ferrari V, Guadarrama S, et al. The devil is in the decoder[J]. arXiv preprint arXiv:1707.05847, 2017. Deep shading \u4e2d\u91c7\u7528 bilinear \u4e0a\u91c7\u6837 - Nalbach O, Arabadzhiyska E, Mehta D, et al. Deep shading: convolutional neural networks for screen space shading[C]//Computer graphics forum. 2017, 36(4): 65-78.","title":"\u4e0a\u91c7\u6837"},{"location":"deep-learning/u-net/#skip-connection","text":"- Isola P, Zhu J Y, Zhou T, et al. Image-to-image translation with conditional adversarial networks[C]//Proceedings of the IEEE conference on computer vision and pattern recognition. 2017: 1125-1134. Lu J, Tong K. Visualized Insights into the Optimization Landscape of Fully Convolutional Networks[J]. arXiv preprint arXiv:1901.08556, 2019.","title":"Skip Connection"},{"location":"deep-learning/u-net/#deep-shading","text":"Deep Shading","title":"Deep Shading"},{"location":"deep-learning/u-net/#red","text":"Mao X J, Shen C, Yang Y B. Image restoration using convolutional auto-encoders with symmetric skip connections[J]. arXiv preprint arXiv:1606.08921, 2016.","title":"RED"},{"location":"deep-learning/u-net/#_3","text":"pix2pix/datasets - cityscapes.tar.gz ~3k pairs 256x256","title":"\u6570\u636e\u91cf"},{"location":"directx/architect/","text":"DirectML \u5de5\u4f5c\u6d41 \u521d\u59cb\u5316 \u521d\u59cb\u5316 Direct3D 12 \u8d44\u6e90 Direct3D 12 device command queue command list descriptor heaps. \u521d\u59cb\u5316 DirectML \u8d44\u6e90 DirectML device Operator instances \u521d\u59cb\u5316 DirectML Operator Operator Initialization \u8f7d\u5165\u6743\u91cd\u8d44\u6e90\uff0c\u7ed1\u5b9a\u5230 initializer \u7684 outputs\uff0c\u7ed1\u5b9a\u5230 compiled \u7684 persistent \u8d44\u6e90 Close and execute your command list. \u6267\u884c \u7ed1\u5b9a Input/ Output Next, you need to bind those Direct3D 12 resources as your input and output tensors. Record into your command list the binding and the execution of your operators. \u6267\u884c DirectML Operator Close and execute your command list.","title":"DirectML \u5de5\u4f5c\u6d41"},{"location":"directx/architect/#directml","text":"","title":"DirectML \u5de5\u4f5c\u6d41"},{"location":"directx/architect/#_1","text":"","title":"\u521d\u59cb\u5316"},{"location":"directx/architect/#direct3d-12","text":"Direct3D 12 device command queue command list descriptor heaps.","title":"\u521d\u59cb\u5316 Direct3D 12 \u8d44\u6e90"},{"location":"directx/architect/#directml_1","text":"DirectML device Operator instances","title":"\u521d\u59cb\u5316 DirectML \u8d44\u6e90"},{"location":"directx/architect/#directml-operator","text":"Operator Initialization \u8f7d\u5165\u6743\u91cd\u8d44\u6e90\uff0c\u7ed1\u5b9a\u5230 initializer \u7684 outputs\uff0c\u7ed1\u5b9a\u5230 compiled \u7684 persistent \u8d44\u6e90 Close and execute your command list.","title":"\u521d\u59cb\u5316 DirectML Operator"},{"location":"directx/architect/#_2","text":"","title":"\u6267\u884c"},{"location":"directx/architect/#input-output","text":"Next, you need to bind those Direct3D 12 resources as your input and output tensors. Record into your command list the binding and the execution of your operators.","title":"\u7ed1\u5b9a Input/ Output"},{"location":"directx/architect/#directml-operator_1","text":"Close and execute your command list.","title":"\u6267\u884c DirectML Operator"},{"location":"directx/binding/","text":"DirectML \u4e2d\u7684\u8d44\u6e90\u7ed1\u5b9a 1 \u5c06\u8d44\u6e90\u7ed1\u5b9a\u5230 pipeline \u4e0a\uff0cDirectML \u8d44\u6e90\u5305\u542b\u4e0b\u9762\u51e0\u79cd Input Output Temporary Persistent \u672c\u6587\u5305\u542b\u7ed1\u5b9a\u7684\u6982\u5ff5\u53ca\u5b9e\u73b0\u7ec6\u8282 \u91cd\u8981\u6982\u5ff5 \u6267\u884c dispatchable\uff08operator initializer/ compiled operator\uff09\uff0c\u9700\u4f9d\u7167\u4ee5\u4e0b\u6b65\u9aa4\u8fdb\u884c\u3002 IDMLDispatchable::GetBindingProperties \u83b7\u53d6\u5f53\u524d dispatchable \u6240\u9700\u7684 descriptors \u6570\u91cf\uff0ctemporary/persistent \u8d44\u6e90 \u521b\u5efa\u8db3\u591f\u5bb9\u7eb3 descriptors \u7684 Direct3D 12 descriptor heap\uff0c\u7ed1\u5b9a\u5230 pipeline IDMLDevice::CreateBindingTable \u521b\u5efa DirectML \u7684 binding table\uff0c\u8868\u793a pipeline \u4e0a\u7684\u8d44\u6e90\u3002\u4f7f\u7528 DML_BINDING_TABLE_DESC \u7ed3\u6784\u6765\u63cf\u8ff0 binding table\u3002 \u521b\u5efa Direct3D 12 buffer \u683c\u5f0f\u7684 temporal/persistent \u8d44\u6e90\uff0c \u7528 DML_BUFFER_BINDING \u548c DML_BINDING_DESC \u63cf\u8ff0\uff0c\u6dfb\u52a0\u5230 binding table \u5f53 dispatchable \u4e3a compiled operator \u65f6\uff0c\u521b\u5efa Direct3D 12 buffer \u8d44\u6e90\uff0c\u6dfb\u52a0\u5230 binding table \u5c06 binding table \u4f5c\u4e3a\u53c2\u6570\u4f20\u5165 IDMLCommandRecorder::RecordDispatch \u83b7\u53d6 Binding Properties Note \u76f8\u540c\u7684 operator \u53ef\u80fd\u4f1a\u6709\u4e0d\u540c\u7684 binding properties DML_BINDING_PROPERTIES \u7ed3\u6784\u5b9a\u4e49\u4e86 dispatchable \u7ed1\u5b9a\u8d44\u6e90\u76f8\u5173\u6570\u636e\uff0c\u4e0b\u9762\u662f\u7ed3\u6784\u7684\u5b8c\u6574\u5b9a\u4e49 struct DML_BINDING_PROPERTIES { UINT RequiredDescriptorCount ; UINT64 TemporaryResourceSize ; UINT64 PersistentResourceSize ; }; \u4f7f\u7528 IDMLDispatchable::GetBindingProperties \u83b7\u53d6\u6570\u636e winrt :: com_ptr <:: IDMLCompiledOperator > dmlCompiledOperator ; // Code to create and compile a DirectML operator goes here. DML_BINDING_PROPERTIES executeDmlBindingProperties { dmlCompiledOperator -> GetBindingProperties () }; winrt :: com_ptr <:: IDMLOperatorInitializer > dmlOperatorInitializer ; // Code to create a DirectML operator initializer goes here. DML_BINDING_PROPERTIES initializeDmlBindingProperties { dmlOperatorInitializer -> GetBindingProperties () }; UINT descriptorCount = ... RequiredDescriptorCount\uff1aDescriptor Heap size TemporaryResourceSize PersistentResourceSize \u521b\u5efa Descriptor Heap DirectML \u5728 Heap \u4e0a\u521b\u5efa\u3001\u7ba1\u7406 Descriptors\u3002 D3D12_DESCRIPTOR_HEAP_DESC \u7ed3\u6784\u63cf\u8ff0 Heap ID3D12Device::CreateDescriptorHeap \u521b\u5efa Heap\u3002 ID3D12GraphicsCommandList::SetDescriptorHeaps \u5c06 Heap \u7ed1\u5b9a\u5230 pipeline\u3002 typedef struct D3D12_DESCRIPTOR_HEAP_DESC { D3D12_DESCRIPTOR_HEAP_TYPE Type ; UINT NumDescriptors ; D3D12_DESCRIPTOR_HEAP_FLAGS Flags ; UINT NodeMask ; } D3D12_DESCRIPTOR_HEAP_DESC ; winrt :: com_ptr <:: ID3D12DescriptorHeap > d3D12DescriptorHeap ; D3D12_DESCRIPTOR_HEAP_DESC descriptorHeapDescription {}; descriptorHeapDescription . Type = D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV ; descriptorHeapDescription . NumDescriptors = descriptorCount ; descriptorHeapDescription . Flags = D3D12_DESCRIPTOR_HEAP_FLAG_SHADER_VISIBLE ; winrt :: check_hresult ( d3D12Device -> CreateDescriptorHeap ( & descriptorHeapDescription , _uuidof ( d3D12DescriptorHeap ), d3D12DescriptorHeap . put_void () ) ); std :: array < ID3D12DescriptorHeap * , 1 > d3D12DescriptorHeaps { d3D12DescriptorHeap . get () }; d3D12GraphicsCommandList -> SetDescriptorHeaps ( static_cast < UINT > ( d3D12DescriptorHeaps . size ()), d3D12DescriptorHeaps . data () ); \u521b\u5efa Binding Table Binding Table \u7528\u4e8e\u8868\u793a dispatchable \u7684\u8d44\u6e90\u3002Binding table \u6307\u5411 heap \u4e0a\u7684\u4e00\u5757\u533a\u57df\uff08DirectML \u5c06\u4f1a\u5728 heap \u8fd9\u5757\u533a\u57df\u4e2d\u5199\u5165 descriptors Input Output Temporary Persistent DML_BINDING_TABLE_DESC \u7528\u4e8e\u63cf\u8ff0 binding table struct DML_BINDING_TABLE_DESC { IDMLDispatchable * Dispatchable ; D3D12_CPU_DESCRIPTOR_HANDLE CPUDescriptorHandle ; D3D12_GPU_DESCRIPTOR_HANDLE GPUDescriptorHandle ; UINT SizeInDescriptors ; }; IDMLDevice::CreateBindingTable \u65b9\u6cd5\u521b\u5efa DirectML binding table\u3002\u4e4b\u540e\u6211\u4eec\u5c06\u521b\u5efa\u8d44\u6e90\uff0c\u5e76\u5c06\u8fd9\u4e9b\u8d44\u6e90\u6dfb\u52a0\u5230 binding table\u3002 DML_BINDING_TABLE_DESC dmlBindingTableDesc {}; dmlBindingTableDesc . Dispatchable = dmlOperatorInitializer . get (); dmlBindingTableDesc . CPUDescriptorHandle = d3D12DescriptorHeap -> GetCPUDescriptorHandleForHeapStart (); dmlBindingTableDesc . GPUDescriptorHandle = d3D12DescriptorHeap -> GetGPUDescriptorHandleForHeapStart (); dmlBindingTableDesc . SizeInDescriptors = descriptorCount ; winrt :: com_ptr <:: IDMLBindingTable > dmlBindingTable ; winrt :: check_hresult ( dmlDevice -> CreateBindingTable ( & dmlBindingTableDesc , __uuidof ( dmlBindingTable ), dmlBindingTable . put_void () ) ); DirectML \u5c06 Descriptor \u5199\u5165 Heap \u7684\u987a\u5e8f\u672a\u5b9a\u4e49\uff0c\u6ce8\u610f\u4e0d\u8981\u8986\u5199 binding table \u4e2d\u7684 descriptor \u4ee3\u7801\u4e2d\u6ce8\u610f\u5728\u6267\u884cbinding table \u524d\uff0c\u4fdd\u8bc1 CPU descriptors \u62f7\u8d1d\u5230 GPU \u4e2d Handle \u652f\u6301 D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV \u7c7b\u578b\u7684 descriptor heap heap \u5fc5\u987b\u662f shader-visible \u7684 \u91cd\u7f6e binding table \u79fb\u9664\u6240\u6709\u8d44\u6e90 \u4fee\u6539 binding table \u63cf\u8ff0 IDMLBindingTable::Reset dmlBindingTableDesc . Dispatchable = pIDMLCompiledOperator . get (); winrt :: check_hresult ( pIDMLBindingTable -> Reset ( & dmlBindingTableDesc ) ); \u7ed1\u5b9a Temporary/Persistent \u4f7f\u7528\u4ece dispatchable \u4e2d\u83b7\u53d6\u7684 binding \u53c2\u6570\u586b\u5145 DML_BINDING_PROPERTIES \u7ed3\u6784\u3002\u521b\u5efa Direct3D 12 buffer \u8d44\u6e90\uff0c\u6dfb\u52a0\u5230 binding table \u4e2d\u3002 D3D12_HEAP_PROPERTIES defaultHeapProperties { CD3DX12_HEAP_PROPERTIES ( D3D12_HEAP_TYPE_DEFAULT ) }; winrt :: com_ptr <:: ID3D12Resource > temporaryBuffer ; D3D12_RESOURCE_DESC temporaryBufferDesc { CD3DX12_RESOURCE_DESC :: Buffer ( temporaryResourceSize ) }; winrt :: check_hresult ( d3D12Device -> CreateCommittedResource ( & defaultHeapProperties , D3D12_HEAP_FLAG_NONE , & temporaryBufferDesc , D3D12_RESOURCE_STATE_COMMON , nullptr , __uuidof ( temporaryBuffer ), temporaryBuffer . put_void () ) ); DML_BUFFER_BINDING bufferBinding { temporaryBuffer . get (), 0 , temporaryResourceSize }; DML_BINDING_DESC bindingDesc { DML_BINDING_TYPE_BUFFER , & bufferBinding }; dmlBindingTable -> BindTemporaryResource ( & bindingDesc ); temporary \u8d44\u6e90\u662f operator \u6267\u884c\u8fc7\u7a0b\u4e2d\u5185\u90e8\u4f7f\u7528\u7684\u5b58\u50a8\u8d44\u6e90\uff08GPU Memory\uff09\uff0c\u7a0b\u5e8f\u4e0d\u9700\u8981\u5173\u5fc3 temporary \u8d44\u6e90\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u9700\u8981\u5728 IDMLCommandRecorder::RecordDispatch \u6267\u884c\u540e\u4fdd\u7559\u5b83\u3002\u7a0b\u5e8f\u53ef\u4ee5\u9009\u62e9\u91ca\u653e\u8d44\u6e90\uff0c\u6216\u8005\u5728\u4e0d\u540c\u7684 dispatch \u4e0a\u91cd\u7528\u8fd9\u5757\u8d44\u6e90\u3002 \u5bf9\u4e8e persistent \u8d44\u6e90\uff0c\u521b\u5efa\u6d41\u7a0b\u4e0e\u4e0a\u8ff0\u4e00\u81f4\u3002\u4f46\u9700\u4f7f\u7528 IDMLBindingTable::BindOutputs \u5c06\u8d44\u6e90\u6dfb\u52a0\u5230 operator initializer \u7684 binding table \u4e2d\uff0c\u521d\u59cb\u5316 persistent \u8d44\u6e90\u662f initializer \u7684\u804c\u8d23\uff0c\u7136\u540e\u4f7f\u7528 IDMLBindingTable::BindPersistentResource \u7ed1\u5b9a\u5230 compiled operator\u3002persistent \u8d44\u6e90\u7684\u751f\u547d\u5468\u671f\u548c operator \u4e00\u6837\u957f\u3002 persistent \u8d44\u6e90\u901a\u5e38\u7528\u4e8e\u5b58\u50a8\u67e5\u627e\u8868\u6216 operator initialization \u8ba1\u7b97\u51fa\u7684\u6570\u636e\uff0c\u8fd9\u4e9b\u6570\u636e\u88ab operator \u4f7f\u7528\u3002 \u7ed1\u5b9a Tensors compiled operator \u9700\u4e3a binding table \u7ed1\u5b9a input \u548c output \u8d44\u6e90\u3002 \u7528 DML_BUFFER_BINDING \u548c DML_BINDING_DESC \u7ed3\u6784\u6765\u63cf\u8ff0 input output \u8d44\u6e90\uff0c\u4f7f\u7528 IDMLBindingTable::BindInputs \u548c IDMLBindingTable::BindOutputs \u6dfb\u52a0\u5230 binding table \u91cc\u3002\u8c03\u7528 IDMLBindingTable::Bind* \u65b9\u6cd5\u65f6, DirectML \u4f1a\u5c06 descriptors \u5199\u5165 CPU descriptors \u4e2d\u3002 DML_BUFFER_BINDING inputBufferBinding { inputBuffer . get (), 0 , tensorBufferSize }; DML_BINDING_DESC inputBindingDesc { DML_BINDING_TYPE_BUFFER , & inputBufferBinding }; dmlBindingTable -> BindInputs ( 1 , & inputBindingDesc ); DML_BUFFER_BINDING outputBufferBinding { outputBuffer . get (), 0 , tensorBufferSize }; DML_BINDING_DESC outputBindingDesc { DML_BINDING_TYPE_BUFFER , & outputBufferBinding }; dmlBindingTable -> BindOutputs ( 1 , & outputBindingDesc ); \u4f7f\u7528 DML_TENSOR_FLAG_OWNED_BY_DML \u6807\u8bc6\uff0c\u8ba9 DirectML \u7ba1\u7406 tensors\u3002DirectML \u5c06\u6570\u636e\u62f7\u8d1d\u3001\u5b58\u50a8\u5230 persistent \u8d44\u6e90\uff0cDirectML \u5c06\u6570\u636e\u8f6c\u5316\u4e3a\u66f4\u9ad8\u6548\u6267\u884c\u7684\u683c\u5f0f\u3002\u5bf9\u4e8e operator \u751f\u547d\u5468\u671f\u4e0d\u53d8\u7684\u6570\u636e\uff08\u4f8b\u5982\u6743\u91cd\uff09\uff0c\u53ef\u4ee5\u63d0\u5347\u6027\u80fd\u3002\u62e5\u6709\u8be5\u6807\u8bc6\u7684\u7684 tensor \u53ea\u80fd\u5728 initializer \u9636\u6bb5\u4f7f\u7528\u3002 \u5bf9\u4e8e\u975e DML_TENSOR_FLAG_OWNED_BY_DML \u6807\u8bc6\u7684 tensor \u5728\u6267\u884c operator \u65f6\u7ed1\u5b9a\u3002 \u6267\u884c Dispatchable \u4f7f\u7528 IDMLCommandRecorder::RecordDispatch \u4f20\u9012 binding table \u53c2\u6570\u3002 \u7a0b\u5e8f\u9700\u4fdd\u8bc1 CPU Descriptors \u590d\u5236\u5230\u4e86 GPU \u4e2d\u3002 winrt :: com_ptr <:: ID3D12GraphicsCommandList > d3D12GraphicsCommandList ; // Code to create a Direct3D 12 command list goes here. winrt :: com_ptr <:: IDMLCommandRecorder > dmlCommandRecorder ; // Code to create a DirectML command recorder goes here. dmlCommandRecorder -> RecordDispatch ( d3D12GraphicsCommandList . get (), dmlOperatorInitializer . get (), dmlBindingTable . get () ); \u5173\u95ed command list\uff0c\u63d0\u4ea4\u6267\u884c\u3002 GPU \u6267\u884c RecordDispatch \u524d\uff0c\u7a0b\u5e8f\u9700\u8981\u5c06\u6240\u6709\u7ed1\u5b9a\u7684\u8d44\u6e90\u8f6c\u6362\u5230 D3D12_RESOURCE_STATE_UNORDERED_ACCESS \u72b6\u6001\uff0c\u6216\u9690\u5f0f\u8f6c\u6362\u5230 D3D12_RESOURCE_STATE_UNORDERED_ACCESS \u7684\u72b6\u6001\uff0c\u4f8b\u5982 D3D12_RESOURCE_STATE_COMMON\u3002 \u4e0a\u8ff0\u4f8b\u5916\u662f upload heaps \u7ed1\u5b9a\u5230\u521d\u59cb\u5316 operator DML_TENSOR_FLAG_OWNED_BY_DML\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cupload heaps \u5e94\u5904\u5728 D3D12_RESOURCE_STATE_GENERIC_READ \u72b6\u6001\u3002 \u5bf9\u4e8e RecordDispatch\uff0c\u9700\u8981\u4f7f\u7528 unordered access view (UAV) barriers \u6765\u4fdd\u8bc1 dispatches \u95f4\u6b63\u786e\u6570\u636e\u4f9d\u8d56\u3002\u793a\u4f8b\u4ee3\u7801\u4e2d\u6ca1\u6709 UAV barriers\uff0c\u5f53 dispatch \u95f4\u6709\u6570\u636e\u4f9d\u8d56\uff08\u540e\u9762 dispatch \u7684 input \u7528\u5230\u4e86\u524d\u9762 dispatch \u7684 output\uff09\uff0c\u5b9e\u9645\u7a0b\u5e8f\u5fc5\u987b\u786e\u4fdd\u6b63\u786e\u7684 UAV barriers\u3002 Descriptors\u3001Binding Table \u7684\u751f\u547d\u5468\u671f\u548c\u540c\u6b65 \u5f53 Descriptor \u88ab\u4f7f\u7528\u65f6\uff08\u4f8b\u5982\uff0c\u88ab\u524d\u4e00\u5e27\u4f7f\u7528\uff09\uff0cbinding table \u65e0\u6cd5\u8986\u5199\uff0c\u7a0b\u5e8f\u9700\u8981\u7b49\u5f85 dispatchable GPU \u4e0a\u7ed3\u675f\u6267\u884c\u3002 Binding table \u4e0d\u6301\u6709 descriptor heap \u7684\u5f3a\u5f15\u7528\uff0c\u56e0\u800c\u7a0b\u5e8f\u5e94\u7b49\u5f85\u4f7f\u7528\u4e86\u8fd9\u4e2a binding table \u7684 dispatchable GPU \u6267\u884c\u7ed3\u675f\u540e\u518d\u91ca\u653e descriptor heap\u3002 Binding table \u4e0d\u4fdd\u8bc1\u7ebf\u7a0b\u5b89\u5168\uff0c\u4e0d\u8981\u5728\u672a\u540c\u6b65\u60c5\u51b5\u4e0b\u591a\u7ebf\u7a0b\u4f7f\u7528 binding table\u3002 \u5bf9\u4e8e ML\u3001CG \u6df7\u5408\u5de5\u4f5c\u6d41\uff0c\u7a0b\u5e8f\u5e94\u4fdd\u8bc1 binding table \u6307\u5411\u7684 descriptor heap \u6ca1\u6709\u6b63\u88ab GPU \u4f7f\u7528\u3002 Binding in DirectML - Windows applications | Microsoft Docs \u21a9 directml.h header | Microsoft Docs \u21a9","title":"\u8d44\u6e90\u7ed1\u5b9a"},{"location":"directx/binding/#directml-1","text":"\u5c06\u8d44\u6e90\u7ed1\u5b9a\u5230 pipeline \u4e0a\uff0cDirectML \u8d44\u6e90\u5305\u542b\u4e0b\u9762\u51e0\u79cd Input Output Temporary Persistent \u672c\u6587\u5305\u542b\u7ed1\u5b9a\u7684\u6982\u5ff5\u53ca\u5b9e\u73b0\u7ec6\u8282","title":"DirectML \u4e2d\u7684\u8d44\u6e90\u7ed1\u5b9a1"},{"location":"directx/binding/#_1","text":"\u6267\u884c dispatchable\uff08operator initializer/ compiled operator\uff09\uff0c\u9700\u4f9d\u7167\u4ee5\u4e0b\u6b65\u9aa4\u8fdb\u884c\u3002 IDMLDispatchable::GetBindingProperties \u83b7\u53d6\u5f53\u524d dispatchable \u6240\u9700\u7684 descriptors \u6570\u91cf\uff0ctemporary/persistent \u8d44\u6e90 \u521b\u5efa\u8db3\u591f\u5bb9\u7eb3 descriptors \u7684 Direct3D 12 descriptor heap\uff0c\u7ed1\u5b9a\u5230 pipeline IDMLDevice::CreateBindingTable \u521b\u5efa DirectML \u7684 binding table\uff0c\u8868\u793a pipeline \u4e0a\u7684\u8d44\u6e90\u3002\u4f7f\u7528 DML_BINDING_TABLE_DESC \u7ed3\u6784\u6765\u63cf\u8ff0 binding table\u3002 \u521b\u5efa Direct3D 12 buffer \u683c\u5f0f\u7684 temporal/persistent \u8d44\u6e90\uff0c \u7528 DML_BUFFER_BINDING \u548c DML_BINDING_DESC \u63cf\u8ff0\uff0c\u6dfb\u52a0\u5230 binding table \u5f53 dispatchable \u4e3a compiled operator \u65f6\uff0c\u521b\u5efa Direct3D 12 buffer \u8d44\u6e90\uff0c\u6dfb\u52a0\u5230 binding table \u5c06 binding table \u4f5c\u4e3a\u53c2\u6570\u4f20\u5165 IDMLCommandRecorder::RecordDispatch","title":"\u91cd\u8981\u6982\u5ff5"},{"location":"directx/binding/#binding-properties","text":"Note \u76f8\u540c\u7684 operator \u53ef\u80fd\u4f1a\u6709\u4e0d\u540c\u7684 binding properties DML_BINDING_PROPERTIES \u7ed3\u6784\u5b9a\u4e49\u4e86 dispatchable \u7ed1\u5b9a\u8d44\u6e90\u76f8\u5173\u6570\u636e\uff0c\u4e0b\u9762\u662f\u7ed3\u6784\u7684\u5b8c\u6574\u5b9a\u4e49 struct DML_BINDING_PROPERTIES { UINT RequiredDescriptorCount ; UINT64 TemporaryResourceSize ; UINT64 PersistentResourceSize ; }; \u4f7f\u7528 IDMLDispatchable::GetBindingProperties \u83b7\u53d6\u6570\u636e winrt :: com_ptr <:: IDMLCompiledOperator > dmlCompiledOperator ; // Code to create and compile a DirectML operator goes here. DML_BINDING_PROPERTIES executeDmlBindingProperties { dmlCompiledOperator -> GetBindingProperties () }; winrt :: com_ptr <:: IDMLOperatorInitializer > dmlOperatorInitializer ; // Code to create a DirectML operator initializer goes here. DML_BINDING_PROPERTIES initializeDmlBindingProperties { dmlOperatorInitializer -> GetBindingProperties () }; UINT descriptorCount = ... RequiredDescriptorCount\uff1aDescriptor Heap size TemporaryResourceSize PersistentResourceSize","title":"\u83b7\u53d6 Binding Properties"},{"location":"directx/binding/#descriptor-heap","text":"DirectML \u5728 Heap \u4e0a\u521b\u5efa\u3001\u7ba1\u7406 Descriptors\u3002 D3D12_DESCRIPTOR_HEAP_DESC \u7ed3\u6784\u63cf\u8ff0 Heap ID3D12Device::CreateDescriptorHeap \u521b\u5efa Heap\u3002 ID3D12GraphicsCommandList::SetDescriptorHeaps \u5c06 Heap \u7ed1\u5b9a\u5230 pipeline\u3002 typedef struct D3D12_DESCRIPTOR_HEAP_DESC { D3D12_DESCRIPTOR_HEAP_TYPE Type ; UINT NumDescriptors ; D3D12_DESCRIPTOR_HEAP_FLAGS Flags ; UINT NodeMask ; } D3D12_DESCRIPTOR_HEAP_DESC ; winrt :: com_ptr <:: ID3D12DescriptorHeap > d3D12DescriptorHeap ; D3D12_DESCRIPTOR_HEAP_DESC descriptorHeapDescription {}; descriptorHeapDescription . Type = D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV ; descriptorHeapDescription . NumDescriptors = descriptorCount ; descriptorHeapDescription . Flags = D3D12_DESCRIPTOR_HEAP_FLAG_SHADER_VISIBLE ; winrt :: check_hresult ( d3D12Device -> CreateDescriptorHeap ( & descriptorHeapDescription , _uuidof ( d3D12DescriptorHeap ), d3D12DescriptorHeap . put_void () ) ); std :: array < ID3D12DescriptorHeap * , 1 > d3D12DescriptorHeaps { d3D12DescriptorHeap . get () }; d3D12GraphicsCommandList -> SetDescriptorHeaps ( static_cast < UINT > ( d3D12DescriptorHeaps . size ()), d3D12DescriptorHeaps . data () );","title":"\u521b\u5efa Descriptor Heap"},{"location":"directx/binding/#binding-table","text":"Binding Table \u7528\u4e8e\u8868\u793a dispatchable \u7684\u8d44\u6e90\u3002Binding table \u6307\u5411 heap \u4e0a\u7684\u4e00\u5757\u533a\u57df\uff08DirectML \u5c06\u4f1a\u5728 heap \u8fd9\u5757\u533a\u57df\u4e2d\u5199\u5165 descriptors Input Output Temporary Persistent DML_BINDING_TABLE_DESC \u7528\u4e8e\u63cf\u8ff0 binding table struct DML_BINDING_TABLE_DESC { IDMLDispatchable * Dispatchable ; D3D12_CPU_DESCRIPTOR_HANDLE CPUDescriptorHandle ; D3D12_GPU_DESCRIPTOR_HANDLE GPUDescriptorHandle ; UINT SizeInDescriptors ; }; IDMLDevice::CreateBindingTable \u65b9\u6cd5\u521b\u5efa DirectML binding table\u3002\u4e4b\u540e\u6211\u4eec\u5c06\u521b\u5efa\u8d44\u6e90\uff0c\u5e76\u5c06\u8fd9\u4e9b\u8d44\u6e90\u6dfb\u52a0\u5230 binding table\u3002 DML_BINDING_TABLE_DESC dmlBindingTableDesc {}; dmlBindingTableDesc . Dispatchable = dmlOperatorInitializer . get (); dmlBindingTableDesc . CPUDescriptorHandle = d3D12DescriptorHeap -> GetCPUDescriptorHandleForHeapStart (); dmlBindingTableDesc . GPUDescriptorHandle = d3D12DescriptorHeap -> GetGPUDescriptorHandleForHeapStart (); dmlBindingTableDesc . SizeInDescriptors = descriptorCount ; winrt :: com_ptr <:: IDMLBindingTable > dmlBindingTable ; winrt :: check_hresult ( dmlDevice -> CreateBindingTable ( & dmlBindingTableDesc , __uuidof ( dmlBindingTable ), dmlBindingTable . put_void () ) ); DirectML \u5c06 Descriptor \u5199\u5165 Heap \u7684\u987a\u5e8f\u672a\u5b9a\u4e49\uff0c\u6ce8\u610f\u4e0d\u8981\u8986\u5199 binding table \u4e2d\u7684 descriptor \u4ee3\u7801\u4e2d\u6ce8\u610f\u5728\u6267\u884cbinding table \u524d\uff0c\u4fdd\u8bc1 CPU descriptors \u62f7\u8d1d\u5230 GPU \u4e2d Handle \u652f\u6301 D3D12_DESCRIPTOR_HEAP_TYPE_CBV_SRV_UAV \u7c7b\u578b\u7684 descriptor heap heap \u5fc5\u987b\u662f shader-visible \u7684 \u91cd\u7f6e binding table \u79fb\u9664\u6240\u6709\u8d44\u6e90 \u4fee\u6539 binding table \u63cf\u8ff0 IDMLBindingTable::Reset dmlBindingTableDesc . Dispatchable = pIDMLCompiledOperator . get (); winrt :: check_hresult ( pIDMLBindingTable -> Reset ( & dmlBindingTableDesc ) );","title":"\u521b\u5efa Binding Table"},{"location":"directx/binding/#temporarypersistent","text":"\u4f7f\u7528\u4ece dispatchable \u4e2d\u83b7\u53d6\u7684 binding \u53c2\u6570\u586b\u5145 DML_BINDING_PROPERTIES \u7ed3\u6784\u3002\u521b\u5efa Direct3D 12 buffer \u8d44\u6e90\uff0c\u6dfb\u52a0\u5230 binding table \u4e2d\u3002 D3D12_HEAP_PROPERTIES defaultHeapProperties { CD3DX12_HEAP_PROPERTIES ( D3D12_HEAP_TYPE_DEFAULT ) }; winrt :: com_ptr <:: ID3D12Resource > temporaryBuffer ; D3D12_RESOURCE_DESC temporaryBufferDesc { CD3DX12_RESOURCE_DESC :: Buffer ( temporaryResourceSize ) }; winrt :: check_hresult ( d3D12Device -> CreateCommittedResource ( & defaultHeapProperties , D3D12_HEAP_FLAG_NONE , & temporaryBufferDesc , D3D12_RESOURCE_STATE_COMMON , nullptr , __uuidof ( temporaryBuffer ), temporaryBuffer . put_void () ) ); DML_BUFFER_BINDING bufferBinding { temporaryBuffer . get (), 0 , temporaryResourceSize }; DML_BINDING_DESC bindingDesc { DML_BINDING_TYPE_BUFFER , & bufferBinding }; dmlBindingTable -> BindTemporaryResource ( & bindingDesc ); temporary \u8d44\u6e90\u662f operator \u6267\u884c\u8fc7\u7a0b\u4e2d\u5185\u90e8\u4f7f\u7528\u7684\u5b58\u50a8\u8d44\u6e90\uff08GPU Memory\uff09\uff0c\u7a0b\u5e8f\u4e0d\u9700\u8981\u5173\u5fc3 temporary \u8d44\u6e90\u7684\u5185\u5bb9\uff0c\u4e5f\u4e0d\u9700\u8981\u5728 IDMLCommandRecorder::RecordDispatch \u6267\u884c\u540e\u4fdd\u7559\u5b83\u3002\u7a0b\u5e8f\u53ef\u4ee5\u9009\u62e9\u91ca\u653e\u8d44\u6e90\uff0c\u6216\u8005\u5728\u4e0d\u540c\u7684 dispatch \u4e0a\u91cd\u7528\u8fd9\u5757\u8d44\u6e90\u3002 \u5bf9\u4e8e persistent \u8d44\u6e90\uff0c\u521b\u5efa\u6d41\u7a0b\u4e0e\u4e0a\u8ff0\u4e00\u81f4\u3002\u4f46\u9700\u4f7f\u7528 IDMLBindingTable::BindOutputs \u5c06\u8d44\u6e90\u6dfb\u52a0\u5230 operator initializer \u7684 binding table \u4e2d\uff0c\u521d\u59cb\u5316 persistent \u8d44\u6e90\u662f initializer \u7684\u804c\u8d23\uff0c\u7136\u540e\u4f7f\u7528 IDMLBindingTable::BindPersistentResource \u7ed1\u5b9a\u5230 compiled operator\u3002persistent \u8d44\u6e90\u7684\u751f\u547d\u5468\u671f\u548c operator \u4e00\u6837\u957f\u3002 persistent \u8d44\u6e90\u901a\u5e38\u7528\u4e8e\u5b58\u50a8\u67e5\u627e\u8868\u6216 operator initialization \u8ba1\u7b97\u51fa\u7684\u6570\u636e\uff0c\u8fd9\u4e9b\u6570\u636e\u88ab operator \u4f7f\u7528\u3002","title":"\u7ed1\u5b9a Temporary/Persistent"},{"location":"directx/binding/#tensors","text":"compiled operator \u9700\u4e3a binding table \u7ed1\u5b9a input \u548c output \u8d44\u6e90\u3002 \u7528 DML_BUFFER_BINDING \u548c DML_BINDING_DESC \u7ed3\u6784\u6765\u63cf\u8ff0 input output \u8d44\u6e90\uff0c\u4f7f\u7528 IDMLBindingTable::BindInputs \u548c IDMLBindingTable::BindOutputs \u6dfb\u52a0\u5230 binding table \u91cc\u3002\u8c03\u7528 IDMLBindingTable::Bind* \u65b9\u6cd5\u65f6, DirectML \u4f1a\u5c06 descriptors \u5199\u5165 CPU descriptors \u4e2d\u3002 DML_BUFFER_BINDING inputBufferBinding { inputBuffer . get (), 0 , tensorBufferSize }; DML_BINDING_DESC inputBindingDesc { DML_BINDING_TYPE_BUFFER , & inputBufferBinding }; dmlBindingTable -> BindInputs ( 1 , & inputBindingDesc ); DML_BUFFER_BINDING outputBufferBinding { outputBuffer . get (), 0 , tensorBufferSize }; DML_BINDING_DESC outputBindingDesc { DML_BINDING_TYPE_BUFFER , & outputBufferBinding }; dmlBindingTable -> BindOutputs ( 1 , & outputBindingDesc ); \u4f7f\u7528 DML_TENSOR_FLAG_OWNED_BY_DML \u6807\u8bc6\uff0c\u8ba9 DirectML \u7ba1\u7406 tensors\u3002DirectML \u5c06\u6570\u636e\u62f7\u8d1d\u3001\u5b58\u50a8\u5230 persistent \u8d44\u6e90\uff0cDirectML \u5c06\u6570\u636e\u8f6c\u5316\u4e3a\u66f4\u9ad8\u6548\u6267\u884c\u7684\u683c\u5f0f\u3002\u5bf9\u4e8e operator \u751f\u547d\u5468\u671f\u4e0d\u53d8\u7684\u6570\u636e\uff08\u4f8b\u5982\u6743\u91cd\uff09\uff0c\u53ef\u4ee5\u63d0\u5347\u6027\u80fd\u3002\u62e5\u6709\u8be5\u6807\u8bc6\u7684\u7684 tensor \u53ea\u80fd\u5728 initializer \u9636\u6bb5\u4f7f\u7528\u3002 \u5bf9\u4e8e\u975e DML_TENSOR_FLAG_OWNED_BY_DML \u6807\u8bc6\u7684 tensor \u5728\u6267\u884c operator \u65f6\u7ed1\u5b9a\u3002","title":"\u7ed1\u5b9a Tensors"},{"location":"directx/binding/#dispatchable","text":"\u4f7f\u7528 IDMLCommandRecorder::RecordDispatch \u4f20\u9012 binding table \u53c2\u6570\u3002 \u7a0b\u5e8f\u9700\u4fdd\u8bc1 CPU Descriptors \u590d\u5236\u5230\u4e86 GPU \u4e2d\u3002 winrt :: com_ptr <:: ID3D12GraphicsCommandList > d3D12GraphicsCommandList ; // Code to create a Direct3D 12 command list goes here. winrt :: com_ptr <:: IDMLCommandRecorder > dmlCommandRecorder ; // Code to create a DirectML command recorder goes here. dmlCommandRecorder -> RecordDispatch ( d3D12GraphicsCommandList . get (), dmlOperatorInitializer . get (), dmlBindingTable . get () ); \u5173\u95ed command list\uff0c\u63d0\u4ea4\u6267\u884c\u3002 GPU \u6267\u884c RecordDispatch \u524d\uff0c\u7a0b\u5e8f\u9700\u8981\u5c06\u6240\u6709\u7ed1\u5b9a\u7684\u8d44\u6e90\u8f6c\u6362\u5230 D3D12_RESOURCE_STATE_UNORDERED_ACCESS \u72b6\u6001\uff0c\u6216\u9690\u5f0f\u8f6c\u6362\u5230 D3D12_RESOURCE_STATE_UNORDERED_ACCESS \u7684\u72b6\u6001\uff0c\u4f8b\u5982 D3D12_RESOURCE_STATE_COMMON\u3002 \u4e0a\u8ff0\u4f8b\u5916\u662f upload heaps \u7ed1\u5b9a\u5230\u521d\u59cb\u5316 operator DML_TENSOR_FLAG_OWNED_BY_DML\u3002\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0cupload heaps \u5e94\u5904\u5728 D3D12_RESOURCE_STATE_GENERIC_READ \u72b6\u6001\u3002 \u5bf9\u4e8e RecordDispatch\uff0c\u9700\u8981\u4f7f\u7528 unordered access view (UAV) barriers \u6765\u4fdd\u8bc1 dispatches \u95f4\u6b63\u786e\u6570\u636e\u4f9d\u8d56\u3002\u793a\u4f8b\u4ee3\u7801\u4e2d\u6ca1\u6709 UAV barriers\uff0c\u5f53 dispatch \u95f4\u6709\u6570\u636e\u4f9d\u8d56\uff08\u540e\u9762 dispatch \u7684 input \u7528\u5230\u4e86\u524d\u9762 dispatch \u7684 output\uff09\uff0c\u5b9e\u9645\u7a0b\u5e8f\u5fc5\u987b\u786e\u4fdd\u6b63\u786e\u7684 UAV barriers\u3002","title":"\u6267\u884c Dispatchable"},{"location":"directx/binding/#descriptorsbinding-table","text":"\u5f53 Descriptor \u88ab\u4f7f\u7528\u65f6\uff08\u4f8b\u5982\uff0c\u88ab\u524d\u4e00\u5e27\u4f7f\u7528\uff09\uff0cbinding table \u65e0\u6cd5\u8986\u5199\uff0c\u7a0b\u5e8f\u9700\u8981\u7b49\u5f85 dispatchable GPU \u4e0a\u7ed3\u675f\u6267\u884c\u3002 Binding table \u4e0d\u6301\u6709 descriptor heap \u7684\u5f3a\u5f15\u7528\uff0c\u56e0\u800c\u7a0b\u5e8f\u5e94\u7b49\u5f85\u4f7f\u7528\u4e86\u8fd9\u4e2a binding table \u7684 dispatchable GPU \u6267\u884c\u7ed3\u675f\u540e\u518d\u91ca\u653e descriptor heap\u3002 Binding table \u4e0d\u4fdd\u8bc1\u7ebf\u7a0b\u5b89\u5168\uff0c\u4e0d\u8981\u5728\u672a\u540c\u6b65\u60c5\u51b5\u4e0b\u591a\u7ebf\u7a0b\u4f7f\u7528 binding table\u3002 \u5bf9\u4e8e ML\u3001CG \u6df7\u5408\u5de5\u4f5c\u6d41\uff0c\u7a0b\u5e8f\u5e94\u4fdd\u8bc1 binding table \u6307\u5411\u7684 descriptor heap \u6ca1\u6709\u6b63\u88ab GPU \u4f7f\u7528\u3002 Binding in DirectML - Windows applications | Microsoft Docs \u21a9 directml.h header | Microsoft Docs \u21a9","title":"Descriptors\u3001Binding Table \u7684\u751f\u547d\u5468\u671f\u548c\u540c\u6b65"},{"location":"directx/directml/","text":"DirectML \u5b98\u65b9\u6982\u8ff0 Direct Machine Learning (DirectML) is a low-level API for machine learning (ML). Hardware-accelerated machine learning primitives (called operators) are the building blocks of DirectML. From those building blocks, you can develop such machine learning techniques as upscaling, anti-aliasing, and style transfer, to name but a few. Denoising and super-resolution, for example, allow you to achieve impressive raytraced effects with fewer rays per pixel. Prerequisites DirectX 12-capable GPU drivers Windows 10 version 1903 or newer Windows 10 SDK version 1903 DirectML Resource The key to resource binding in DirectX 12 are the concepts of a descriptor, descriptor tables, descriptor heaps, and a root signature. A descriptor is a small object that contains information about one resource. typedef struct D3D12_SHADER_RESOURCE_VIEW_DESC { DXGI_FORMAT Format ; D3D12_SRV_DIMENSION ViewDimension ; union { D3D12_BUFFER_SRV Buffer ; D3D12_TEX1D_SRV Texture1D ; D3D12_TEX1D_ARRAY_SRV Texture1DArray ; D3D12_TEX2D_SRV Texture2D ; D3D12_TEX2D_ARRAY_SRV Texture2DArray ; D3D12_TEX2DMS_SRV Texture2DMS ; D3D12_TEX2DMS_ARRAY_SRV Texture2DMSArray ; D3D12_TEX3D_SRV Texture3D ; D3D12_TEXCUBE_SRV TextureCube ; D3D12_TEXCUBE_ARRAY_SRV TextureCubeArray ; D3D12_BUFFEREX_SRV BufferEx ; }; } D3D12_SHADER_RESOURCE_VIEW_DESC ; interface ID3D12Device { ... void CreateShaderResourceView ( _In_opt_ ID3D12Resource * pResource , _In_opt_ const D3D12_SHADER_RESOURCE_VIEW_DESC * pDesc , _In_ D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor ); }; // create SRV D3D12_SHADER_RESOURCE_VIEW_DESC srvDesc ; ZeroMemory ( & srvDesc , sizeof ( D3D12_SHADER_RESOURCE_VIEW_DESC )); srvDesc . Format = mTexture -> Format ; srvDesc . ViewDimension = D3D12_SRV_DIMENSION_TEXTURE2D ; srvDesc . Texture2D . MipLevels = 1 ; mDevice -> CreateShaderResourceView ( mTexture . Get (), & srvDesc , mCbvSrvDescriptorHeap -> GetCPUDescriptorHandleForHeapStart ()); Descriptor\uff1a \u63cf\u8ff0 GPU \u4e2d\u8d44\u6e90\u7c7b\u578b\u3001\u6570\u636e\u683c\u5f0f\u3001\u5b58\u50a8\u5730\u5740\u3002 \u5e38\u89c1\u7684 Descriptor \u7c7b\u578b: Constant buffer views (CBVs) Unordered access views (UAVs) Shader resource views (SRVs) Samplers Descriptor Table\uff1aDescriptors \u5206\u7c7b\u5b58\u5165 Descriptor Table Descriptor Heap\uff1aDescriptors \u5b58\u50a8\u5728 Descriptor Heap \u4e2d Topic Description Descriptor Descriptor Heap Descriptor Table Root Singature Descriptor \u521b\u5efa\u6d41\u7a0b\uff1a GPU \u521b\u5efa Descriptor Heap GPU \u521b\u5efa\u8d44\u6e90 GPU \u5229\u7528 1. \u521b\u5efa Descriptor Table \uff08\u53ef\u9009\uff09 GPU \u5229\u7528 1.2. \u7684\u4fe1\u606f\uff0c\u5728 Descriptor Heap / Table \u4e0a\u521b\u5efa Descriptor Windows provides APIs and components that support graphics, gaming, and imaging. \u21a9 Introduction to Resource Binding in Microsoft DirectX 12 \u21a9 Microsoft DirectX* 12 \u4e2d\u8d44\u6e90\u7ed1\u5b9a\u7684\u6027\u80fd\u8003\u8651\u56e0\u7d20 \u21a9 DirectML API \u6587\u6863 \u21a9","title":"DirectML \u6307\u5357"},{"location":"directx/directml/#prerequisites","text":"DirectX 12-capable GPU drivers Windows 10 version 1903 or newer Windows 10 SDK version 1903","title":"Prerequisites"},{"location":"directx/directml/#directml-resource","text":"The key to resource binding in DirectX 12 are the concepts of a descriptor, descriptor tables, descriptor heaps, and a root signature. A descriptor is a small object that contains information about one resource. typedef struct D3D12_SHADER_RESOURCE_VIEW_DESC { DXGI_FORMAT Format ; D3D12_SRV_DIMENSION ViewDimension ; union { D3D12_BUFFER_SRV Buffer ; D3D12_TEX1D_SRV Texture1D ; D3D12_TEX1D_ARRAY_SRV Texture1DArray ; D3D12_TEX2D_SRV Texture2D ; D3D12_TEX2D_ARRAY_SRV Texture2DArray ; D3D12_TEX2DMS_SRV Texture2DMS ; D3D12_TEX2DMS_ARRAY_SRV Texture2DMSArray ; D3D12_TEX3D_SRV Texture3D ; D3D12_TEXCUBE_SRV TextureCube ; D3D12_TEXCUBE_ARRAY_SRV TextureCubeArray ; D3D12_BUFFEREX_SRV BufferEx ; }; } D3D12_SHADER_RESOURCE_VIEW_DESC ; interface ID3D12Device { ... void CreateShaderResourceView ( _In_opt_ ID3D12Resource * pResource , _In_opt_ const D3D12_SHADER_RESOURCE_VIEW_DESC * pDesc , _In_ D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor ); }; // create SRV D3D12_SHADER_RESOURCE_VIEW_DESC srvDesc ; ZeroMemory ( & srvDesc , sizeof ( D3D12_SHADER_RESOURCE_VIEW_DESC )); srvDesc . Format = mTexture -> Format ; srvDesc . ViewDimension = D3D12_SRV_DIMENSION_TEXTURE2D ; srvDesc . Texture2D . MipLevels = 1 ; mDevice -> CreateShaderResourceView ( mTexture . Get (), & srvDesc , mCbvSrvDescriptorHeap -> GetCPUDescriptorHandleForHeapStart ()); Descriptor\uff1a \u63cf\u8ff0 GPU \u4e2d\u8d44\u6e90\u7c7b\u578b\u3001\u6570\u636e\u683c\u5f0f\u3001\u5b58\u50a8\u5730\u5740\u3002 \u5e38\u89c1\u7684 Descriptor \u7c7b\u578b: Constant buffer views (CBVs) Unordered access views (UAVs) Shader resource views (SRVs) Samplers Descriptor Table\uff1aDescriptors \u5206\u7c7b\u5b58\u5165 Descriptor Table Descriptor Heap\uff1aDescriptors \u5b58\u50a8\u5728 Descriptor Heap \u4e2d Topic Description Descriptor Descriptor Heap Descriptor Table Root Singature Descriptor \u521b\u5efa\u6d41\u7a0b\uff1a GPU \u521b\u5efa Descriptor Heap GPU \u521b\u5efa\u8d44\u6e90 GPU \u5229\u7528 1. \u521b\u5efa Descriptor Table \uff08\u53ef\u9009\uff09 GPU \u5229\u7528 1.2. \u7684\u4fe1\u606f\uff0c\u5728 Descriptor Heap / Table \u4e0a\u521b\u5efa Descriptor Windows provides APIs and components that support graphics, gaming, and imaging. \u21a9 Introduction to Resource Binding in Microsoft DirectX 12 \u21a9 Microsoft DirectX* 12 \u4e2d\u8d44\u6e90\u7ed1\u5b9a\u7684\u6027\u80fd\u8003\u8651\u56e0\u7d20 \u21a9 DirectML API \u6587\u6863 \u21a9","title":"DirectML Resource"},{"location":"directx/project/","text":"\u9879\u76ee\u7f16\u7801\u76f8\u5173 \u5c1d\u8bd5\u7528 Join Operator 1 \u8fdb\u884c\u7c7b\u4f3c torch.cat \u7684\u64cd\u4f5c struct DML_JOIN_OPERATOR_DESC { UINT InputCount ; _In_reads_ ( InputCount ) const DML_TENSOR_DESC * InputTensors ; const DML_TENSOR_DESC * OutputTensor ; UINT Axis ; }; Persistent Temporary \u8d44\u6e90\u8bf4\u660e Persistent \u8d44\u6e90\u4e0e compiled operator \u751f\u547d\u5468\u671f\u4e00\u81f4\u3002\u5982\u679c operator \u8bf7\u6c42 persistent \u8d44\u6e90\uff0c\u90a3\u4e48\u7a0b\u5e8f\u5fc5\u987b\u5728 initializer operator \u4e0a\u63d0\u4f9b\uff0c\u5e76\u4e14\u5728\u4e4b\u540e\u7684\u6267\u884c\u8fc7\u7a0b\u4e2d\u8fd9\u5757\u8d44\u6e90\u4e0d\u80fd\u88ab\u4fee\u6539\u3002 2 \u5bf9\u4e8e initializer operator\uff0coutput \u4e0a\u7684\u7ed1\u5b9a\u4ee3\u8868\u4e86 operator \u7684 persistent \u8d44\u6e90\u3002 3 DML_TENSOR_FLAG_OWNED_BY_DML \u6807\u8bc6\u7528\u4e8e\u6743\u91cd\u3002 If the dispatchable reports a non-zero size for its more long-lived persistent resource, though, then the procedure is a little different. You should create a buffer and describe a binding following the same pattern as shown above. But add it to your operator initializer's binding table with a call to IDMLBindingTable::BindOutputs, because it's the operator initializer's job to initialize the persistent resource. Then add it to your compiled operator's binding table with a call to IDMLBindingTable::BindPersistentResource. 4 For operator initializers, input bindings are expected to be of type DML_BINDING_TYPE_BUFFER_ARRAY with one input binding per operator to initialize, supplied in the order that you specified the operators during creation or reset of the initializer. Each buffer array should have a size equal to the number of inputs of its corresponding operator to initialize. Input tensors that had the DML_TENSOR_FLAG_OWNED_BY_DML flag set should be bound during initialize\u2014otherwise, nothing should be bound for that tensor. If there is nothing to be bound as input for initialization of an operator (that is, there are no tensors with the DML_TENSOR_FLAG_OWNED_BY_DML flag set) then you may supply nullptr or an empty DML_BUFFER_ARRAY_BINDING to indicate 'no binding'. 5 Persistent \u8d44\u6e90\u4f7f\u7528\u65b9\u6cd5\uff1a \u521b\u5efa persistent \u8d44\u6e90 \u521d\u59cb\u5316\u65f6\u5c06 persistent \u8d44\u6e90\u7ed1\u5b9a\u5230 initializer operator \u7684 outputs\uff08\u6267\u884c\u521d\u59cb\u5316\u524d\u9700\u8981\u5c06 weight tensors \u7ed1\u5b9a\u5230 inputs\uff09 \u6267\u884c\u65f6\u7ed1\u5b9a\u5230 compiled operator \u7684 persistent \u5377\u79ef Operator struct DML_CONVOLUTION_OPERATOR_DESC { const DML_TENSOR_DESC * InputTensor ; const DML_TENSOR_DESC * FilterTensor ; const DML_TENSOR_DESC * BiasTensor ; const DML_TENSOR_DESC * OutputTensor ; DML_CONVOLUTION_MODE Mode ; DML_CONVOLUTION_DIRECTION Direction ; UINT DimensionCount ; const UINT * Strides ; const UINT * Dilations ; const UINT * StartPadding ; const UINT * EndPadding ; const UINT * OutputPadding ; UINT GroupCount ; const DML_OPERATOR_DESC * FusedActivation ; }; \u53c2\u6570 \u8bf4\u660e InputTensor - FilterTensor - BiasTensor \u53ef\u9009\u53c2\u6570 OutputTensor - Mode \u4f7f\u7528 DML_CONVOLUTION_MODE_CROSS_CORRELATION\uff0c\u673a\u5668\u5b66\u4e60\u4e2d\u7684\u5377\u79ef\u5373\u4e92\u76f8\u5173 Direction forward pass/backward pass DimensionCount The number of dimensions. This field determines the size of the Strides, Dilations, StartPadding, EndPadding, and OutputPadding arrays. Strides \u6b65\u957f Dilations \u6bcf\u4e00\u4e2a\u8f74\u7684\u81a8\u80c0\u7387\uff0c\u8bbe\u7f6e\u4e3a1\u8868\u793a\u4e0d\u81a8\u80c0 StartPadding \u8d77\u59cb\u4f4d\u7f6e\u9700\u8981\u6dfb\u52a0\u7684 pixels \u6570\u91cf EndPadding \u7ed3\u675f\u4f4d\u7f6e\u9700\u6dfb\u52a0\u7684 pixels \u6570\u91cf OutputPadding \u53cd\u5377\u79ef\u4e2d\u7528\u5230\u7684\u53c2\u6570 Group FusedActivation \u53ef\u9009\u53c2\u6570\uff0c\u6fc0\u6d3b\u5c42 Conv Operator \u5de5\u4f5c\u6d41 \u521d\u59cb\u5316 \u521b\u5efa D3D12 device\u3001queue\u3001list\u3001heaps\uff0cDML device \u521b\u5efa Operator \u521b\u5efa InputTensor\uff0cFilterTensor\uff0cBiasTensor\uff08\u53ef\u9009\uff09\uff0cOutputTensor Tensor \u63cf\u8ff0\u7b26 \u7528 1. \u4e2d\u63cf\u8ff0\u7b26\uff0c\u521b\u5efa DML_CONVOLUTION_OPERATOR_DESC \u521b\u5efa Operator \u521d\u59cb\u5316 Operator \u521b\u5efa Temporary\u3001Persistent \u8d44\u6e90 \u7ed1\u5b9a Temporary \u8d44\u6e90\uff08Persistent \u4ec5\u9700\u8981\u6267\u884c Operator \u65f6\u7ed1\u5b9a\uff09 \u4e3a binding table \u7ed1\u5b9a Outputs\uff08\u6b64\u5904\u4e3a Persistent \u8d44\u6e90 \u4e3a binding table \u7ed1\u5b9a Inputs \u521d\u59cb\u5316 Operator \u6267\u884c Operator \u7ed1\u5b9a Temporary\u3001Persistent \u8d44\u6e90 \u4e3a binding table \u7ed1\u5b9a Inputs \u4e3a binding table \u7ed1\u5b9a InputsOutputs \u6267\u884c Operator \u7ed3\u675f \u56de\u8bfb\u7ed3\u679c DirectML API \u6587\u6863 \u21a9 https://docs.microsoft.com/en-us/windows/desktop/api/directml/nf-directml-idmlbindingtable-bindpersistentresource \u21a9 https://docs.microsoft.com/en-us/windows/desktop/api/directml/nf-directml-idmlbindingtable-bindoutputs \u21a9 https://docs.microsoft.com/en-us/windows/desktop/direct3d12/dml-binding#describe-and-bind-any-temporarypersistent-resources \u21a9 https://docs.microsoft.com/en-us/windows/desktop/api/directml/nf-directml-idmlbindingtable-bindinputs \u21a9","title":"\u9879\u76ee\u7f16\u7801\u76f8\u5173"},{"location":"directx/project/#_1","text":"\u5c1d\u8bd5\u7528 Join Operator 1 \u8fdb\u884c\u7c7b\u4f3c torch.cat \u7684\u64cd\u4f5c struct DML_JOIN_OPERATOR_DESC { UINT InputCount ; _In_reads_ ( InputCount ) const DML_TENSOR_DESC * InputTensors ; const DML_TENSOR_DESC * OutputTensor ; UINT Axis ; };","title":"\u9879\u76ee\u7f16\u7801\u76f8\u5173"},{"location":"directx/project/#persistent-temporary","text":"Persistent \u8d44\u6e90\u4e0e compiled operator \u751f\u547d\u5468\u671f\u4e00\u81f4\u3002\u5982\u679c operator \u8bf7\u6c42 persistent \u8d44\u6e90\uff0c\u90a3\u4e48\u7a0b\u5e8f\u5fc5\u987b\u5728 initializer operator \u4e0a\u63d0\u4f9b\uff0c\u5e76\u4e14\u5728\u4e4b\u540e\u7684\u6267\u884c\u8fc7\u7a0b\u4e2d\u8fd9\u5757\u8d44\u6e90\u4e0d\u80fd\u88ab\u4fee\u6539\u3002 2 \u5bf9\u4e8e initializer operator\uff0coutput \u4e0a\u7684\u7ed1\u5b9a\u4ee3\u8868\u4e86 operator \u7684 persistent \u8d44\u6e90\u3002 3 DML_TENSOR_FLAG_OWNED_BY_DML \u6807\u8bc6\u7528\u4e8e\u6743\u91cd\u3002 If the dispatchable reports a non-zero size for its more long-lived persistent resource, though, then the procedure is a little different. You should create a buffer and describe a binding following the same pattern as shown above. But add it to your operator initializer's binding table with a call to IDMLBindingTable::BindOutputs, because it's the operator initializer's job to initialize the persistent resource. Then add it to your compiled operator's binding table with a call to IDMLBindingTable::BindPersistentResource. 4 For operator initializers, input bindings are expected to be of type DML_BINDING_TYPE_BUFFER_ARRAY with one input binding per operator to initialize, supplied in the order that you specified the operators during creation or reset of the initializer. Each buffer array should have a size equal to the number of inputs of its corresponding operator to initialize. Input tensors that had the DML_TENSOR_FLAG_OWNED_BY_DML flag set should be bound during initialize\u2014otherwise, nothing should be bound for that tensor. If there is nothing to be bound as input for initialization of an operator (that is, there are no tensors with the DML_TENSOR_FLAG_OWNED_BY_DML flag set) then you may supply nullptr or an empty DML_BUFFER_ARRAY_BINDING to indicate 'no binding'. 5 Persistent \u8d44\u6e90\u4f7f\u7528\u65b9\u6cd5\uff1a \u521b\u5efa persistent \u8d44\u6e90 \u521d\u59cb\u5316\u65f6\u5c06 persistent \u8d44\u6e90\u7ed1\u5b9a\u5230 initializer operator \u7684 outputs\uff08\u6267\u884c\u521d\u59cb\u5316\u524d\u9700\u8981\u5c06 weight tensors \u7ed1\u5b9a\u5230 inputs\uff09 \u6267\u884c\u65f6\u7ed1\u5b9a\u5230 compiled operator \u7684 persistent","title":"Persistent Temporary \u8d44\u6e90\u8bf4\u660e"},{"location":"directx/project/#operator","text":"struct DML_CONVOLUTION_OPERATOR_DESC { const DML_TENSOR_DESC * InputTensor ; const DML_TENSOR_DESC * FilterTensor ; const DML_TENSOR_DESC * BiasTensor ; const DML_TENSOR_DESC * OutputTensor ; DML_CONVOLUTION_MODE Mode ; DML_CONVOLUTION_DIRECTION Direction ; UINT DimensionCount ; const UINT * Strides ; const UINT * Dilations ; const UINT * StartPadding ; const UINT * EndPadding ; const UINT * OutputPadding ; UINT GroupCount ; const DML_OPERATOR_DESC * FusedActivation ; }; \u53c2\u6570 \u8bf4\u660e InputTensor - FilterTensor - BiasTensor \u53ef\u9009\u53c2\u6570 OutputTensor - Mode \u4f7f\u7528 DML_CONVOLUTION_MODE_CROSS_CORRELATION\uff0c\u673a\u5668\u5b66\u4e60\u4e2d\u7684\u5377\u79ef\u5373\u4e92\u76f8\u5173 Direction forward pass/backward pass DimensionCount The number of dimensions. This field determines the size of the Strides, Dilations, StartPadding, EndPadding, and OutputPadding arrays. Strides \u6b65\u957f Dilations \u6bcf\u4e00\u4e2a\u8f74\u7684\u81a8\u80c0\u7387\uff0c\u8bbe\u7f6e\u4e3a1\u8868\u793a\u4e0d\u81a8\u80c0 StartPadding \u8d77\u59cb\u4f4d\u7f6e\u9700\u8981\u6dfb\u52a0\u7684 pixels \u6570\u91cf EndPadding \u7ed3\u675f\u4f4d\u7f6e\u9700\u6dfb\u52a0\u7684 pixels \u6570\u91cf OutputPadding \u53cd\u5377\u79ef\u4e2d\u7528\u5230\u7684\u53c2\u6570 Group FusedActivation \u53ef\u9009\u53c2\u6570\uff0c\u6fc0\u6d3b\u5c42","title":"\u5377\u79ef Operator"},{"location":"directx/project/#conv-operator","text":"","title":"Conv Operator \u5de5\u4f5c\u6d41"},{"location":"directx/project/#_2","text":"\u521b\u5efa D3D12 device\u3001queue\u3001list\u3001heaps\uff0cDML device","title":"\u521d\u59cb\u5316"},{"location":"directx/project/#operator_1","text":"\u521b\u5efa InputTensor\uff0cFilterTensor\uff0cBiasTensor\uff08\u53ef\u9009\uff09\uff0cOutputTensor Tensor \u63cf\u8ff0\u7b26 \u7528 1. \u4e2d\u63cf\u8ff0\u7b26\uff0c\u521b\u5efa DML_CONVOLUTION_OPERATOR_DESC \u521b\u5efa Operator","title":"\u521b\u5efa Operator"},{"location":"directx/project/#operator_2","text":"\u521b\u5efa Temporary\u3001Persistent \u8d44\u6e90 \u7ed1\u5b9a Temporary \u8d44\u6e90\uff08Persistent \u4ec5\u9700\u8981\u6267\u884c Operator \u65f6\u7ed1\u5b9a\uff09 \u4e3a binding table \u7ed1\u5b9a Outputs\uff08\u6b64\u5904\u4e3a Persistent \u8d44\u6e90 \u4e3a binding table \u7ed1\u5b9a Inputs \u521d\u59cb\u5316 Operator","title":"\u521d\u59cb\u5316 Operator"},{"location":"directx/project/#operator_3","text":"\u7ed1\u5b9a Temporary\u3001Persistent \u8d44\u6e90 \u4e3a binding table \u7ed1\u5b9a Inputs \u4e3a binding table \u7ed1\u5b9a InputsOutputs \u6267\u884c Operator","title":"\u6267\u884c Operator"},{"location":"directx/project/#_3","text":"\u56de\u8bfb\u7ed3\u679c DirectML API \u6587\u6863 \u21a9 https://docs.microsoft.com/en-us/windows/desktop/api/directml/nf-directml-idmlbindingtable-bindpersistentresource \u21a9 https://docs.microsoft.com/en-us/windows/desktop/api/directml/nf-directml-idmlbindingtable-bindoutputs \u21a9 https://docs.microsoft.com/en-us/windows/desktop/direct3d12/dml-binding#describe-and-bind-any-temporarypersistent-resources \u21a9 https://docs.microsoft.com/en-us/windows/desktop/api/directml/nf-directml-idmlbindingtable-bindinputs \u21a9","title":"\u7ed3\u675f"},{"location":"gist/algorithm/","text":"\u7b97\u6cd5\u3001\u6570\u636e\u7ed3\u6784\u8bad\u7ec3 \u5251\u6307Offer 01\uff1a\u8d4b\u503c\u64cd\u4f5c\u7b26 \u300aEffective C++\u300b 10 11 12 29 02\uff1aSingleton \u300aInside the C++ Object Model\u300bLocal Static Objects p247 \u9759\u6001\u6210\u5458\u53d8\u91cf\u7c7b\u5916\u521d\u59cb\u5316 Lazy init \u7ebf\u7a0b\u5b89\u5168 static\u5728\u4ec0\u4e48\u65f6\u5019\u521d\u59cb\u5316 \u300a\u6e38\u620f\u8bbe\u8ba1\u6a21\u5f0f\u300b \u73b0\u4ee3\u7684\u5b9e\u73b0\u65b9\u6848\u770b\u8d77\u6765\u662f\u8fd9\u6837\u7684\uff1a class FileSystem { public : static FileSystem & instance () { static FileSystem * instance = new FileSystem (); return * instance ; } private : FileSystem () {} }; \u54ea\u6015\u662f\u5728\u591a\u7ebf\u7a0b\u60c5\u51b5\u4e0b\uff0cC++11\u6807\u51c6\u4e5f\u4fdd\u8bc1\u4e86\u672c\u5730\u9759\u6001\u53d8\u91cf\u53ea\u4f1a\u521d\u59cb\u5316\u4e00\u6b21\uff0c \u56e0\u6b64\uff0c\u5047\u8bbe\u4f60\u6709\u4e00\u4e2a\u73b0\u4ee3C++\u7f16\u8bd1\u5668\uff0c\u8fd9\u6bb5\u4ee3\u7801\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff0c\u800c\u524d\u9762\u7684\u90a3\u4e2a\u4f8b\u5b50\u4e0d\u662f\u3002 #include <iostream> #include <string.h> class MyString { public : MyString ( char * p_data = nullptr ) { this -> p_data_ = p_data ; } MyString ( const MyString & str ); ~ MyString () {} MyString & operator = ( const MyString & ); void print (); private : void swap ( MyString & ); char * p_data_ ; }; MyString :: MyString ( const MyString & str ) { p_data_ = new char [ strlen ( str . p_data_ ) + 1 ]; strcpy ( p_data_ , str . p_data_ ); } void MyString :: print () { if ( p_data_ == nullptr ) { return ; } printf ( \"%s \\n \" , p_data_ ); } void MyString :: swap ( MyString & str ) { auto tmp = p_data_ ; p_data_ = str . p_data_ ; str . p_data_ = tmp ; } MyString & MyString :: operator = ( const MyString & str ) { if ( this == & str ) { return * this ; } MyString backup ( str ); swap ( backup ); return * this ; } #include <iostream> class FileSystem { public : static FileSystem & instance () { static FileSystem * instance = new FileSystem (); return * instance ; } private : FileSystem () {} };","title":"\u7b97\u6cd5\u3001\u6570\u636e\u7ed3\u6784\u8bad\u7ec3"},{"location":"gist/algorithm/#_1","text":"","title":"\u7b97\u6cd5\u3001\u6570\u636e\u7ed3\u6784\u8bad\u7ec3"},{"location":"gist/algorithm/#offer","text":"","title":"\u5251\u6307Offer"},{"location":"gist/algorithm/#01","text":"\u300aEffective C++\u300b 10 11 12 29","title":"01\uff1a\u8d4b\u503c\u64cd\u4f5c\u7b26"},{"location":"gist/algorithm/#02singleton","text":"\u300aInside the C++ Object Model\u300bLocal Static Objects p247 \u9759\u6001\u6210\u5458\u53d8\u91cf\u7c7b\u5916\u521d\u59cb\u5316 Lazy init \u7ebf\u7a0b\u5b89\u5168 static\u5728\u4ec0\u4e48\u65f6\u5019\u521d\u59cb\u5316 \u300a\u6e38\u620f\u8bbe\u8ba1\u6a21\u5f0f\u300b \u73b0\u4ee3\u7684\u5b9e\u73b0\u65b9\u6848\u770b\u8d77\u6765\u662f\u8fd9\u6837\u7684\uff1a class FileSystem { public : static FileSystem & instance () { static FileSystem * instance = new FileSystem (); return * instance ; } private : FileSystem () {} }; \u54ea\u6015\u662f\u5728\u591a\u7ebf\u7a0b\u60c5\u51b5\u4e0b\uff0cC++11\u6807\u51c6\u4e5f\u4fdd\u8bc1\u4e86\u672c\u5730\u9759\u6001\u53d8\u91cf\u53ea\u4f1a\u521d\u59cb\u5316\u4e00\u6b21\uff0c \u56e0\u6b64\uff0c\u5047\u8bbe\u4f60\u6709\u4e00\u4e2a\u73b0\u4ee3C++\u7f16\u8bd1\u5668\uff0c\u8fd9\u6bb5\u4ee3\u7801\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff0c\u800c\u524d\u9762\u7684\u90a3\u4e2a\u4f8b\u5b50\u4e0d\u662f\u3002 #include <iostream> #include <string.h> class MyString { public : MyString ( char * p_data = nullptr ) { this -> p_data_ = p_data ; } MyString ( const MyString & str ); ~ MyString () {} MyString & operator = ( const MyString & ); void print (); private : void swap ( MyString & ); char * p_data_ ; }; MyString :: MyString ( const MyString & str ) { p_data_ = new char [ strlen ( str . p_data_ ) + 1 ]; strcpy ( p_data_ , str . p_data_ ); } void MyString :: print () { if ( p_data_ == nullptr ) { return ; } printf ( \"%s \\n \" , p_data_ ); } void MyString :: swap ( MyString & str ) { auto tmp = p_data_ ; p_data_ = str . p_data_ ; str . p_data_ = tmp ; } MyString & MyString :: operator = ( const MyString & str ) { if ( this == & str ) { return * this ; } MyString backup ( str ); swap ( backup ); return * this ; } #include <iostream> class FileSystem { public : static FileSystem & instance () { static FileSystem * instance = new FileSystem (); return * instance ; } private : FileSystem () {} };","title":"02\uff1aSingleton"},{"location":"gist/businese-arch/","text":"\u804c\u4e1a \u57fa\u7840\u8bbe\u65bd-> \u7b97\u6cd5-> \u4ea7\u54c1 \u4ea7\u54c1 <----> \u9700\u6c42","title":"\u804c\u4e1a"},{"location":"gist/businese-arch/#_1","text":"\u57fa\u7840\u8bbe\u65bd-> \u7b97\u6cd5-> \u4ea7\u54c1 \u4ea7\u54c1 <----> \u9700\u6c42","title":"\u804c\u4e1a"},{"location":"gist/cloud-rendering/","text":"Cloud Rendering #version 430 core uniform sampler3D uNoiseTextureA ; /*\u566a\u58f0\u7eb9\u7406A*/ uniform sampler3D uNoiseTextureB ; /*\u566a\u58f0\u7eb9\u7406B*/ uniform sampler2D uCoverageTexture ; /*\u5929\u6c14\u7eb9\u7406*/ uniform int uMinStepCount = 96 ; uniform int uMaxStepCount = 128 ; uniform float uTime ; layout ( std140 , binding = 0 ) uniform uCloudPropertiesUBO { //vec4\uff08vec3\u4e5f\u662f\u9700\u8981vec4\u5bf9\u9f50\uff0c\u6240\u4ee5\u7d22\u6027\u628avec3\u90fd\u76f4\u63a5\u5b9a\u4e49\u4e3avec4\uff09 vec4 uCloudHeightGradient1 ; // x,y,z,w = 4 positions of a black,white,white,black gradient vec4 uCloudHeightGradient2 ; // x,y,z,w = 4 positions of a black,white,white,black gradient vec4 uCloudHeightGradient3 ; // x,y,z,w = 4 positions of a black,white,white,black gradient vec4 uCloudBaseColor ; vec4 uCloudTopColor ; //vec2 vec2 uCoverageOffset ; vec2 uAlignmentVec2 ; //float 32 float uEarthRadius ; float uStartHeight ; float uEndHeight ; float uAtmosphereThickness ; float uMaxDistance ; float uCloudBottomFade ; float uBaseScale ; float uCoverageScale ; float uHorizonFadeStartAlpha ; float uOneMinusHorizonFadeStartAlpha ; float uHorizonFadeScalar ; // Fades clouds on horizon, 1.0 -> 10.0 (1.0 = smooth fade, 10 = no fade) float uLightScalar ; float uAmbientScalar ; float uSunRayLength ; float uConeRadius ; float uMaxIterations ; float uMaxRayDistance ; float uRayStepLength ; float uSampleScalar ; float uSampleThreshold ; float uDetailScale ; float uErosionEdgeSize ; float uCloudDistortion ; float uCloudDistortionScale ; float uDensity ; float uForwardScatteringG ; float uBackwardScatteringG ; float uDarkOutlineScalar ; float uHorizonCoverageStart ; float uHorizonCoverageEnd ; float uLODDistance ; float uRayMinimumY ; }; layout ( std140 , binding = 1 ) uniform uAnimatedPropertiesUBO { vec4 uCameraPosition ; vec4 uBaseOffset ; vec4 uDetailOffset ; vec4 uLightDirection ; vec4 uLightColor ; }; layout ( std140 , binding = 2 ) uniform uRandomsUBO { vec4 uRandom0 ; vec4 uRandom1 ; vec4 uRandom2 ; vec4 uRandom3 ; vec4 uRandom4 ; vec4 uRandom5 ; }; in vec2 _TexCoord ; /*\u7eb9\u7406\u5750\u6807*/ in vec3 _ViewVector ; /*\u89c6\u7ebf\u5411\u91cf*/ out vec4 _outFragColor ; #define FLOAT4_COVERAGE( f) f.r #define FLOAT4_RAIN( f) f.g #define FLOAT4_TYPE( f) f.b float getAltitude ( vec3 vPositionW ); bool intersectRaySphere ( vec3 vRayOrigin , vec3 vRayDirection , vec3 vSphereCenter , float vSphereRadius , out vec3 voNearestIntersection ); float normalizedAtmosphereY ( vec3 vRay ); float gradientStep ( float vCsRayHeight , vec4 vGradient ); vec4 sampleCoverage ( vec3 vRay , float vCsRayHeight , float vLod ); float smoothThreshold ( float vValue , float vThreshold , float vEdgeSize ); vec3 smoothThreshold ( vec3 vValue , float vThreshold , float vEdgeSize ); float lerp3 ( float vV0 , float vV1 , float vV2 , float vA ); vec4 lerp3 ( vec4 vV0 , vec4 vV1 , vec4 vV2 , float vA ); float remap ( float vOldValue , float vOldMin , float vOldMax , float vNewMin , float vNewMax ); float sampleCloud ( vec3 vRay , float vRayDensity , vec4 vCoverage , float vCsRayHeight , float vLod ); float henyeyGreensteinPhase ( float vCosAngle , float vG ); float beerTerm ( float vDensityAtSample ); float powderTerm ( float vDensityAtSample , float vCosTheta ); vec3 sampleLight ( vec3 vOrigin , float vOriginDensity , float vPixelAlpha , float vCosAngle , vec2 vDebugUV , float vRayDistance , vec3 vRandomUnitSphere [ 6 ]); vec3 sampleAmbientLight ( float vAtmosphereY , float vDepth ); float sun (); vec3 bgColor (); bool rayMarching ( int vTraceMode , int vSteps , vec3 vRay , vec3 vBGColor , vec3 vRayDirection , out vec4 voFragColor ); #define BGColor bgColor() void main () { _outFragColor = vec4 ( 0.0 f , 0.0 f , 0.0 f , 0.0 f ); vec3 RayDirection = normalize ( _ViewVector ); vec3 IntersectPosBottom ; vec3 IntersectPosTop ; float CamAltitude = getAltitude ( uCameraPosition . xyz ); bool IntersectBottom = intersectRaySphere ( uCameraPosition . xyz , RayDirection , vec3 ( 0.0 f , 0.0 f , 0.0 f ), uEarthRadius + uStartHeight , IntersectPosBottom ); bool IntersectTop = intersectRaySphere ( uCameraPosition . xyz , RayDirection , vec3 ( 0.0 f , 0.0 f , 0.0 f ), uEarthRadius + uEndHeight , IntersectPosTop ); float CosYV = dot ( vec3 ( 0.0 f , 1.0 f , 0.0 f ), normalize ( _ViewVector )); int Steps = int ( mix ( uMaxStepCount , uMinStepCount , abs ( CosYV ))); if ( CamAltitude < uStartHeight && IntersectBottom ) { if ( ! rayMarching ( 0 , Steps , IntersectPosBottom , BGColor , RayDirection , _outFragColor )) _outFragColor = vec4 ( BGColor , 1.0 f ); } else if ( CamAltitude > uEndHeight && IntersectTop ) { if ( ! rayMarching ( 3 , Steps , IntersectPosTop , BGColor , RayDirection , _outFragColor )) _outFragColor = vec4 ( BGColor , 1.0 f ); } else if ( CamAltitude > uStartHeight && CamAltitude < uEndHeight ) { if ( RayDirection . y > 0.0 f ) { if ( ! rayMarching ( 1 , Steps , uCameraPosition . xyz , BGColor , RayDirection , _outFragColor )) _outFragColor = vec4 ( BGColor , 1.0 f ); } if ( RayDirection . y < 0.0 f ) { if ( ! rayMarching ( 2 , Steps , uCameraPosition . xyz , BGColor , RayDirection , _outFragColor )) _outFragColor = vec4 ( BGColor , 1.0 f ); } } else { _outFragColor = vec4 ( BGColor , 1.0 f ); } } //------------------------------------------------------------------------------- //FUNCTION: /*\u83b7\u53d6\u4e09\u7ef4\u4e16\u754c\u67d0\u4e00\u70b9\u7684\u6d77\u62d4\u9ad8\u5ea6*/ //\u6ce8\uff1a\u8ba1\u7b97\u65b9\u6cd5\u4e3a\u8be5\u70b9\u4e0e\u5730\u5fc3\u7684\u8ddd\u79bb\u51cf\u53bb\u5730\u7403\u534a\u5f84 float getAltitude ( vec3 vPositionW ) { vec3 EarthCenter = vec3 ( 0.0 f , 0.0 f , 0.0 f ); return distance ( EarthCenter , vPositionW ) - uEarthRadius ; } //------------------------------------------------------------------------------- //FUNCTION: /*\u5c04\u7ebf\u4e0e\u7403\u9762\u6c42\u4ea4*/ //vec3 vRayOrigin\uff1a\u5c04\u7ebf\u7684\u539f\u70b9 //vec3 vRayDirection\uff1a\u5c04\u7ebf\u7684\u65b9\u5411 //vec3 vSphereCenter\uff1a\u7403\u4f53\u7684\u7403\u5fc3 //float vSphereRadius\uff1a\u7403\u4f53\u7684\u534a\u5f84 //out vec3 voNearestIntersection\uff1a\u8f93\u51fa\u7684\u4ea4\u70b9\u5750\u6807\uff08\u8be5\u5750\u6807\u662f\u5f53\u524d\u5c04\u7ebf\u4e0e\u7403\u7684\u6700\u8fd1\u7684\u4ea4\u70b9\u5750\u6807\uff09 //\u6ce8\uff1a //\uff081\uff09\u76f8\u4ea4\u8fd4\u56detrue\uff0c\u5426\u5219\u8fd4\u56defalse. //\uff082\uff09\u82e5\u5c04\u7ebf\u4e0e\u7403\u4f53\u7684\u4ea4\u70b9\u4e3a2\u4e2a\u5219voNearestIntersection\u8fd4\u56de\u7684\u662f\u6700\u8fd1\u7684\u90a3\u4e2a. //\uff083\uff09\u65e0\u8bba\u662f\u7403\u5185\u53d1\u51fa\u7684\u5c04\u7ebf\u8fd8\u662f\u7403\u5916\u53d1\u51fa\u7684\u5c04\u7ebf\u8be5\u51fd\u6570\u90fd\u80fd\u8fdb\u884c\u5224\u65ad\u3002 bool intersectRaySphere ( vec3 vRayOrigin , vec3 vRayDirection , vec3 vSphereCenter , float vSphereRadius , out vec3 voNearestIntersection ) { // L is the vector from the ray origin to the center of the sphere. vec3 L = vSphereCenter - vRayOrigin ; // S is the projection of the L onto the ray direction. float S = dot ( L , vRayDirection ); float L2 = dot ( L , L ); float R2 = vSphereRadius * vSphereRadius ; // M2 is squared distance from the center of the sphere to the projection. float M2 = L2 - S * S ; // (1)If the ray origin is outside the sphere and the center of the sphere is // behind the ray origin there is no intersection. // (2)If the squared distance from the center of the sphere to the projection // is greater than the radius squared the ray will miss the sphere. if (( S < 0 && L2 > R2 ) || ( M2 > R2 )) { voNearestIntersection = vec3 ( 0.0 f , 0.0 f , 0.0 f ); return false ; } // The ray hits the sphere, compute the nearest intersection point. float Q = sqrt ( R2 - M2 ); float T1 = S - Q ; float T2 = S + Q ; float T = 0 ; if ( L2 <= R2 ) T = T2 ; else T = T1 ; voNearestIntersection = vRayOrigin + ( T * vRayDirection ); return true ; } //------------------------------------------------------------------------------- //FUNCTION: float normalizedAtmosphereY ( vec3 vRay ) { //\u8003\u8651\u5730\u7403\u662f\u5706\u7684,\u6c42\u4ea4\u65f6\u9ed8\u8ba4\u5730\u7403\u5fc3\u4e3a(0, 0, 0) float Y = length ( vRay ) - uEarthRadius - uStartHeight ; return Y / uAtmosphereThickness ; } //------------------------------------------------------------------------------- //FUNCTION: //gradient = left to right 4 elements //\u9012\u589e\u8d77\u59cbx->\u9012\u589e\u7ed3\u675fy-> (\u6ee1\u503c1) ->\u9012\u51cf\u5f00\u59cbz->\u9012\u51cf\u7ed3\u675fw float gradientStep ( float vCsRayHeight , vec4 vGradient ) { return smoothstep ( vGradient . x , vGradient . y , vCsRayHeight ) - smoothstep ( vGradient . z , vGradient . w , vCsRayHeight ); } //------------------------------------------------------------------------------- //FUNCTION: //\u53c2\u6570vCsRayHeight: atmosphereY vec4 sampleCoverage ( vec3 vRay , float vCsRayHeight , float vLod ) { vec2 Unit = vRay . xz * uCoverageScale ; vec2 UV = Unit * 0.5 f + 0.5 f ; UV += uCoverageOffset ; //maxDistance=Mathf.Sqrt( (outerRadius * outerRadius) - (innerRadius * innerRadius)) \uff08 //\u5f52\u4e00\u5316\u7684\u6d77\u62d4\u9ad8\u5ea6 float Depth = distance ( vRay , uCameraPosition . xyz ) / uMaxDistance ; vec4 Coverage = textureLod ( uCoverageTexture , UV , 0.0 f ); vec4 CoverageB = vec4 ( 1.0 f , 0.0 f , 0.0 f , 0.0 f ); CoverageB . b = clamp ( smoothstep ( uHorizonCoverageStart , uHorizonCoverageEnd , Depth ) * 2.0 f , 0.0 f , 1.0 f ); float Alpha = smoothstep ( uHorizonCoverageStart , uHorizonCoverageEnd , Depth ); CoverageB = vec4 ( smoothstep ( uHorizonCoverageStart , uHorizonCoverageEnd , Depth ), 0.0 f , smoothstep ( uHorizonCoverageStart , uHorizonCoverageStart + ( uHorizonCoverageEnd - uHorizonCoverageStart ) * 0.5 f , Depth ), 0.0 f ); return mix ( Coverage , CoverageB , Alpha ); } //------------------------------------------------------------------------------- //FUNCTION: float smoothThreshold ( float vValue , float vThreshold , float vEdgeSize ) { return smoothstep ( vThreshold , vThreshold + vEdgeSize , vValue ); } //------------------------------------------------------------------------------- //FUNCTION: vec3 smoothThreshold ( vec3 vValue , float vThreshold , float vEdgeSize ) { vValue . r = smoothstep ( vThreshold , vThreshold + vEdgeSize , vValue . r ); vValue . g = smoothstep ( vThreshold , vThreshold + vEdgeSize , vValue . g ); vValue . b = smoothstep ( vThreshold , vThreshold + vEdgeSize , vValue . b ); return vValue ; } //------------------------------------------------------------------------------- //FUNCTION: float lerp3 ( float vV0 , float vV1 , float vV2 , float vA ) { //return a < 0.5f ? mix( vV0, vV1, vA * 2.0f) : mix( vV1, vV2, (vA - 0.5f) * 2.0f); if ( vA < 0.5 f ) return mix ( vV0 , vV1 , vA * 2.0 f ); else return mix ( vV1 , vV2 , ( vA - 0.5 f ) * 2.0 f ); } //------------------------------------------------------------------------------- //FUNCTION: vec4 lerp3 ( vec4 vV0 , vec4 vV1 , vec4 vV2 , float vA ) { return vec4 ( lerp3 ( vV0 . x , vV1 . x , vV2 . x , vA ), lerp3 ( vV0 . y , vV1 . y , vV2 . y , vA ), lerp3 ( vV0 . z , vV1 . z , vV2 . z , vA ), lerp3 ( vV0 . w , vV1 . w , vV2 . w , vA )); } //------------------------------------------------------------------------------- //FUNCTION: float remap ( float vOldValue , float vOldMin , float vOldMax , float vNewMin , float vNewMax ) { vOldValue = clamp ( vOldValue , vOldMin , vOldMax ); return vNewMin + ((( vOldValue - vOldMin ) / ( vOldMax - vOldMin )) * ( vNewMax - vNewMin )); } //------------------------------------------------------------------------------- //FUNCTION: float sampleCloud ( vec3 vRay , float vRayDensity , vec4 vCoverage , float vCsRayHeight , float vLod ) { vec3 Coord = vRay * uBaseScale * 0.7 f + 0.5 f * uBaseOffset . xyz ; vec4 NoiseSample = texture ( uNoiseTextureA , Coord , 0.0 f ); vec4 GradientScalar = vec4 ( 1.0 f , gradientStep ( vCsRayHeight , uCloudHeightGradient1 ), gradientStep ( vCsRayHeight , uCloudHeightGradient2 ), gradientStep ( vCsRayHeight , uCloudHeightGradient3 )); NoiseSample *= GradientScalar ; vec3 Detail = texture ( uNoiseTextureB , Coord , 0.0 f ). rgb ; Detail *= GradientScalar . gba ; float Noise = clamp (( NoiseSample . r + NoiseSample . g + NoiseSample . b + NoiseSample . a ) / 4.0 f , 0.0 f , 1.0 f ); vec4 Gradient = lerp3 ( uCloudHeightGradient3 , uCloudHeightGradient2 , uCloudHeightGradient1 , FLOAT4_TYPE ( vCoverage )); Noise *= gradientStep ( vCsRayHeight , Gradient ); Noise = smoothThreshold ( Noise , uSampleThreshold , uErosionEdgeSize ); Noise = clamp ( Noise - ( 1.0 f - FLOAT4_COVERAGE ( vCoverage )), 0.0 f , 1.0 f ) * FLOAT4_COVERAGE ( vCoverage ); if ( Noise > 0.0 f && Noise < 1.0 f && vLod == 0 /*false*//*true*/ ) { vec3 Detail = 1.0 f - texture ( uNoiseTextureB , Coord , 0.0 f ). rgb ; Detail *= GradientScalar . gba ; //float detailValue = Detail.r * 0.625 + Detail.g * 0.25 + detail.b * 0.125; float DetailValue = Detail . r + Detail . g + Detail . b ; DetailValue /= 3.0 f ; DetailValue *= smoothstep ( 0.0 f , 1.0 f , Noise ) * 0.5 f ; Noise -= DetailValue ; Noise = clamp ( Noise , 0.0 f , 1.0 f ); } return Noise * uSampleScalar * smoothstep ( 0.0 f , uCloudBottomFade * 1.0 f , vCsRayHeight ) /**0.2*/ ; //return Noise*0.5; } //------------------------------------------------------------------------------- //FUNCTION: float henyeyGreensteinPhase ( float vCosAngle , float vG ) { float G2 = vG * vG ; return ( 1.0 f - G2 ) / pow ( 1.0 f + G2 - 2.0 f * vG * vCosAngle , 1.5 f ); } //------------------------------------------------------------------------------- //FUNCTION: float beerTerm ( float vDensityAtSample ) { return exp ( - uDensity * vDensityAtSample ); } //------------------------------------------------------------------------------- //FUNCTION: float powderTerm ( float vDensityAtSample , float vCosTheta ) { return 1.0 f - exp ( - vDensityAtSample * 2.0 f ); } //------------------------------------------------------------------------------- //FUNCTION: vec3 sampleLight ( vec3 vOrigin , float vOriginDensity , float vPixelAlpha , float vCosAngle , vec2 vDebugUV , float vRayDistance , vec3 vRandomUnitSphere [ 6 ]) { const float Iterations = 5.0 f ; vec3 LightDirection = normalize ( vec3 ( 0.0 f , sin ( uTime ), cos ( uTime ))); vec3 RayStep = - LightDirection . xyz * ( uSunRayLength / Iterations ); vec3 Ray = vOrigin + RayStep ; float AtmosphereY = 0.0 f ; float Lod = step ( 0.3 , vOriginDensity ) * 3.0 f ; Lod = 0.0 f ; float Value = vOriginDensity ; vec4 Coverage ; vec3 RandomOffset = vec3 ( 0.0 f , 0.0 f , 0.0 f ); float ConeRadius = 0.0 f ; const float ConeStep = uConeRadius / Iterations ; float Energy = 0.0 f ; float Thickness = 0.0 f ; for ( unsigned int i = 0 ; i < Iterations ; i ++ ) { RandomOffset = vRandomUnitSphere [ i ] * ConeRadius ; Ray += RayStep ; AtmosphereY = normalizedAtmosphereY ( Ray ); Coverage = sampleCoverage ( Ray + RandomOffset , AtmosphereY , Lod ); Value = sampleCloud ( Ray + RandomOffset , vOriginDensity , Coverage , AtmosphereY , Lod ); Value *= float ( AtmosphereY <= 1.0 f ); Thickness += Value ; if ( Thickness >= 1.0 f ) break ; } float G1 = 0.2 f ; float G2 = 0.6 f ; float ForwardP = henyeyGreensteinPhase ( vCosAngle , G1 ); float BackwardsP = henyeyGreensteinPhase ( vCosAngle , G2 ); float P = ForwardP + BackwardsP ; vec3 SUN_LIGHT = vec3 ( 246.0 f / 255.0 f , 227.0 f / 255.0 f , 187.0 f / 255.0 f ); return uLightColor . xyz * beerTerm ( Thickness ) * powderTerm ( vOriginDensity , vCosAngle ) * P ; } //------------------------------------------------------------------------------- //FUNCTION: vec3 sampleAmbientLight ( float vAtmosphereY , float vDepth ) { return mix ( uCloudBaseColor . xyz , uCloudTopColor . xyz , vAtmosphereY ); } //------------------------------------------------------------------------------- //FUNCTION: float sun () { vec3 RayDirection = normalize ( _ViewVector ); vec3 Sundir = normalize ( vec3 ( 1.0 f , 1.0 f , - 1.0 f )); float Sun = clamp ( dot ( Sundir , RayDirection ), 0.0 f , 1.0 f ); return Sun ; } //------------------------------------------------------------------------------- //FUNCTION: vec3 bgColor () { vec3 RayDirection = normalize ( _ViewVector ); vec3 Color = vec3 ( 0.6 f , 0.75 f , 1.0 f ) - clamp ( RayDirection . y - 0.5 f , - 0.5 f , 1.0 f ) * 0.4 f * vec3 ( 1.0 f , 0.5 f , 1.0 f ) + 0.15 f * 0.5 f ; Color += 0.2 f * vec3 ( 1.0 f , 0.6 f , 0.1 f ) * pow ( sun (), 8.0 f ); return Color ; } //------------------------------------------------------------------------------- //FUNCTION: bool rayMarching ( int vTraceMode , int vSteps , vec3 vRay , vec3 vBGColor , vec3 vRayDirection , out vec4 voFragColor ) { vec2 UV = _TexCoord ; //\u5730\u7403\u7403\u5fc3\u9ed8\u8ba4vec3(0, 0, 0) if ( vRay . y < uEarthRadius ) return false ; vec3 RayStep = vRayDirection * uRayStepLength ; float I = 0.0 f ; float AtmosphereY = 0.0 f ; float Transmittance = 1.0 f ; float RayStepScalar = 1.0 f ; float CosAngle = dot ( vRayDirection , - uLightDirection . xyz ); float NormalizedDepth = 0.0 f ; float ZeroThreshold = 4.0 f ; float ZeroAccumulator = 0.0 f ; const vec3 RandomUnitSphere [ 6 ] = { uRandom0 . xyz , uRandom1 . xyz , uRandom2 . xyz , uRandom3 . xyz , uRandom4 . xyz , uRandom5 . xyz }; float Value = 1.0 f ; while ( true ) { if ( I >= 128.0 f || voFragColor . a >= 1.0 f || AtmosphereY >= 1.0 f ) break ; NormalizedDepth = distance ( uCameraPosition . xyz , vRay ) / uMaxDistance ; //float step (float edge, float x) //\u5982\u679cx < edge\uff0c\u8fd4\u56de0.0\uff0c\u5426\u5219\u8fd4\u56de1.0 float Lod = step ( uLODDistance , NormalizedDepth ); vec4 Coverage = sampleCoverage ( vRay , AtmosphereY , Lod ); Value = sampleCloud ( vRay , voFragColor . a , Coverage , AtmosphereY , Lod ); vec4 Particle = vec4 ( Value , Value , Value , Value ); if ( Value > 0.0 f ) { ZeroAccumulator = 0.0 f ; //\u56de\u9000 if ( RayStepScalar > 1.0 f ) { vRay -= RayStep * RayStepScalar ; I -= RayStepScalar ; AtmosphereY = normalizedAtmosphereY ( vRay ); NormalizedDepth = distance ( uCameraPosition . xyz , vRay ) / uMaxDistance ; Lod = step ( uLODDistance , NormalizedDepth ); Coverage = sampleCoverage ( vRay , AtmosphereY , Lod ); Value = sampleCloud ( vRay , voFragColor . a , Coverage , AtmosphereY , Lod ); Particle = vec4 ( Value , Value , Value , Value ); } float T = 1.0 f - Particle . a ; Transmittance *= T ; vec3 AmbientLight = sampleAmbientLight ( AtmosphereY , NormalizedDepth ); vec3 SunLight = sampleLight ( vRay , Particle . a , voFragColor . a , CosAngle , UV , NormalizedDepth , RandomUnitSphere ); SunLight *= 1.0 f ; AmbientLight *= 1.0 f ; Particle . a = 1.0 f - T ; Particle . rgb = SunLight + AmbientLight ; Particle . rgb *= Particle . a ; voFragColor = ( 1.0 f - voFragColor . a ) * Particle + voFragColor ; } ZeroAccumulator += float ( Value <= 0.0 f ); RayStepScalar = 1.0 f + step ( ZeroThreshold , ZeroAccumulator ); I += RayStepScalar ; vRay += RayStep * RayStepScalar ; AtmosphereY = normalizedAtmosphereY ( vRay ); if ( vTraceMode == 0 ) //below { if ( getAltitude ( vRay ) >= uEndHeight ) break ; } else if ( vTraceMode == 1 ) //inside_up { if ( getAltitude ( vRay ) >= uEndHeight ) break ; } else if ( vTraceMode == 2 ) //inside_down { if ( getAltitude ( vRay ) <= uStartHeight ) break ; } else if ( vTraceMode == 3 ) //above { if ( getAltitude ( vRay ) <= uStartHeight ) break ; } } float Fade = smoothstep ( uRayMinimumY , uRayMinimumY + ( 1.0 f - uRayMinimumY ) * uHorizonFadeScalar , vRayDirection . y ); voFragColor *= uHorizonFadeStartAlpha + Fade * uOneMinusHorizonFadeStartAlpha ; //background sky & sun glare voFragColor . rgb = mix ( bgColor (), voFragColor . rgb / ( voFragColor . a + 0.00001 f ), voFragColor . a ); //sun glare voFragColor . rgb += 0.2 f * vec3 ( 1.0 f , 0.4 f , 0.2 f ) * pow ( sun (), 3.0 f ); return true ; }","title":"Cloud Rendering"},{"location":"gist/cloud-rendering/#cloud-rendering","text":"#version 430 core uniform sampler3D uNoiseTextureA ; /*\u566a\u58f0\u7eb9\u7406A*/ uniform sampler3D uNoiseTextureB ; /*\u566a\u58f0\u7eb9\u7406B*/ uniform sampler2D uCoverageTexture ; /*\u5929\u6c14\u7eb9\u7406*/ uniform int uMinStepCount = 96 ; uniform int uMaxStepCount = 128 ; uniform float uTime ; layout ( std140 , binding = 0 ) uniform uCloudPropertiesUBO { //vec4\uff08vec3\u4e5f\u662f\u9700\u8981vec4\u5bf9\u9f50\uff0c\u6240\u4ee5\u7d22\u6027\u628avec3\u90fd\u76f4\u63a5\u5b9a\u4e49\u4e3avec4\uff09 vec4 uCloudHeightGradient1 ; // x,y,z,w = 4 positions of a black,white,white,black gradient vec4 uCloudHeightGradient2 ; // x,y,z,w = 4 positions of a black,white,white,black gradient vec4 uCloudHeightGradient3 ; // x,y,z,w = 4 positions of a black,white,white,black gradient vec4 uCloudBaseColor ; vec4 uCloudTopColor ; //vec2 vec2 uCoverageOffset ; vec2 uAlignmentVec2 ; //float 32 float uEarthRadius ; float uStartHeight ; float uEndHeight ; float uAtmosphereThickness ; float uMaxDistance ; float uCloudBottomFade ; float uBaseScale ; float uCoverageScale ; float uHorizonFadeStartAlpha ; float uOneMinusHorizonFadeStartAlpha ; float uHorizonFadeScalar ; // Fades clouds on horizon, 1.0 -> 10.0 (1.0 = smooth fade, 10 = no fade) float uLightScalar ; float uAmbientScalar ; float uSunRayLength ; float uConeRadius ; float uMaxIterations ; float uMaxRayDistance ; float uRayStepLength ; float uSampleScalar ; float uSampleThreshold ; float uDetailScale ; float uErosionEdgeSize ; float uCloudDistortion ; float uCloudDistortionScale ; float uDensity ; float uForwardScatteringG ; float uBackwardScatteringG ; float uDarkOutlineScalar ; float uHorizonCoverageStart ; float uHorizonCoverageEnd ; float uLODDistance ; float uRayMinimumY ; }; layout ( std140 , binding = 1 ) uniform uAnimatedPropertiesUBO { vec4 uCameraPosition ; vec4 uBaseOffset ; vec4 uDetailOffset ; vec4 uLightDirection ; vec4 uLightColor ; }; layout ( std140 , binding = 2 ) uniform uRandomsUBO { vec4 uRandom0 ; vec4 uRandom1 ; vec4 uRandom2 ; vec4 uRandom3 ; vec4 uRandom4 ; vec4 uRandom5 ; }; in vec2 _TexCoord ; /*\u7eb9\u7406\u5750\u6807*/ in vec3 _ViewVector ; /*\u89c6\u7ebf\u5411\u91cf*/ out vec4 _outFragColor ; #define FLOAT4_COVERAGE( f) f.r #define FLOAT4_RAIN( f) f.g #define FLOAT4_TYPE( f) f.b float getAltitude ( vec3 vPositionW ); bool intersectRaySphere ( vec3 vRayOrigin , vec3 vRayDirection , vec3 vSphereCenter , float vSphereRadius , out vec3 voNearestIntersection ); float normalizedAtmosphereY ( vec3 vRay ); float gradientStep ( float vCsRayHeight , vec4 vGradient ); vec4 sampleCoverage ( vec3 vRay , float vCsRayHeight , float vLod ); float smoothThreshold ( float vValue , float vThreshold , float vEdgeSize ); vec3 smoothThreshold ( vec3 vValue , float vThreshold , float vEdgeSize ); float lerp3 ( float vV0 , float vV1 , float vV2 , float vA ); vec4 lerp3 ( vec4 vV0 , vec4 vV1 , vec4 vV2 , float vA ); float remap ( float vOldValue , float vOldMin , float vOldMax , float vNewMin , float vNewMax ); float sampleCloud ( vec3 vRay , float vRayDensity , vec4 vCoverage , float vCsRayHeight , float vLod ); float henyeyGreensteinPhase ( float vCosAngle , float vG ); float beerTerm ( float vDensityAtSample ); float powderTerm ( float vDensityAtSample , float vCosTheta ); vec3 sampleLight ( vec3 vOrigin , float vOriginDensity , float vPixelAlpha , float vCosAngle , vec2 vDebugUV , float vRayDistance , vec3 vRandomUnitSphere [ 6 ]); vec3 sampleAmbientLight ( float vAtmosphereY , float vDepth ); float sun (); vec3 bgColor (); bool rayMarching ( int vTraceMode , int vSteps , vec3 vRay , vec3 vBGColor , vec3 vRayDirection , out vec4 voFragColor ); #define BGColor bgColor() void main () { _outFragColor = vec4 ( 0.0 f , 0.0 f , 0.0 f , 0.0 f ); vec3 RayDirection = normalize ( _ViewVector ); vec3 IntersectPosBottom ; vec3 IntersectPosTop ; float CamAltitude = getAltitude ( uCameraPosition . xyz ); bool IntersectBottom = intersectRaySphere ( uCameraPosition . xyz , RayDirection , vec3 ( 0.0 f , 0.0 f , 0.0 f ), uEarthRadius + uStartHeight , IntersectPosBottom ); bool IntersectTop = intersectRaySphere ( uCameraPosition . xyz , RayDirection , vec3 ( 0.0 f , 0.0 f , 0.0 f ), uEarthRadius + uEndHeight , IntersectPosTop ); float CosYV = dot ( vec3 ( 0.0 f , 1.0 f , 0.0 f ), normalize ( _ViewVector )); int Steps = int ( mix ( uMaxStepCount , uMinStepCount , abs ( CosYV ))); if ( CamAltitude < uStartHeight && IntersectBottom ) { if ( ! rayMarching ( 0 , Steps , IntersectPosBottom , BGColor , RayDirection , _outFragColor )) _outFragColor = vec4 ( BGColor , 1.0 f ); } else if ( CamAltitude > uEndHeight && IntersectTop ) { if ( ! rayMarching ( 3 , Steps , IntersectPosTop , BGColor , RayDirection , _outFragColor )) _outFragColor = vec4 ( BGColor , 1.0 f ); } else if ( CamAltitude > uStartHeight && CamAltitude < uEndHeight ) { if ( RayDirection . y > 0.0 f ) { if ( ! rayMarching ( 1 , Steps , uCameraPosition . xyz , BGColor , RayDirection , _outFragColor )) _outFragColor = vec4 ( BGColor , 1.0 f ); } if ( RayDirection . y < 0.0 f ) { if ( ! rayMarching ( 2 , Steps , uCameraPosition . xyz , BGColor , RayDirection , _outFragColor )) _outFragColor = vec4 ( BGColor , 1.0 f ); } } else { _outFragColor = vec4 ( BGColor , 1.0 f ); } } //------------------------------------------------------------------------------- //FUNCTION: /*\u83b7\u53d6\u4e09\u7ef4\u4e16\u754c\u67d0\u4e00\u70b9\u7684\u6d77\u62d4\u9ad8\u5ea6*/ //\u6ce8\uff1a\u8ba1\u7b97\u65b9\u6cd5\u4e3a\u8be5\u70b9\u4e0e\u5730\u5fc3\u7684\u8ddd\u79bb\u51cf\u53bb\u5730\u7403\u534a\u5f84 float getAltitude ( vec3 vPositionW ) { vec3 EarthCenter = vec3 ( 0.0 f , 0.0 f , 0.0 f ); return distance ( EarthCenter , vPositionW ) - uEarthRadius ; } //------------------------------------------------------------------------------- //FUNCTION: /*\u5c04\u7ebf\u4e0e\u7403\u9762\u6c42\u4ea4*/ //vec3 vRayOrigin\uff1a\u5c04\u7ebf\u7684\u539f\u70b9 //vec3 vRayDirection\uff1a\u5c04\u7ebf\u7684\u65b9\u5411 //vec3 vSphereCenter\uff1a\u7403\u4f53\u7684\u7403\u5fc3 //float vSphereRadius\uff1a\u7403\u4f53\u7684\u534a\u5f84 //out vec3 voNearestIntersection\uff1a\u8f93\u51fa\u7684\u4ea4\u70b9\u5750\u6807\uff08\u8be5\u5750\u6807\u662f\u5f53\u524d\u5c04\u7ebf\u4e0e\u7403\u7684\u6700\u8fd1\u7684\u4ea4\u70b9\u5750\u6807\uff09 //\u6ce8\uff1a //\uff081\uff09\u76f8\u4ea4\u8fd4\u56detrue\uff0c\u5426\u5219\u8fd4\u56defalse. //\uff082\uff09\u82e5\u5c04\u7ebf\u4e0e\u7403\u4f53\u7684\u4ea4\u70b9\u4e3a2\u4e2a\u5219voNearestIntersection\u8fd4\u56de\u7684\u662f\u6700\u8fd1\u7684\u90a3\u4e2a. //\uff083\uff09\u65e0\u8bba\u662f\u7403\u5185\u53d1\u51fa\u7684\u5c04\u7ebf\u8fd8\u662f\u7403\u5916\u53d1\u51fa\u7684\u5c04\u7ebf\u8be5\u51fd\u6570\u90fd\u80fd\u8fdb\u884c\u5224\u65ad\u3002 bool intersectRaySphere ( vec3 vRayOrigin , vec3 vRayDirection , vec3 vSphereCenter , float vSphereRadius , out vec3 voNearestIntersection ) { // L is the vector from the ray origin to the center of the sphere. vec3 L = vSphereCenter - vRayOrigin ; // S is the projection of the L onto the ray direction. float S = dot ( L , vRayDirection ); float L2 = dot ( L , L ); float R2 = vSphereRadius * vSphereRadius ; // M2 is squared distance from the center of the sphere to the projection. float M2 = L2 - S * S ; // (1)If the ray origin is outside the sphere and the center of the sphere is // behind the ray origin there is no intersection. // (2)If the squared distance from the center of the sphere to the projection // is greater than the radius squared the ray will miss the sphere. if (( S < 0 && L2 > R2 ) || ( M2 > R2 )) { voNearestIntersection = vec3 ( 0.0 f , 0.0 f , 0.0 f ); return false ; } // The ray hits the sphere, compute the nearest intersection point. float Q = sqrt ( R2 - M2 ); float T1 = S - Q ; float T2 = S + Q ; float T = 0 ; if ( L2 <= R2 ) T = T2 ; else T = T1 ; voNearestIntersection = vRayOrigin + ( T * vRayDirection ); return true ; } //------------------------------------------------------------------------------- //FUNCTION: float normalizedAtmosphereY ( vec3 vRay ) { //\u8003\u8651\u5730\u7403\u662f\u5706\u7684,\u6c42\u4ea4\u65f6\u9ed8\u8ba4\u5730\u7403\u5fc3\u4e3a(0, 0, 0) float Y = length ( vRay ) - uEarthRadius - uStartHeight ; return Y / uAtmosphereThickness ; } //------------------------------------------------------------------------------- //FUNCTION: //gradient = left to right 4 elements //\u9012\u589e\u8d77\u59cbx->\u9012\u589e\u7ed3\u675fy-> (\u6ee1\u503c1) ->\u9012\u51cf\u5f00\u59cbz->\u9012\u51cf\u7ed3\u675fw float gradientStep ( float vCsRayHeight , vec4 vGradient ) { return smoothstep ( vGradient . x , vGradient . y , vCsRayHeight ) - smoothstep ( vGradient . z , vGradient . w , vCsRayHeight ); } //------------------------------------------------------------------------------- //FUNCTION: //\u53c2\u6570vCsRayHeight: atmosphereY vec4 sampleCoverage ( vec3 vRay , float vCsRayHeight , float vLod ) { vec2 Unit = vRay . xz * uCoverageScale ; vec2 UV = Unit * 0.5 f + 0.5 f ; UV += uCoverageOffset ; //maxDistance=Mathf.Sqrt( (outerRadius * outerRadius) - (innerRadius * innerRadius)) \uff08 //\u5f52\u4e00\u5316\u7684\u6d77\u62d4\u9ad8\u5ea6 float Depth = distance ( vRay , uCameraPosition . xyz ) / uMaxDistance ; vec4 Coverage = textureLod ( uCoverageTexture , UV , 0.0 f ); vec4 CoverageB = vec4 ( 1.0 f , 0.0 f , 0.0 f , 0.0 f ); CoverageB . b = clamp ( smoothstep ( uHorizonCoverageStart , uHorizonCoverageEnd , Depth ) * 2.0 f , 0.0 f , 1.0 f ); float Alpha = smoothstep ( uHorizonCoverageStart , uHorizonCoverageEnd , Depth ); CoverageB = vec4 ( smoothstep ( uHorizonCoverageStart , uHorizonCoverageEnd , Depth ), 0.0 f , smoothstep ( uHorizonCoverageStart , uHorizonCoverageStart + ( uHorizonCoverageEnd - uHorizonCoverageStart ) * 0.5 f , Depth ), 0.0 f ); return mix ( Coverage , CoverageB , Alpha ); } //------------------------------------------------------------------------------- //FUNCTION: float smoothThreshold ( float vValue , float vThreshold , float vEdgeSize ) { return smoothstep ( vThreshold , vThreshold + vEdgeSize , vValue ); } //------------------------------------------------------------------------------- //FUNCTION: vec3 smoothThreshold ( vec3 vValue , float vThreshold , float vEdgeSize ) { vValue . r = smoothstep ( vThreshold , vThreshold + vEdgeSize , vValue . r ); vValue . g = smoothstep ( vThreshold , vThreshold + vEdgeSize , vValue . g ); vValue . b = smoothstep ( vThreshold , vThreshold + vEdgeSize , vValue . b ); return vValue ; } //------------------------------------------------------------------------------- //FUNCTION: float lerp3 ( float vV0 , float vV1 , float vV2 , float vA ) { //return a < 0.5f ? mix( vV0, vV1, vA * 2.0f) : mix( vV1, vV2, (vA - 0.5f) * 2.0f); if ( vA < 0.5 f ) return mix ( vV0 , vV1 , vA * 2.0 f ); else return mix ( vV1 , vV2 , ( vA - 0.5 f ) * 2.0 f ); } //------------------------------------------------------------------------------- //FUNCTION: vec4 lerp3 ( vec4 vV0 , vec4 vV1 , vec4 vV2 , float vA ) { return vec4 ( lerp3 ( vV0 . x , vV1 . x , vV2 . x , vA ), lerp3 ( vV0 . y , vV1 . y , vV2 . y , vA ), lerp3 ( vV0 . z , vV1 . z , vV2 . z , vA ), lerp3 ( vV0 . w , vV1 . w , vV2 . w , vA )); } //------------------------------------------------------------------------------- //FUNCTION: float remap ( float vOldValue , float vOldMin , float vOldMax , float vNewMin , float vNewMax ) { vOldValue = clamp ( vOldValue , vOldMin , vOldMax ); return vNewMin + ((( vOldValue - vOldMin ) / ( vOldMax - vOldMin )) * ( vNewMax - vNewMin )); } //------------------------------------------------------------------------------- //FUNCTION: float sampleCloud ( vec3 vRay , float vRayDensity , vec4 vCoverage , float vCsRayHeight , float vLod ) { vec3 Coord = vRay * uBaseScale * 0.7 f + 0.5 f * uBaseOffset . xyz ; vec4 NoiseSample = texture ( uNoiseTextureA , Coord , 0.0 f ); vec4 GradientScalar = vec4 ( 1.0 f , gradientStep ( vCsRayHeight , uCloudHeightGradient1 ), gradientStep ( vCsRayHeight , uCloudHeightGradient2 ), gradientStep ( vCsRayHeight , uCloudHeightGradient3 )); NoiseSample *= GradientScalar ; vec3 Detail = texture ( uNoiseTextureB , Coord , 0.0 f ). rgb ; Detail *= GradientScalar . gba ; float Noise = clamp (( NoiseSample . r + NoiseSample . g + NoiseSample . b + NoiseSample . a ) / 4.0 f , 0.0 f , 1.0 f ); vec4 Gradient = lerp3 ( uCloudHeightGradient3 , uCloudHeightGradient2 , uCloudHeightGradient1 , FLOAT4_TYPE ( vCoverage )); Noise *= gradientStep ( vCsRayHeight , Gradient ); Noise = smoothThreshold ( Noise , uSampleThreshold , uErosionEdgeSize ); Noise = clamp ( Noise - ( 1.0 f - FLOAT4_COVERAGE ( vCoverage )), 0.0 f , 1.0 f ) * FLOAT4_COVERAGE ( vCoverage ); if ( Noise > 0.0 f && Noise < 1.0 f && vLod == 0 /*false*//*true*/ ) { vec3 Detail = 1.0 f - texture ( uNoiseTextureB , Coord , 0.0 f ). rgb ; Detail *= GradientScalar . gba ; //float detailValue = Detail.r * 0.625 + Detail.g * 0.25 + detail.b * 0.125; float DetailValue = Detail . r + Detail . g + Detail . b ; DetailValue /= 3.0 f ; DetailValue *= smoothstep ( 0.0 f , 1.0 f , Noise ) * 0.5 f ; Noise -= DetailValue ; Noise = clamp ( Noise , 0.0 f , 1.0 f ); } return Noise * uSampleScalar * smoothstep ( 0.0 f , uCloudBottomFade * 1.0 f , vCsRayHeight ) /**0.2*/ ; //return Noise*0.5; } //------------------------------------------------------------------------------- //FUNCTION: float henyeyGreensteinPhase ( float vCosAngle , float vG ) { float G2 = vG * vG ; return ( 1.0 f - G2 ) / pow ( 1.0 f + G2 - 2.0 f * vG * vCosAngle , 1.5 f ); } //------------------------------------------------------------------------------- //FUNCTION: float beerTerm ( float vDensityAtSample ) { return exp ( - uDensity * vDensityAtSample ); } //------------------------------------------------------------------------------- //FUNCTION: float powderTerm ( float vDensityAtSample , float vCosTheta ) { return 1.0 f - exp ( - vDensityAtSample * 2.0 f ); } //------------------------------------------------------------------------------- //FUNCTION: vec3 sampleLight ( vec3 vOrigin , float vOriginDensity , float vPixelAlpha , float vCosAngle , vec2 vDebugUV , float vRayDistance , vec3 vRandomUnitSphere [ 6 ]) { const float Iterations = 5.0 f ; vec3 LightDirection = normalize ( vec3 ( 0.0 f , sin ( uTime ), cos ( uTime ))); vec3 RayStep = - LightDirection . xyz * ( uSunRayLength / Iterations ); vec3 Ray = vOrigin + RayStep ; float AtmosphereY = 0.0 f ; float Lod = step ( 0.3 , vOriginDensity ) * 3.0 f ; Lod = 0.0 f ; float Value = vOriginDensity ; vec4 Coverage ; vec3 RandomOffset = vec3 ( 0.0 f , 0.0 f , 0.0 f ); float ConeRadius = 0.0 f ; const float ConeStep = uConeRadius / Iterations ; float Energy = 0.0 f ; float Thickness = 0.0 f ; for ( unsigned int i = 0 ; i < Iterations ; i ++ ) { RandomOffset = vRandomUnitSphere [ i ] * ConeRadius ; Ray += RayStep ; AtmosphereY = normalizedAtmosphereY ( Ray ); Coverage = sampleCoverage ( Ray + RandomOffset , AtmosphereY , Lod ); Value = sampleCloud ( Ray + RandomOffset , vOriginDensity , Coverage , AtmosphereY , Lod ); Value *= float ( AtmosphereY <= 1.0 f ); Thickness += Value ; if ( Thickness >= 1.0 f ) break ; } float G1 = 0.2 f ; float G2 = 0.6 f ; float ForwardP = henyeyGreensteinPhase ( vCosAngle , G1 ); float BackwardsP = henyeyGreensteinPhase ( vCosAngle , G2 ); float P = ForwardP + BackwardsP ; vec3 SUN_LIGHT = vec3 ( 246.0 f / 255.0 f , 227.0 f / 255.0 f , 187.0 f / 255.0 f ); return uLightColor . xyz * beerTerm ( Thickness ) * powderTerm ( vOriginDensity , vCosAngle ) * P ; } //------------------------------------------------------------------------------- //FUNCTION: vec3 sampleAmbientLight ( float vAtmosphereY , float vDepth ) { return mix ( uCloudBaseColor . xyz , uCloudTopColor . xyz , vAtmosphereY ); } //------------------------------------------------------------------------------- //FUNCTION: float sun () { vec3 RayDirection = normalize ( _ViewVector ); vec3 Sundir = normalize ( vec3 ( 1.0 f , 1.0 f , - 1.0 f )); float Sun = clamp ( dot ( Sundir , RayDirection ), 0.0 f , 1.0 f ); return Sun ; } //------------------------------------------------------------------------------- //FUNCTION: vec3 bgColor () { vec3 RayDirection = normalize ( _ViewVector ); vec3 Color = vec3 ( 0.6 f , 0.75 f , 1.0 f ) - clamp ( RayDirection . y - 0.5 f , - 0.5 f , 1.0 f ) * 0.4 f * vec3 ( 1.0 f , 0.5 f , 1.0 f ) + 0.15 f * 0.5 f ; Color += 0.2 f * vec3 ( 1.0 f , 0.6 f , 0.1 f ) * pow ( sun (), 8.0 f ); return Color ; } //------------------------------------------------------------------------------- //FUNCTION: bool rayMarching ( int vTraceMode , int vSteps , vec3 vRay , vec3 vBGColor , vec3 vRayDirection , out vec4 voFragColor ) { vec2 UV = _TexCoord ; //\u5730\u7403\u7403\u5fc3\u9ed8\u8ba4vec3(0, 0, 0) if ( vRay . y < uEarthRadius ) return false ; vec3 RayStep = vRayDirection * uRayStepLength ; float I = 0.0 f ; float AtmosphereY = 0.0 f ; float Transmittance = 1.0 f ; float RayStepScalar = 1.0 f ; float CosAngle = dot ( vRayDirection , - uLightDirection . xyz ); float NormalizedDepth = 0.0 f ; float ZeroThreshold = 4.0 f ; float ZeroAccumulator = 0.0 f ; const vec3 RandomUnitSphere [ 6 ] = { uRandom0 . xyz , uRandom1 . xyz , uRandom2 . xyz , uRandom3 . xyz , uRandom4 . xyz , uRandom5 . xyz }; float Value = 1.0 f ; while ( true ) { if ( I >= 128.0 f || voFragColor . a >= 1.0 f || AtmosphereY >= 1.0 f ) break ; NormalizedDepth = distance ( uCameraPosition . xyz , vRay ) / uMaxDistance ; //float step (float edge, float x) //\u5982\u679cx < edge\uff0c\u8fd4\u56de0.0\uff0c\u5426\u5219\u8fd4\u56de1.0 float Lod = step ( uLODDistance , NormalizedDepth ); vec4 Coverage = sampleCoverage ( vRay , AtmosphereY , Lod ); Value = sampleCloud ( vRay , voFragColor . a , Coverage , AtmosphereY , Lod ); vec4 Particle = vec4 ( Value , Value , Value , Value ); if ( Value > 0.0 f ) { ZeroAccumulator = 0.0 f ; //\u56de\u9000 if ( RayStepScalar > 1.0 f ) { vRay -= RayStep * RayStepScalar ; I -= RayStepScalar ; AtmosphereY = normalizedAtmosphereY ( vRay ); NormalizedDepth = distance ( uCameraPosition . xyz , vRay ) / uMaxDistance ; Lod = step ( uLODDistance , NormalizedDepth ); Coverage = sampleCoverage ( vRay , AtmosphereY , Lod ); Value = sampleCloud ( vRay , voFragColor . a , Coverage , AtmosphereY , Lod ); Particle = vec4 ( Value , Value , Value , Value ); } float T = 1.0 f - Particle . a ; Transmittance *= T ; vec3 AmbientLight = sampleAmbientLight ( AtmosphereY , NormalizedDepth ); vec3 SunLight = sampleLight ( vRay , Particle . a , voFragColor . a , CosAngle , UV , NormalizedDepth , RandomUnitSphere ); SunLight *= 1.0 f ; AmbientLight *= 1.0 f ; Particle . a = 1.0 f - T ; Particle . rgb = SunLight + AmbientLight ; Particle . rgb *= Particle . a ; voFragColor = ( 1.0 f - voFragColor . a ) * Particle + voFragColor ; } ZeroAccumulator += float ( Value <= 0.0 f ); RayStepScalar = 1.0 f + step ( ZeroThreshold , ZeroAccumulator ); I += RayStepScalar ; vRay += RayStep * RayStepScalar ; AtmosphereY = normalizedAtmosphereY ( vRay ); if ( vTraceMode == 0 ) //below { if ( getAltitude ( vRay ) >= uEndHeight ) break ; } else if ( vTraceMode == 1 ) //inside_up { if ( getAltitude ( vRay ) >= uEndHeight ) break ; } else if ( vTraceMode == 2 ) //inside_down { if ( getAltitude ( vRay ) <= uStartHeight ) break ; } else if ( vTraceMode == 3 ) //above { if ( getAltitude ( vRay ) <= uStartHeight ) break ; } } float Fade = smoothstep ( uRayMinimumY , uRayMinimumY + ( 1.0 f - uRayMinimumY ) * uHorizonFadeScalar , vRayDirection . y ); voFragColor *= uHorizonFadeStartAlpha + Fade * uOneMinusHorizonFadeStartAlpha ; //background sky & sun glare voFragColor . rgb = mix ( bgColor (), voFragColor . rgb / ( voFragColor . a + 0.00001 f ), voFragColor . a ); //sun glare voFragColor . rgb += 0.2 f * vec3 ( 1.0 f , 0.4 f , 0.2 f ) * pow ( sun (), 3.0 f ); return true ; }","title":"Cloud Rendering"},{"location":"gist/desktop-repair/","text":"\u91cd\u88c5 Ubuntu 18.04 Gnome Desktop sudo apt install tasksel sudo tasksel install ubuntu-desktop sudo service gdm3 start Reference","title":"\u91cd\u88c5 Ubuntu 18.04 Gnome Desktop"},{"location":"gist/desktop-repair/#ubuntu-1804-gnome-desktop","text":"sudo apt install tasksel sudo tasksel install ubuntu-desktop sudo service gdm3 start Reference","title":"\u91cd\u88c5 Ubuntu 18.04 Gnome Desktop"},{"location":"gist/docker-basic/","text":"Docker Copy Docker Image stack overflow Docker Run eg. \u521b\u5efa\u65b0\u7684tensorflow\u5bb9\u5668\uff0c\u6620\u5c04\u76ee\u5f55\u3001\u7aef\u53e3\uff0c\u9000\u51fa\u540e\u6e05\u7406\u5bb9\u5668\uff0c\u5206\u914d\u4ea4\u4e92\u7ec8\u7aef nvidia-docker run --rm -p 8888 :8888 -v ~/notebooks:/notebooks -it tensorflow/tensorflow:latest-gpu run\u547d\u4ee4\u4f7f\u7528\u8bf4\u660e\uff1a docker run [ OPTIONS ] IMAGE [ COMMAND ] [ ARG... ] -d: \u540e\u53f0\u8fd0\u884c\u5bb9\u5668\uff0c\u5e76\u8fd4\u56de\u5bb9\u5668ID\uff1b -i: \u4ee5\u4ea4\u4e92\u6a21\u5f0f\u8fd0\u884c\u5bb9\u5668\uff0c\u901a\u5e38\u4e0e -t \u540c\u65f6\u4f7f\u7528\uff1b -t: \u4e3a\u5bb9\u5668\u91cd\u65b0\u5206\u914d\u4e00\u4e2a\u4f2a\u8f93\u5165\u7ec8\u7aef\uff0c\u901a\u5e38\u4e0e -i \u540c\u65f6\u4f7f\u7528\uff1b -p: \u7aef\u53e3\u6620\u5c04\uff0c\u683c\u5f0f\u4e3a\uff1a\u4e3b\u673a(\u5bbf\u4e3b)\u7aef\u53e3:\u5bb9\u5668\u7aef\u53e3; -v: \u76ee\u5f55\u6620\u5c04\uff0c\u4e3b\u673a\u76ee\u5f55\uff1a\u5bb9\u5668\u76ee\u5f55 --rm: \u5728Docker\u5bb9\u5668\u9000\u51fa\u65f6\uff0c\u9ed8\u8ba4\u5bb9\u5668\u5185\u90e8\u7684\u6587\u4ef6\u7cfb\u7edf\u4ecd\u7136\u88ab\u4fdd\u7559\uff0c\u4ee5\u65b9\u4fbf\u8c03\u8bd5\u5e76\u4fdd\u7559\u7528\u6237\u6570\u636e\u3002\u4f46\u662f\uff0c\u5bf9\u4e8eforeground\u5bb9\u5668\uff0c\u7531\u4e8e\u5176\u53ea\u662f\u5728\u5f00\u53d1\u8c03\u8bd5\u8fc7\u7a0b\u4e2d\u77ed\u671f\u8fd0\u884c\uff0c\u5176\u7528\u6237\u6570\u636e\u5e76\u65e0\u4fdd\u7559\u7684\u5fc5\u8981\uff0c\u56e0\u800c\u53ef\u4ee5\u5728\u5bb9\u5668\u542f\u52a8\u65f6\u8bbe\u7f6e--rm\u9009\u9879\uff0c\u8fd9\u6837\u5728\u5bb9\u5668\u9000\u51fa\u65f6\u5c31\u80fd\u591f\u81ea\u52a8\u6e05\u7406\u5bb9\u5668\u5185\u90e8\u7684\u6587\u4ef6\u7cfb\u7edf eg. \u4f7f\u7528\u955c\u50cf nginx:latest\uff0c\u4ee5\u540e\u53f0\u6a21\u5f0f\u542f\u52a8\u4e00\u4e2a\u5bb9\u5668,\u5c06\u5bb9\u5668\u7684 80 \u7aef\u53e3\u6620\u5c04\u5230\u4e3b\u673a\u7684 80 \u7aef\u53e3,\u4e3b\u673a\u7684\u76ee\u5f55 /data \u6620\u5c04\u5230\u5bb9\u5668\u7684 /data\u3002 docker run -p 80 :80 -v /data:/data -d nginx:latest eg. \u5229\u7528 Nvidia Docker\uff0c\u4f7f\u7528 Tensroflow GPU \u7248\u672c\uff0c docker run --runtime = nvidia -it tensorflow/tensorflow:latest-gpu bash Docker \u4e2d\u542f\u52a8 Jupyter jupyter notebook --no-browser --ip 0 .0.0.0 --port = 8888 --allow-root","title":"Docker"},{"location":"gist/docker-basic/#docker","text":"","title":"Docker"},{"location":"gist/docker-basic/#copy-docker-image","text":"stack overflow","title":"Copy Docker Image"},{"location":"gist/docker-basic/#docker-run","text":"eg. \u521b\u5efa\u65b0\u7684tensorflow\u5bb9\u5668\uff0c\u6620\u5c04\u76ee\u5f55\u3001\u7aef\u53e3\uff0c\u9000\u51fa\u540e\u6e05\u7406\u5bb9\u5668\uff0c\u5206\u914d\u4ea4\u4e92\u7ec8\u7aef nvidia-docker run --rm -p 8888 :8888 -v ~/notebooks:/notebooks -it tensorflow/tensorflow:latest-gpu run\u547d\u4ee4\u4f7f\u7528\u8bf4\u660e\uff1a docker run [ OPTIONS ] IMAGE [ COMMAND ] [ ARG... ] -d: \u540e\u53f0\u8fd0\u884c\u5bb9\u5668\uff0c\u5e76\u8fd4\u56de\u5bb9\u5668ID\uff1b -i: \u4ee5\u4ea4\u4e92\u6a21\u5f0f\u8fd0\u884c\u5bb9\u5668\uff0c\u901a\u5e38\u4e0e -t \u540c\u65f6\u4f7f\u7528\uff1b -t: \u4e3a\u5bb9\u5668\u91cd\u65b0\u5206\u914d\u4e00\u4e2a\u4f2a\u8f93\u5165\u7ec8\u7aef\uff0c\u901a\u5e38\u4e0e -i \u540c\u65f6\u4f7f\u7528\uff1b -p: \u7aef\u53e3\u6620\u5c04\uff0c\u683c\u5f0f\u4e3a\uff1a\u4e3b\u673a(\u5bbf\u4e3b)\u7aef\u53e3:\u5bb9\u5668\u7aef\u53e3; -v: \u76ee\u5f55\u6620\u5c04\uff0c\u4e3b\u673a\u76ee\u5f55\uff1a\u5bb9\u5668\u76ee\u5f55 --rm: \u5728Docker\u5bb9\u5668\u9000\u51fa\u65f6\uff0c\u9ed8\u8ba4\u5bb9\u5668\u5185\u90e8\u7684\u6587\u4ef6\u7cfb\u7edf\u4ecd\u7136\u88ab\u4fdd\u7559\uff0c\u4ee5\u65b9\u4fbf\u8c03\u8bd5\u5e76\u4fdd\u7559\u7528\u6237\u6570\u636e\u3002\u4f46\u662f\uff0c\u5bf9\u4e8eforeground\u5bb9\u5668\uff0c\u7531\u4e8e\u5176\u53ea\u662f\u5728\u5f00\u53d1\u8c03\u8bd5\u8fc7\u7a0b\u4e2d\u77ed\u671f\u8fd0\u884c\uff0c\u5176\u7528\u6237\u6570\u636e\u5e76\u65e0\u4fdd\u7559\u7684\u5fc5\u8981\uff0c\u56e0\u800c\u53ef\u4ee5\u5728\u5bb9\u5668\u542f\u52a8\u65f6\u8bbe\u7f6e--rm\u9009\u9879\uff0c\u8fd9\u6837\u5728\u5bb9\u5668\u9000\u51fa\u65f6\u5c31\u80fd\u591f\u81ea\u52a8\u6e05\u7406\u5bb9\u5668\u5185\u90e8\u7684\u6587\u4ef6\u7cfb\u7edf eg. \u4f7f\u7528\u955c\u50cf nginx:latest\uff0c\u4ee5\u540e\u53f0\u6a21\u5f0f\u542f\u52a8\u4e00\u4e2a\u5bb9\u5668,\u5c06\u5bb9\u5668\u7684 80 \u7aef\u53e3\u6620\u5c04\u5230\u4e3b\u673a\u7684 80 \u7aef\u53e3,\u4e3b\u673a\u7684\u76ee\u5f55 /data \u6620\u5c04\u5230\u5bb9\u5668\u7684 /data\u3002 docker run -p 80 :80 -v /data:/data -d nginx:latest eg. \u5229\u7528 Nvidia Docker\uff0c\u4f7f\u7528 Tensroflow GPU \u7248\u672c\uff0c docker run --runtime = nvidia -it tensorflow/tensorflow:latest-gpu bash","title":"Docker Run"},{"location":"gist/docker-basic/#docker-jupyter","text":"jupyter notebook --no-browser --ip 0 .0.0.0 --port = 8888 --allow-root","title":"Docker \u4e2d\u542f\u52a8 Jupyter"},{"location":"gist/git-branch-name/","text":"Git \u5206\u652f\u547d\u540d\u89c4\u8303 master\uff08\u4e3b\u5206\u652f\uff0c\u6c38\u8fdc\u662f\u53ef\u7528\u7684\u3001\u7a33\u5b9a\u7684\u3001\u53ef\u76f4\u63a5\u53d1\u5e03\u7684\u7248\u672c\uff0c\u4e0d\u80fd\u76f4\u63a5\u5728\u8be5\u5206\u652f\u4e0a\u5f00\u53d1\uff09 develop\uff08\u5f00\u53d1\u4e3b\u5206\u652f\uff0c\u4ee3\u7801\u6c38\u8fdc\u662f\u6700\u65b0\uff0c\u6240\u6709\u65b0\u529f\u80fd\u4ee5\u8fd9\u4e2a\u5206\u652f\u6765\u521b\u5efa\u81ea\u5df1\u7684\u5f00\u53d1\u5206\u652f\uff0c\u8be5\u5206\u652f\u53ea\u505a\u53ea\u5408\u5e76\u64cd\u4f5c\uff0c\u4e0d\u80fd\u76f4\u63a5\u5728\u8be5\u5206\u652f\u4e0a\u5f00\u53d1\uff09 feature-xxx\uff08\u529f\u80fd\u5f00\u53d1\u5206\u652f\uff0c\u5728develop\u4e0a\u521b\u5efa\u5206\u652f\uff0c\u4ee5\u81ea\u5df1\u5f00\u53d1\u529f\u80fd\u6a21\u5757\u547d\u540d\uff0c\u529f\u80fd\u6d4b\u8bd5\u6b63\u5e38\u540e\u5408\u5e76\u5230develop\u5206\u652f\uff09 release\uff08\u9884\u53d1\u5e03\u5206\u652f\uff0c\u5728\u5408\u5e76\u597dfeature\u5206\u652f\u7684develop\u5206\u652f\u4e0a\u521b\u5efa\uff0c\u4e3b\u8981\u662f\u7528\u6765\u63d0\u6d4b\u7684\u5206\u652f\uff0c\u4fee\u6539\u597dbug\u5e76\u786e\u5b9a\u7a33\u5b9a\u4e4b\u540e\u5408\u5e76\u5230develop\u548cmaster\u5206\u652f\uff0c\u7136\u540e\u53d1\u5e03master\u5206\u652f\uff09 release-fix\uff08\u529f\u80fdbug\u4fee\u590d\u5206\u652f\uff0c\u5728release\u4e0a\u521b\u5efa\u5206\u652f\u4fee\u590d\uff0c\u4fee\u590d\u597d\u63d0\u6d4b\u7684bug\u4e4b\u540e\u5408\u5e76\u56derelease\u5206\u652f\u3002\uff09 hotfix-xxx\uff08\u7d27\u6025bug\u4fee\u6539\u5206\u652f\uff0c\u9879\u76ee\u4e0a\u7ebf\u4e4b\u540e\u53ef\u4ee5\u4f1a\u9047\u5230\u4e00\u4e9b\u73af\u5883\u95ee\u9898\u9700\u8981\u7d27\u6025\u4fee\u590d\uff0c\u5728\u5bf9\u5e94\u7248\u672c\u7684release\u5206\u652f\u4e0a\u521b\u5efa\uff0c\u6d41\u7a0b\u8ddfrelease\u5206\u652f\u76f8\u4f3c\uff0c\u4fee\u590d\u5b8c\u6210\u540e\u5408\u5e76release\u5206\u652f\uff0c\u6839\u636e\u60c5\u51b5\u5224\u65ad\u9700\u4e0d\u9700\u8981\u518d\u5408\u5e76\u5230develop\u548cmaster\u5206\u652f\uff09 git\u4e0a\u7684\u5206\u652f\u547d\u540d\u89c4\u8303","title":"Git \u5206\u652f\u547d\u540d\u89c4\u8303"},{"location":"gist/git-branch-name/#git","text":"master\uff08\u4e3b\u5206\u652f\uff0c\u6c38\u8fdc\u662f\u53ef\u7528\u7684\u3001\u7a33\u5b9a\u7684\u3001\u53ef\u76f4\u63a5\u53d1\u5e03\u7684\u7248\u672c\uff0c\u4e0d\u80fd\u76f4\u63a5\u5728\u8be5\u5206\u652f\u4e0a\u5f00\u53d1\uff09 develop\uff08\u5f00\u53d1\u4e3b\u5206\u652f\uff0c\u4ee3\u7801\u6c38\u8fdc\u662f\u6700\u65b0\uff0c\u6240\u6709\u65b0\u529f\u80fd\u4ee5\u8fd9\u4e2a\u5206\u652f\u6765\u521b\u5efa\u81ea\u5df1\u7684\u5f00\u53d1\u5206\u652f\uff0c\u8be5\u5206\u652f\u53ea\u505a\u53ea\u5408\u5e76\u64cd\u4f5c\uff0c\u4e0d\u80fd\u76f4\u63a5\u5728\u8be5\u5206\u652f\u4e0a\u5f00\u53d1\uff09 feature-xxx\uff08\u529f\u80fd\u5f00\u53d1\u5206\u652f\uff0c\u5728develop\u4e0a\u521b\u5efa\u5206\u652f\uff0c\u4ee5\u81ea\u5df1\u5f00\u53d1\u529f\u80fd\u6a21\u5757\u547d\u540d\uff0c\u529f\u80fd\u6d4b\u8bd5\u6b63\u5e38\u540e\u5408\u5e76\u5230develop\u5206\u652f\uff09 release\uff08\u9884\u53d1\u5e03\u5206\u652f\uff0c\u5728\u5408\u5e76\u597dfeature\u5206\u652f\u7684develop\u5206\u652f\u4e0a\u521b\u5efa\uff0c\u4e3b\u8981\u662f\u7528\u6765\u63d0\u6d4b\u7684\u5206\u652f\uff0c\u4fee\u6539\u597dbug\u5e76\u786e\u5b9a\u7a33\u5b9a\u4e4b\u540e\u5408\u5e76\u5230develop\u548cmaster\u5206\u652f\uff0c\u7136\u540e\u53d1\u5e03master\u5206\u652f\uff09 release-fix\uff08\u529f\u80fdbug\u4fee\u590d\u5206\u652f\uff0c\u5728release\u4e0a\u521b\u5efa\u5206\u652f\u4fee\u590d\uff0c\u4fee\u590d\u597d\u63d0\u6d4b\u7684bug\u4e4b\u540e\u5408\u5e76\u56derelease\u5206\u652f\u3002\uff09 hotfix-xxx\uff08\u7d27\u6025bug\u4fee\u6539\u5206\u652f\uff0c\u9879\u76ee\u4e0a\u7ebf\u4e4b\u540e\u53ef\u4ee5\u4f1a\u9047\u5230\u4e00\u4e9b\u73af\u5883\u95ee\u9898\u9700\u8981\u7d27\u6025\u4fee\u590d\uff0c\u5728\u5bf9\u5e94\u7248\u672c\u7684release\u5206\u652f\u4e0a\u521b\u5efa\uff0c\u6d41\u7a0b\u8ddfrelease\u5206\u652f\u76f8\u4f3c\uff0c\u4fee\u590d\u5b8c\u6210\u540e\u5408\u5e76release\u5206\u652f\uff0c\u6839\u636e\u60c5\u51b5\u5224\u65ad\u9700\u4e0d\u9700\u8981\u518d\u5408\u5e76\u5230develop\u548cmaster\u5206\u652f\uff09 git\u4e0a\u7684\u5206\u652f\u547d\u540d\u89c4\u8303","title":"Git \u5206\u652f\u547d\u540d\u89c4\u8303"},{"location":"gist/git-commit-log/","text":"Git Commit Log \u89c4\u8303 Commit \u547d\u4ee4\u884c\u5de5\u5177 \u53c2\u8003","title":"Git Commit Log \u89c4\u8303"},{"location":"gist/git-commit-log/#git-commit-log","text":"","title":"Git Commit Log \u89c4\u8303"},{"location":"gist/git-commit-log/#commit","text":"\u53c2\u8003","title":"Commit \u547d\u4ee4\u884c\u5de5\u5177"},{"location":"gist/github-proxy/","text":"Github Proxy Configuration git config --global http.proxy 'socks5://127.0.0.1:1080' git config --global https.proxy 'socks5://127.0.0.1:1080' #\u53d6\u6d88\u4ee3\u7406 git config --global --unset http.proxy git config --global --unset https.proxy","title":"Github Proxy Configuration"},{"location":"gist/github-proxy/#github-proxy-configuration","text":"git config --global http.proxy 'socks5://127.0.0.1:1080' git config --global https.proxy 'socks5://127.0.0.1:1080' #\u53d6\u6d88\u4ee3\u7406 git config --global --unset http.proxy git config --global --unset https.proxy","title":"Github Proxy Configuration"},{"location":"gist/gtest-install/","text":"Google Test Installation sudo apt-get install libgtest-dev cd /usr/src/googletest/googletest sudo mkdir build cd build sudo cmake .. sudo make sudo cp libgtest* /usr/lib/ # usr--unix system resource\u7cfb\u7edf\u7ea7\u522b cd .. sudo rm -rf build sudo mkdir /usr/local/lib/googletest # /usr/local/lib\u7528\u6237\u7ea7\u522b sudo ln -s /usr/lib/libgtest.a /usr/local/lib/googletest/libgtest.a sudo ln -s /usr/lib/libgtest_main.a /usr/local/lib/googletest/libgtest_main.a","title":"Google Test Installation"},{"location":"gist/gtest-install/#google-test-installation","text":"sudo apt-get install libgtest-dev cd /usr/src/googletest/googletest sudo mkdir build cd build sudo cmake .. sudo make sudo cp libgtest* /usr/lib/ # usr--unix system resource\u7cfb\u7edf\u7ea7\u522b cd .. sudo rm -rf build sudo mkdir /usr/local/lib/googletest # /usr/local/lib\u7528\u6237\u7ea7\u522b sudo ln -s /usr/lib/libgtest.a /usr/local/lib/googletest/libgtest.a sudo ln -s /usr/lib/libgtest_main.a /usr/local/lib/googletest/libgtest_main.a","title":"Google Test Installation"},{"location":"gist/method/","text":"\u7ed3\u6784\u5316\u601d\u7ef4 \u903b\u8f91 \u65b9\u6cd5\u8bba \u53c2\u8003 https://mp.weixin.qq.com/s/Veh8labc35JQTNyavTfBpQ","title":"\u7ed3\u6784\u5316\u601d\u7ef4"},{"location":"gist/method/#_1","text":"","title":"\u7ed3\u6784\u5316\u601d\u7ef4"},{"location":"gist/method/#_2","text":"","title":"\u903b\u8f91"},{"location":"gist/method/#_3","text":"","title":"\u65b9\u6cd5\u8bba"},{"location":"gist/method/#_4","text":"https://mp.weixin.qq.com/s/Veh8labc35JQTNyavTfBpQ","title":"\u53c2\u8003"},{"location":"gist/mkdocs-ch-support/","text":"Mkdocs \u4e2d\u6587\u652f\u6301 \u53c2\u8003\u6587\u732e https://cainmagi.github.io/playground/20190225mkdocs/","title":"Mkdocs \u4e2d\u6587\u652f\u6301"},{"location":"gist/mkdocs-ch-support/#mkdocs","text":"","title":"Mkdocs \u4e2d\u6587\u652f\u6301"},{"location":"gist/mkdocs-ch-support/#_1","text":"https://cainmagi.github.io/playground/20190225mkdocs/","title":"\u53c2\u8003\u6587\u732e"},{"location":"gist/numpy-ref/","text":"numpy \u4e2d\u6587\u6587\u6863 numpy \u4e2d\u6587\u6587\u6863","title":"numpy \u4e2d\u6587\u6587\u6863"},{"location":"gist/numpy-ref/#numpy","text":"numpy \u4e2d\u6587\u6587\u6863","title":"numpy \u4e2d\u6587\u6587\u6863"},{"location":"gist/pip-source/","text":"pip \u6e90\u5207\u4e3a\u56fd\u5185\u955c\u50cf \u4e34\u65f6\u4f7f\u7528 pip install -i https://pypi.tuna.tsinghua.edu.cn/simple package-name Linux \u521b\u5efa/\u4fee\u6539 ~/.pip/pip.conf [global] index-url = https://pypi.tuna.tsinghua.edu.cn/simple Windows User \u76ee\u5f55\u4e0b\u521b\u5efapip\u76ee\u5f55\uff0c\u5982\uff1aC:\\Users\\xx\\pip \u65b0\u5efa\u6587\u4ef6pip.ini [global] index-url = https://pypi.tuna.tsinghua.edu.cn/simple","title":"pip \u6e90\u5207\u4e3a\u56fd\u5185\u955c\u50cf"},{"location":"gist/pip-source/#pip","text":"","title":"pip \u6e90\u5207\u4e3a\u56fd\u5185\u955c\u50cf"},{"location":"gist/pip-source/#_1","text":"pip install -i https://pypi.tuna.tsinghua.edu.cn/simple package-name","title":"\u4e34\u65f6\u4f7f\u7528"},{"location":"gist/pip-source/#linux","text":"\u521b\u5efa/\u4fee\u6539 ~/.pip/pip.conf [global] index-url = https://pypi.tuna.tsinghua.edu.cn/simple","title":"Linux"},{"location":"gist/pip-source/#windows","text":"User \u76ee\u5f55\u4e0b\u521b\u5efapip\u76ee\u5f55\uff0c\u5982\uff1aC:\\Users\\xx\\pip \u65b0\u5efa\u6587\u4ef6pip.ini [global] index-url = https://pypi.tuna.tsinghua.edu.cn/simple","title":"Windows"},{"location":"gist/review/","text":"\u8bba\u6587 review https://www.zhihu.com/question/30772524","title":"\u8bba\u6587 review"},{"location":"gist/review/#review","text":"https://www.zhihu.com/question/30772524","title":"\u8bba\u6587 review"},{"location":"gist/shadowsocks/","text":"Ubuntu-18.04 Shadowsocks\u914d\u7f6e \u5b89\u88c5Shadowsocks sudo apt install python-pip sudo apt install libsodium-dev # libsodium-dev\u7528\u4e8echacha20-ietf-poly1305\u52a0\u5bc6 sudo pip install https://github.com/shadowsocks/shadowsocks/archive/master.zip -U \u5ba2\u6237\u7aef\u914d\u7f6e\u6587\u4ef6shadowsocks.json \u6d4b\u8bd5 $ tmux new -s shadowsocks $ sslocal -c shadowsocks.json Switch Omega \u6d4f\u89c8\u5668\u5229\u7528Switch Omega\u8bbe\u7f6eproxy/direct/pac\u6a21\u5f0f Privoxy sudo apt install privoxy sudo vim /etc/privoxy/config config\u4e2d\u9ed8\u8ba4\u76d1\u542c8118\u7aef\u53e3 forward-socks5[t] / 127.0.0.1:1080 . # http/https\u8f6c\u53d1\u52301080\u7aef\u53e3 $ vim /etc/profile # \u6dfb\u52a0\u4ee5\u4e0b\u4e24\u884c export http_proxy = http://127.0.0.1:8118 export https_proxy = http://127.0.0.1:8118 $ curl www.google.com #\u6d4b\u8bd5Privoxy \u5f00\u673a\u542f\u52a8 $ sudo vim /lib/systemd/system/shadowsocks.service # \u6dfb\u52a0service $ sudo systemctl start shadowsocks.service # \u542f\u52a8service $ sudo systemctl enable shadowsocks.service # \u8bbe\u7f6e\u5f00\u673a\u542f\u52a8","title":"Ubuntu-18.04 Shadowsocks\u914d\u7f6e"},{"location":"gist/shadowsocks/#ubuntu-1804-shadowsocks","text":"","title":"Ubuntu-18.04 Shadowsocks\u914d\u7f6e"},{"location":"gist/shadowsocks/#shadowsocks","text":"sudo apt install python-pip sudo apt install libsodium-dev # libsodium-dev\u7528\u4e8echacha20-ietf-poly1305\u52a0\u5bc6 sudo pip install https://github.com/shadowsocks/shadowsocks/archive/master.zip -U \u5ba2\u6237\u7aef\u914d\u7f6e\u6587\u4ef6shadowsocks.json","title":"\u5b89\u88c5Shadowsocks"},{"location":"gist/shadowsocks/#_1","text":"$ tmux new -s shadowsocks $ sslocal -c shadowsocks.json","title":"\u6d4b\u8bd5"},{"location":"gist/shadowsocks/#switch-omega","text":"\u6d4f\u89c8\u5668\u5229\u7528Switch Omega\u8bbe\u7f6eproxy/direct/pac\u6a21\u5f0f","title":"Switch Omega"},{"location":"gist/shadowsocks/#privoxy","text":"sudo apt install privoxy sudo vim /etc/privoxy/config config\u4e2d\u9ed8\u8ba4\u76d1\u542c8118\u7aef\u53e3 forward-socks5[t] / 127.0.0.1:1080 . # http/https\u8f6c\u53d1\u52301080\u7aef\u53e3 $ vim /etc/profile # \u6dfb\u52a0\u4ee5\u4e0b\u4e24\u884c export http_proxy = http://127.0.0.1:8118 export https_proxy = http://127.0.0.1:8118 $ curl www.google.com #\u6d4b\u8bd5Privoxy","title":"Privoxy"},{"location":"gist/shadowsocks/#_2","text":"$ sudo vim /lib/systemd/system/shadowsocks.service # \u6dfb\u52a0service $ sudo systemctl start shadowsocks.service # \u542f\u52a8service $ sudo systemctl enable shadowsocks.service # \u8bbe\u7f6e\u5f00\u673a\u542f\u52a8","title":"\u5f00\u673a\u542f\u52a8"},{"location":"gist/slam-jd/","text":"\u673a\u5668\u89c6\u89c9\u7b14\u8bd5\u3001\u9762\u8bd5 https://zhuanlan.zhihu.com/p/63755692","title":"\u673a\u5668\u89c6\u89c9\u7b14\u8bd5\u3001\u9762\u8bd5"},{"location":"gist/slam-jd/#_1","text":"https://zhuanlan.zhihu.com/p/63755692","title":"\u673a\u5668\u89c6\u89c9\u7b14\u8bd5\u3001\u9762\u8bd5"},{"location":"gist/ubuntu-rename/","text":"Ubuntu \u6279\u91cf\u91cd\u547d\u540d rename \"s//.html//.php/\" * //\u628a.html \u540e\u7f00\u7684\u6539\u6210 .php\u540e\u7f00","title":"Ubuntu \u6279\u91cf\u91cd\u547d\u540d"},{"location":"gist/ubuntu-rename/#ubuntu","text":"rename \"s//.html//.php/\" * //\u628a.html \u540e\u7f00\u7684\u6539\u6210 .php\u540e\u7f00","title":"Ubuntu \u6279\u91cf\u91cd\u547d\u540d"},{"location":"gist/ubuntu-theme/","text":"Ubuntu 18.04 Theme Gnome Themes Gnome Icons Dock","title":"Ubuntu 18.04 Theme"},{"location":"gist/ubuntu-theme/#ubuntu-1804-theme","text":"Gnome Themes Gnome Icons Dock","title":"Ubuntu 18.04 Theme"},{"location":"gist/usb-mount/","text":"Ubuntu18.04 \u5b58\u50a8\u8bbe\u5907\u6302\u8f7d sudo sudo fdisk -l #\u67e5\u770b\u5b58\u50a8\u8bbe\u5907\u5206\u533a\u540d mkdir /mnt/usb mount /dev/sdb4 /mnt/usb # \u6302\u8f7d\u6210\u529f umount /mnt/usb # \u9000\u51fa\u5f53\u524d\u76ee\u5f55\uff0c\u5378\u8f7d\u6302\u8f7d\u5206\u533a","title":"Ubuntu18.04 \u5b58\u50a8\u8bbe\u5907\u6302\u8f7d"},{"location":"gist/usb-mount/#ubuntu1804","text":"sudo sudo fdisk -l #\u67e5\u770b\u5b58\u50a8\u8bbe\u5907\u5206\u533a\u540d mkdir /mnt/usb mount /dev/sdb4 /mnt/usb # \u6302\u8f7d\u6210\u529f umount /mnt/usb # \u9000\u51fa\u5f53\u524d\u76ee\u5f55\uff0c\u5378\u8f7d\u6302\u8f7d\u5206\u533a","title":"Ubuntu18.04 \u5b58\u50a8\u8bbe\u5907\u6302\u8f7d"},{"location":"gist/vscode-pytorch/","text":"vscode torch \u6807\u7ea2 \u95ee\u9898\u63cf\u8ff0 VSCode\u4e2dtorch\u6807\u7ea2 \u89e3\u51b3\u65b9\u6848 VSCode setting\u4e2d\u641c\u7d22python.linting.pylintPath \u5e76\u4e14\u4fee\u6539\u503c\u4e3a(\u4f60\u7684Anaconda\u5b89\u88c5\u8def\u5f84)\\pkgs\\pylint-1.8.4-py36_0\\Scripts\\pylint","title":"vscode torch \u6807\u7ea2"},{"location":"gist/vscode-pytorch/#vscode-torch","text":"","title":"vscode torch \u6807\u7ea2"},{"location":"gist/vscode-pytorch/#_1","text":"VSCode\u4e2dtorch\u6807\u7ea2","title":"\u95ee\u9898\u63cf\u8ff0"},{"location":"gist/vscode-pytorch/#_2","text":"VSCode setting\u4e2d\u641c\u7d22python.linting.pylintPath \u5e76\u4e14\u4fee\u6539\u503c\u4e3a(\u4f60\u7684Anaconda\u5b89\u88c5\u8def\u5f84)\\pkgs\\pylint-1.8.4-py36_0\\Scripts\\pylint","title":"\u89e3\u51b3\u65b9\u6848"},{"location":"gist/wifi-connection/","text":"Console Wi-Fi Connection in Ubuntu 18.04 iPhone\u4e3awap2\u534f\u8bae $ iwconfg # \u663e\u793awifi\u72b6\u6001 $ sudo iwlist [] scan | grep ESSID $ wpa_passphrase \"YOUR_ESSID_NAME\" PASSWORD | sudo tee /etc/wpa_supplicant.conf $ sudo wpa_supplicant -c /etc/wpa_supplicant.conf -i [] $ dhclient # \uff1f","title":"Console Wi-Fi Connection in Ubuntu 18.04"},{"location":"gist/wifi-connection/#console-wi-fi-connection-in-ubuntu-1804","text":"iPhone\u4e3awap2\u534f\u8bae $ iwconfg # \u663e\u793awifi\u72b6\u6001 $ sudo iwlist [] scan | grep ESSID $ wpa_passphrase \"YOUR_ESSID_NAME\" PASSWORD | sudo tee /etc/wpa_supplicant.conf $ sudo wpa_supplicant -c /etc/wpa_supplicant.conf -i [] $ dhclient # \uff1f","title":"Console Wi-Fi Connection in Ubuntu 18.04"},{"location":"graphics/","text":"\u56fe\u5f62\u5b66 | \u76ee\u5f55 \u5b9e\u65f6\u6e32\u67d3 | \u7f16\u7a0b\u6307\u5357 OpenGL 4 Pipeline DirectX 12 \u6e32\u67d3\u7ba1\u7ebf \u57fa\u672c\u6982\u5ff5 \u5b9e\u65f6\u6e32\u67d3 | \u57fa\u7840\u7b97\u6cd5 \u57fa\u672c PBR IBL Parallax Cubemap CSM PCSS \u5927\u6c14\u6a21\u62df \u96fe \u5927\u6c14\u6563\u5c04 Volumetric Cloud \u540e\u5904\u7406 HDR Bloom\u3001Glare\u3001Ghost Auto Exposure TAA PostProcessVolumatricLight \u5b9e\u65f6\u6e32\u67d3 | \u6846\u67b6\u5206\u6790 Nvidia Falcor","title":"\u56fe\u5f62\u5b66 | \u76ee\u5f55"},{"location":"graphics/#_1","text":"","title":"\u56fe\u5f62\u5b66 | \u76ee\u5f55"},{"location":"graphics/#_2","text":"OpenGL 4 Pipeline DirectX 12 \u6e32\u67d3\u7ba1\u7ebf \u57fa\u672c\u6982\u5ff5","title":"\u5b9e\u65f6\u6e32\u67d3 | \u7f16\u7a0b\u6307\u5357"},{"location":"graphics/#_3","text":"\u57fa\u672c PBR IBL Parallax Cubemap CSM PCSS \u5927\u6c14\u6a21\u62df \u96fe \u5927\u6c14\u6563\u5c04 Volumetric Cloud \u540e\u5904\u7406 HDR Bloom\u3001Glare\u3001Ghost Auto Exposure TAA PostProcessVolumatricLight","title":"\u5b9e\u65f6\u6e32\u67d3 | \u57fa\u7840\u7b97\u6cd5"},{"location":"graphics/#_4","text":"Nvidia Falcor","title":"\u5b9e\u65f6\u6e32\u67d3 | \u6846\u67b6\u5206\u6790"},{"location":"graphics/cloud-rendering/","text":"\u56fe\u5f62\u5b66 | \u4e91\u6e32\u67d3 \u4e0b\u8fb9\u662f\u81ea\u5df1\u57fa\u4e8eOpenGL\u7684\u4f53\u79ef\u4e91\u5b9e\u73b0:D Cloud Map \u4e91\u56fe \u4e91\u5c42\u5206\u5e03\u7531\u4e00\u5f20\u4e8c\u7ef4 Texture \u63a7\u5236\uff0c\u4e3b\u8981\u7528\u4e8e\u8868\u73b0\u5929\u7a7a\u54ea\u5757\u88ab\u4e91\u8986\u76d6\uff0c\u54ea\u5757\u662f\u6674\u7a7a\u3002 \u7d20\u6750\u5982\u4e0b\u6240\u793a\uff1a \u5176\u4e3b\u8981\u529f\u80fd\u53ef\u4ee5\u5bf9\u5e94\u4e3a\u536b\u661f\u6c14\u8c61\u56fe\uff0c\u663e\u793a\u4e91\u51fa\u73b0\u7684\u4f4d\u7f6e \u4f7f\u7528\u8be5 Cloud Map \u7684\u597d\u5904\u662f\uff0c\u4e91\u5c42\u6548\u679c\u53ef\u4ee5\u7531\u539f\u753b\u6765\u63a7\u5236\u3002\u5b9e\u9645\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u7531\u6e38\u620f\u7ec4\u7684\u7f8e\u672f\u6765\u521b\u4f5c Cloud Map \u4e8c\u7ef4\u6750\u8d28\u3002 \u5730\u5e73\u7ebf \u4e0a\u56fe\u6765\u81ea PS4 \u6e38\u620f\u300a\u5730\u5e73\u7ebf\uff1a\u96f6\u4e4b\u66d9\u5149\u300b\uff0c\u5176\u5929\u7a7a\u7684\u6e32\u67d3\u6548\u679c\u975e\u5e38\u60ca\u8273\u3002\u6e38\u620f\u7531\u7d22\u5c3c\u65d7\u4e0bGuerrilla Games\u5de5\u4f5c\u5ba4\u5f00\u53d1\u3002\u5de5\u4f5c\u5ba4\u5728 SIGGRAPH Course\uff082015\u30012017\uff09\u4e0a\u5206\u4eab\u4e86\u5173\u4e8e\u4e91\u7684\u5b9e\u65f6\u6e32\u67d3\u76f8\u5173\u8d44\u6599\u3002 \u672c\u6587\u57fa\u4e8e Guerrilla \u7684\u8d44\u6599\u5b9e\u73b0\u4e86\u4f53\u79ef\u4e91\u5b9e\u65f6\u6e32\u67d3\uff0c\u6211\u4eec\u6765\u770b\u770b\u5982\u4f55\u4e00\u6b65\u6b65\u5b9e\u73b0\u300a\u5730\u5e73\u7ebf\u300b\u7684\u5929\u7a7a\u6548\u679c\u3002 \u300a\u5730\u5e73\u7ebf\uff1a\u96f6\u4e4b\u66d9\u5149\u300b\u7684\u5b9e\u65f6\u7ed8\u5236\u753b\u9762 \u4e91\u7684\u57fa\u672c\u5f62\u72b6 \u5229\u7528\u56fe\u5f62\u5b66\u4e2d\u5e38\u7528\u566a\u58f0\u7684\u7ec4\u5408\u2014\u2014 3D\uff08\u4e0b\u56fe\u4ec5\u5c55\u793a\u51fa 3D Noise \u7684\u67d0\u5207\u9762\uff09 Perlin-Worley Noise \u5f62\u6210\u4e91\u7684\u57fa\u672c\u5f62\u72b6\uff1a \u4ece\u5de6\u5230\u53f3\u5206\u522b\u4e3a 3D Perlin\u3001Worley\u3001Perlin-Worley Noise\uff0c\u4e91\u6e32\u67d3\u4e2d\u5229\u7528\u56fe\u5f62\u5b66\u4e2d\u5e38\u7528\u7684Perlin\u3001Worley\u4e24\u79cd\u566a\u58f0\u7684\u6df7\u5408\u2014\u2014Perlin-Worley Noise\uff0c\u5f62\u6210\u4e91\u7684\u6700\u57fa\u672c\u5f62\u72b6 \u5229\u7528\u524d\u4e00\u7ae0\u8282 Cloud Map \u6e32\u67d3\u7684\u4e91 \u56fe4\uff1aPerlin-Worley Noise\uff08\u56fe2\uff09\u4e0e\u4e91\u7684\u5f62\u72b6\u975e\u5e38\u76f8\u4f3c\uff0c\u524d\u4e00\u7ae0\u8282\u7684 Cloud Map \u4e0e\u672c\u7ae0\u8282 Noise \u7ec4\u5408\u6210\u5f53\u524d\u5f62\u72b6\uff08\u5b9e\u9645\u57fa\u672c\u5f62\u72b6\u751f\u6210\u5206\u4e3a\u4e24\u6b65\uff0c\u540e\u7eed\u8865\u5145\uff09 \u4e91\u5c42\u539a\u5ea6\u63a7\u5236 \u7528\u4e09\u79cd\u9ad8\u5ea6\u5206\u5e03\uff0c\u63a7\u5236\u4e91\u5c42\u7684\u9ad8\u5ea6\uff0c\u4ece\u8584\u5230\u539a\u5c06\u4e91\u91cd\u65b0\u6620\u5c04\u4e3aStratus\u3001Stratocumulus\u3001Cumulus\u4e09\u79cd\uff1a \u4e91\u7684\u5149\u7167 \u5149\u7167\u8ba1\u7b97\u7b80\u5316\u4e3a\u4e09\u79cd\u7c7b\u578b\uff1aDirectional Scattering Probability\u3001Absorption / Out-scatter Probability\u3001In-Scatter Probability \u6e32\u67d3\u6d41\u7a0b \u5b9e\u9645\u6e32\u67d3\u65f6\uff0c\u6211\u4eec\u5229\u7528\u56fe\u5f62\u5b66\u4e2d\u7684 Ray-Marching \u6280\u672f\u2014\u2014\u4ece\u89c6\u70b9\u53d1\u5c04\u5149\u7ebf\u5230\u5c4f\u5e55\u50cf\u7d20\uff0c\u6bcf\u6761\u5149\u7ebf\u5728\u5149\u7ebf\u8def\u5f84\u4e0a\u5bf9Cloud Map\u3001Noise \u8fdb\u884c\u591a\u6b21\u91c7\u6837\uff0c\u6700\u540e\u878d\u5408\u6210\u8be5\u50cf\u7d20\u7684\u7ed3\u679c [TODO \u8865\u5145\u5149\u7167\u8ba1\u7b97\u6d41\u7a0b\u3001\u6e32\u67d3\u4f2a\u4ee3\u7801\u3001OpenGL \u5b9e\u73b0\u4ee3\u7801\u94fe\u63a5] Reference GPU Pro 7 Real-Time Volumetric Cloudscapes SIGGRAPH 2015 Advances in Realtime Rendering SIGGRAPH 2017 Advances in Realtime Rendering","title":"\u56fe\u5f62\u5b66 | \u4e91\u6e32\u67d3"},{"location":"graphics/cloud-rendering/#_1","text":"","title":"\u56fe\u5f62\u5b66 | \u4e91\u6e32\u67d3"},{"location":"graphics/cloud-rendering/#opengld","text":"Cloud Map \u4e91\u56fe \u4e91\u5c42\u5206\u5e03\u7531\u4e00\u5f20\u4e8c\u7ef4 Texture \u63a7\u5236\uff0c\u4e3b\u8981\u7528\u4e8e\u8868\u73b0\u5929\u7a7a\u54ea\u5757\u88ab\u4e91\u8986\u76d6\uff0c\u54ea\u5757\u662f\u6674\u7a7a\u3002 \u7d20\u6750\u5982\u4e0b\u6240\u793a\uff1a \u5176\u4e3b\u8981\u529f\u80fd\u53ef\u4ee5\u5bf9\u5e94\u4e3a\u536b\u661f\u6c14\u8c61\u56fe\uff0c\u663e\u793a\u4e91\u51fa\u73b0\u7684\u4f4d\u7f6e \u4f7f\u7528\u8be5 Cloud Map \u7684\u597d\u5904\u662f\uff0c\u4e91\u5c42\u6548\u679c\u53ef\u4ee5\u7531\u539f\u753b\u6765\u63a7\u5236\u3002\u5b9e\u9645\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u7531\u6e38\u620f\u7ec4\u7684\u7f8e\u672f\u6765\u521b\u4f5c Cloud Map \u4e8c\u7ef4\u6750\u8d28\u3002","title":"\u4e0b\u8fb9\u662f\u81ea\u5df1\u57fa\u4e8eOpenGL\u7684\u4f53\u79ef\u4e91\u5b9e\u73b0:D"},{"location":"graphics/cloud-rendering/#_2","text":"\u4e0a\u56fe\u6765\u81ea PS4 \u6e38\u620f\u300a\u5730\u5e73\u7ebf\uff1a\u96f6\u4e4b\u66d9\u5149\u300b\uff0c\u5176\u5929\u7a7a\u7684\u6e32\u67d3\u6548\u679c\u975e\u5e38\u60ca\u8273\u3002\u6e38\u620f\u7531\u7d22\u5c3c\u65d7\u4e0bGuerrilla Games\u5de5\u4f5c\u5ba4\u5f00\u53d1\u3002\u5de5\u4f5c\u5ba4\u5728 SIGGRAPH Course\uff082015\u30012017\uff09\u4e0a\u5206\u4eab\u4e86\u5173\u4e8e\u4e91\u7684\u5b9e\u65f6\u6e32\u67d3\u76f8\u5173\u8d44\u6599\u3002 \u672c\u6587\u57fa\u4e8e Guerrilla \u7684\u8d44\u6599\u5b9e\u73b0\u4e86\u4f53\u79ef\u4e91\u5b9e\u65f6\u6e32\u67d3\uff0c\u6211\u4eec\u6765\u770b\u770b\u5982\u4f55\u4e00\u6b65\u6b65\u5b9e\u73b0\u300a\u5730\u5e73\u7ebf\u300b\u7684\u5929\u7a7a\u6548\u679c\u3002 \u300a\u5730\u5e73\u7ebf\uff1a\u96f6\u4e4b\u66d9\u5149\u300b\u7684\u5b9e\u65f6\u7ed8\u5236\u753b\u9762","title":"\u5730\u5e73\u7ebf"},{"location":"graphics/cloud-rendering/#_3","text":"\u5229\u7528\u56fe\u5f62\u5b66\u4e2d\u5e38\u7528\u566a\u58f0\u7684\u7ec4\u5408\u2014\u2014 3D\uff08\u4e0b\u56fe\u4ec5\u5c55\u793a\u51fa 3D Noise \u7684\u67d0\u5207\u9762\uff09 Perlin-Worley Noise \u5f62\u6210\u4e91\u7684\u57fa\u672c\u5f62\u72b6\uff1a \u4ece\u5de6\u5230\u53f3\u5206\u522b\u4e3a 3D Perlin\u3001Worley\u3001Perlin-Worley Noise\uff0c\u4e91\u6e32\u67d3\u4e2d\u5229\u7528\u56fe\u5f62\u5b66\u4e2d\u5e38\u7528\u7684Perlin\u3001Worley\u4e24\u79cd\u566a\u58f0\u7684\u6df7\u5408\u2014\u2014Perlin-Worley Noise\uff0c\u5f62\u6210\u4e91\u7684\u6700\u57fa\u672c\u5f62\u72b6 \u5229\u7528\u524d\u4e00\u7ae0\u8282 Cloud Map \u6e32\u67d3\u7684\u4e91 \u56fe4\uff1aPerlin-Worley Noise\uff08\u56fe2\uff09\u4e0e\u4e91\u7684\u5f62\u72b6\u975e\u5e38\u76f8\u4f3c\uff0c\u524d\u4e00\u7ae0\u8282\u7684 Cloud Map \u4e0e\u672c\u7ae0\u8282 Noise \u7ec4\u5408\u6210\u5f53\u524d\u5f62\u72b6\uff08\u5b9e\u9645\u57fa\u672c\u5f62\u72b6\u751f\u6210\u5206\u4e3a\u4e24\u6b65\uff0c\u540e\u7eed\u8865\u5145\uff09","title":"\u4e91\u7684\u57fa\u672c\u5f62\u72b6"},{"location":"graphics/cloud-rendering/#_4","text":"\u7528\u4e09\u79cd\u9ad8\u5ea6\u5206\u5e03\uff0c\u63a7\u5236\u4e91\u5c42\u7684\u9ad8\u5ea6\uff0c\u4ece\u8584\u5230\u539a\u5c06\u4e91\u91cd\u65b0\u6620\u5c04\u4e3aStratus\u3001Stratocumulus\u3001Cumulus\u4e09\u79cd\uff1a","title":"\u4e91\u5c42\u539a\u5ea6\u63a7\u5236"},{"location":"graphics/cloud-rendering/#_5","text":"\u5149\u7167\u8ba1\u7b97\u7b80\u5316\u4e3a\u4e09\u79cd\u7c7b\u578b\uff1aDirectional Scattering Probability\u3001Absorption / Out-scatter Probability\u3001In-Scatter Probability","title":"\u4e91\u7684\u5149\u7167"},{"location":"graphics/cloud-rendering/#_6","text":"\u5b9e\u9645\u6e32\u67d3\u65f6\uff0c\u6211\u4eec\u5229\u7528\u56fe\u5f62\u5b66\u4e2d\u7684 Ray-Marching \u6280\u672f\u2014\u2014\u4ece\u89c6\u70b9\u53d1\u5c04\u5149\u7ebf\u5230\u5c4f\u5e55\u50cf\u7d20\uff0c\u6bcf\u6761\u5149\u7ebf\u5728\u5149\u7ebf\u8def\u5f84\u4e0a\u5bf9Cloud Map\u3001Noise \u8fdb\u884c\u591a\u6b21\u91c7\u6837\uff0c\u6700\u540e\u878d\u5408\u6210\u8be5\u50cf\u7d20\u7684\u7ed3\u679c [TODO \u8865\u5145\u5149\u7167\u8ba1\u7b97\u6d41\u7a0b\u3001\u6e32\u67d3\u4f2a\u4ee3\u7801\u3001OpenGL \u5b9e\u73b0\u4ee3\u7801\u94fe\u63a5]","title":"\u6e32\u67d3\u6d41\u7a0b"},{"location":"graphics/cloud-rendering/#reference","text":"GPU Pro 7 Real-Time Volumetric Cloudscapes SIGGRAPH 2015 Advances in Realtime Rendering SIGGRAPH 2017 Advances in Realtime Rendering","title":"Reference"},{"location":"graphics/shadow/","text":"\u5f15\u64ce\u4e2d\u7684\u9634\u5f71 Shadow Mapping \u9759\u6001\u5149\u6e90 \u5b9a\u5411\u5149\u6e90\u7ea7\u8054\u5f0f\u9634\u5f71\u8d34\u56fe\uff08\u5168\u573a\u666f\u9634\u5f71\uff09 \u56fa\u5b9a\u5149\u6e90\u9634\u5f71 \u52a8\u6001\u9634\u5f71 \u9634\u5f71\u9884\u89c8 \u6240\u6709\u9634\u5f71\u7c7b\u578b\u540c\u65f6\u5b58\u5728 \u53c2\u8003 \u6295\u5c04\u9634\u5f71","title":"\u5f15\u64ce\u4e2d\u7684\u9634\u5f71"},{"location":"graphics/shadow/#_1","text":"","title":"\u5f15\u64ce\u4e2d\u7684\u9634\u5f71"},{"location":"graphics/shadow/#shadow-mapping","text":"","title":"Shadow Mapping"},{"location":"graphics/shadow/#_2","text":"","title":"\u9759\u6001\u5149\u6e90"},{"location":"graphics/shadow/#_3","text":"","title":"\u5b9a\u5411\u5149\u6e90\u7ea7\u8054\u5f0f\u9634\u5f71\u8d34\u56fe\uff08\u5168\u573a\u666f\u9634\u5f71\uff09"},{"location":"graphics/shadow/#_4","text":"","title":"\u56fa\u5b9a\u5149\u6e90\u9634\u5f71"},{"location":"graphics/shadow/#_5","text":"","title":"\u52a8\u6001\u9634\u5f71"},{"location":"graphics/shadow/#_6","text":"","title":"\u9634\u5f71\u9884\u89c8"},{"location":"graphics/shadow/#_7","text":"","title":"\u6240\u6709\u9634\u5f71\u7c7b\u578b\u540c\u65f6\u5b58\u5728"},{"location":"graphics/shadow/#_8","text":"\u6295\u5c04\u9634\u5f71","title":"\u53c2\u8003"},{"location":"hybrid-rendering/","text":"\u6df7\u5408\u6e32\u67d3 \u6458\u8981 Hybrid Rendering \u603b\u7eb2\u3002\u672c\u9875\u5c06\u8bb2\u8ff0DirectML\u539f\u7406\uff0c\u7ed3\u6784\u8bbe\u8ba1\u53ca\u6e32\u67d3\u5b9e\u8df5\u3002\u6e90\u7801\u53ca\u76f8\u5173\u5de5\u5177\uff0c\u53ef\u53c2\u9605 Github \u9879\u76ee\u3002 RTX \u6e32\u67d3\u7ba1\u7ebf\u6982\u8ff0 THE HYBRID RENDERING MODEL Previously, real-time graphics relied on rasterizing triangles to render images. Now, with the introduction of RT Cores and Tensor Cores, Turing hardware enables real-time ray tracing for lighting and the use of AI for image enhancement and other applications. The graphics API has evolved in the same direction, with the introduction of DirectX Raytracing and Windows ML as part of the Windows 10 October 2018 update. Taken together, these changes enable a new rendering model, Hybrid Rendering, in which graphics applications use a combination of traditional rendering, ray traced rendering, and AI to produce amazing images in real time. DirectML \u5b9e\u65f6\u6e32\u67d3 ...domains such as games and engines... For reliable real-time, high-performance, low-latency, and/or resource-constrained scenarios...You can integrate DirectML directly into your existing engine or rendering pipeline. 1 TensorRT/ NGX \u5b9e\u65f6\u6e32\u67d3 NGX DNN models can interface with CUDA 10, the DirectX and Vulkan drivers, as well as take advantage of NVIDIA TensorRT... 2 Introduction to DirectML \u21a9 NVIDIA-Turing-Architecture-Whitepaper \u21a9","title":"\u6df7\u5408\u6e32\u67d3"},{"location":"hybrid-rendering/#_1","text":"\u6458\u8981 Hybrid Rendering \u603b\u7eb2\u3002\u672c\u9875\u5c06\u8bb2\u8ff0DirectML\u539f\u7406\uff0c\u7ed3\u6784\u8bbe\u8ba1\u53ca\u6e32\u67d3\u5b9e\u8df5\u3002\u6e90\u7801\u53ca\u76f8\u5173\u5de5\u5177\uff0c\u53ef\u53c2\u9605 Github \u9879\u76ee\u3002","title":"\u6df7\u5408\u6e32\u67d3"},{"location":"hybrid-rendering/#rtx","text":"THE HYBRID RENDERING MODEL Previously, real-time graphics relied on rasterizing triangles to render images. Now, with the introduction of RT Cores and Tensor Cores, Turing hardware enables real-time ray tracing for lighting and the use of AI for image enhancement and other applications. The graphics API has evolved in the same direction, with the introduction of DirectX Raytracing and Windows ML as part of the Windows 10 October 2018 update. Taken together, these changes enable a new rendering model, Hybrid Rendering, in which graphics applications use a combination of traditional rendering, ray traced rendering, and AI to produce amazing images in real time.","title":"RTX \u6e32\u67d3\u7ba1\u7ebf\u6982\u8ff0"},{"location":"hybrid-rendering/#directml","text":"...domains such as games and engines... For reliable real-time, high-performance, low-latency, and/or resource-constrained scenarios...You can integrate DirectML directly into your existing engine or rendering pipeline. 1","title":"DirectML \u5b9e\u65f6\u6e32\u67d3"},{"location":"hybrid-rendering/#tensorrt-ngx","text":"NGX DNN models can interface with CUDA 10, the DirectX and Vulkan drivers, as well as take advantage of NVIDIA TensorRT... 2 Introduction to DirectML \u21a9 NVIDIA-Turing-Architecture-Whitepaper \u21a9","title":"TensorRT/ NGX \u5b9e\u65f6\u6e32\u67d3"},{"location":"hybrid-rendering/pfm-cpp/","text":"Appendix A: pfm \u67e5\u770b\u5668 \u6e90\u7801\u53c2\u8003 Github/Airsim/AirLib/include/common/common_utils/Utils.hpp static void writePfmFile ( const float * const image_data , int width , int height , std :: string path , float scalef = 1 ) { std :: fstream file ( path . c_str (), std :: ios :: out | std :: ios :: binary ); std :: string bands ; float fvalue ; // scale factor and temp value to hold pixel value bands = \"Pf\" ; // grayscale // sign of scalefact indicates endianness, see pfm specs if ( isLittleEndian ()) scalef = - scalef ; // insert header information file << bands << \" \\n \" ; file << width << \" \" ; file << height << \" \\n \" ; file << scalef << \" \\n \" ; if ( bands == \"Pf\" ){ // handle 1-band image for ( int i = 0 ; i < height ; i ++ ) { for ( int j = 0 ; j < width ; ++ j ){ fvalue = image_data [ i * width + j ]; file . write ( reinterpret_cast < char *> ( & fvalue ), sizeof ( fvalue )); } } } }","title":"PFM \u56fe\u7247\u8bfb\u5199"},{"location":"hybrid-rendering/pfm-cpp/#appendix-a-pfm","text":"\u6e90\u7801\u53c2\u8003 Github/Airsim/AirLib/include/common/common_utils/Utils.hpp static void writePfmFile ( const float * const image_data , int width , int height , std :: string path , float scalef = 1 ) { std :: fstream file ( path . c_str (), std :: ios :: out | std :: ios :: binary ); std :: string bands ; float fvalue ; // scale factor and temp value to hold pixel value bands = \"Pf\" ; // grayscale // sign of scalefact indicates endianness, see pfm specs if ( isLittleEndian ()) scalef = - scalef ; // insert header information file << bands << \" \\n \" ; file << width << \" \" ; file << height << \" \\n \" ; file << scalef << \" \\n \" ; if ( bands == \"Pf\" ){ // handle 1-band image for ( int i = 0 ; i < height ; i ++ ) { for ( int j = 0 ; j < width ; ++ j ){ fvalue = image_data [ i * width + j ]; file . write ( reinterpret_cast < char *> ( & fvalue ), sizeof ( fvalue )); } } } }","title":"Appendix A: pfm \u67e5\u770b\u5668"},{"location":"oasis/preface/","text":"\u53d1\u520a\u8bcd \u8bb8\uff1a\u201c\u5230\u5e95\u662f\u4ec0\u4e48\u6837\u7684\u611f\u53d7\u201d \u674e\uff1a\u201c\u53cd\u800c\u662f\u4e50\u5929\u6d3e\uff0c\u4eba\u751f\u7684\u77db\u76fe\u611f\uff0c\u633a\u6709\u610f\u601d\u201d \u201c\u4ec0\u4e48\u611f\u89c9\u5462\uff0c\u5c31\u662f\u6ca1\u52b2\u201d \u201c\u5982\u679c\u6211\u4eec\u7f3a\u4e4f\u601d\u60f3\u7684\u5851\u9020\u7684\u8bdd\uff0c\u5c31\u4f1a\u5b8c\u5168\u6ca6\u4e3a\u4fe1\u606f\u70df\u5c18\u7684\u4fd8\u864f\uff0c\u5f53\u4e00\u4e2a\u5174\u594b\u70b9\u51fa\u73b0\u7684\u65f6\u5019\uff0c\u6240\u6709\u4eba\u50cf\u98ce\u66b4\u4e00\u6837\u6d8c\u8fc7\u53bb\uff0c\u7136\u540e\u98ce\u66b4\u8fc7\u540e\uff0c\u5bf8\u8349\u4e0d\u751f\uff0c\u4ed6\u4eec\u5c31\u5bfb\u627e\u4e0b\u4e00\u4e2a\u98ce\u66b4\u53e3\uff0c\u8fd9\u662f\u4e00\u4e2a\u4fe1\u606f\u793e\u4f1a\u7684\u7279\u70b9\u201d \u201c\u6211\u4eec\u8981\u53bb\u79cd\u5f88\u591a\u7eff\u6d32\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5efa\u5f88\u591a\u4e0d\u540c\u4e2a\u6027\u3001\u4ef7\u503c\u89c2\u3001\u4e0d\u540c\u7684\u601d\u7ef4\u65b9\u5f0f\u3001\u8da3\u5473\u7684\u7eff\u6d32\u3002\u4ed6\u4eec\u4f1a\u62b5\u5fa1\u8fd9\u4e9b\u6c99\u66b4\uff0c\u6211\u5e0c\u671b\u6211\u4eec\u7684\u8282\u76ee\u662f\u4e00\u4e2a\u5c0f\u5c0f\u7684\u7eff\u6d32\u201d \u201c\u7eff\u6d32\u5145\u6c9b\u7684\u65f6\u5019\uff0c\u4ecd\u4f1a\u6709\u98ce\uff0c\u98ce\u4f1a\u66f4\u8f7b\u4e00\u70b9\u201d \u201c\u4eba\u8eab\u4e0a\u6709\u5f88\u591a\u795e\u79d8\u7684\u4e1c\u897f\uff0c\u4ed6\u4f1a\u5524\u8d77\u4f60\u5185\u5728\u7684 calling\uff0c\u5f62\u6210\u67d0\u79cd\u6027\u683c\uff0c\u8fd9\u79cd\u6027\u683c\u4e5f\u6210\u4e3a\u5bfb\u627e\u81ea\u6211\u7684\u67d0\u79cd\u65b9\u5f0f\u201d \u4fde\uff1a\u5230\u4e86\u5e74\u7eaa\u5927\u53d1\u73b0\uff0c\u751f\u547d\u672c\u8eab\uff0c\u65f6\u95f4\u6beb\u65e0\u610f\u4e49\u7684\u4e8b\uff0c\u6d3b\u5f97\u6709\u6ecb\u6709\u5473\uff0c\u529b\u56fe\u627e\u4e9b\u6709\u610f\u4e49\u7684\u4e8b\u505a\uff0c\u6216\u8ba9\u4eba\u89c9\u5f97\u6709\u610f\u4e49\uff0c\u82e5\u771f\u7684\u662f\u9762\u5bf9\u65e0\u610f\u4e49\u592a\u54f2\u5b66\u4e86\u3002\u60c5\u613f\u6d3b\u5f97\u50cf\u4e2a\u51e1\u4eba\uff0c\u627e\u5230\u5b89\u4e8e\u751f\u6d3b\u4e0b\u53bb\u7684\u70b9\u3002\u8d85\u8131\u4e8e\u51e1\u4f53\uff0c\u5c31\u5f53\u81ea\u6b3a\u6b3a\u4eba\uff0c\u83b7\u5f97\u4e50\u5475\u4e00\u70b9\u3002 \u5b58\u5728\u4e3b\u4e49\u7684\u672c\u8d28 \u4e3b\u6d41\u53d9\u4e8b\u4e4b\u5916 \u65f6\u4ee3\u8574\u85cf\u7684\u5de8\u5927\u7126\u8651 \u8fc7\u5ea6\u5a31\u4e50\u5316\u3001\u6d45\u8584","title":"\u53d1\u520a\u8bcd"},{"location":"oasis/preface/#_1","text":"\u8bb8\uff1a\u201c\u5230\u5e95\u662f\u4ec0\u4e48\u6837\u7684\u611f\u53d7\u201d \u674e\uff1a\u201c\u53cd\u800c\u662f\u4e50\u5929\u6d3e\uff0c\u4eba\u751f\u7684\u77db\u76fe\u611f\uff0c\u633a\u6709\u610f\u601d\u201d \u201c\u4ec0\u4e48\u611f\u89c9\u5462\uff0c\u5c31\u662f\u6ca1\u52b2\u201d \u201c\u5982\u679c\u6211\u4eec\u7f3a\u4e4f\u601d\u60f3\u7684\u5851\u9020\u7684\u8bdd\uff0c\u5c31\u4f1a\u5b8c\u5168\u6ca6\u4e3a\u4fe1\u606f\u70df\u5c18\u7684\u4fd8\u864f\uff0c\u5f53\u4e00\u4e2a\u5174\u594b\u70b9\u51fa\u73b0\u7684\u65f6\u5019\uff0c\u6240\u6709\u4eba\u50cf\u98ce\u66b4\u4e00\u6837\u6d8c\u8fc7\u53bb\uff0c\u7136\u540e\u98ce\u66b4\u8fc7\u540e\uff0c\u5bf8\u8349\u4e0d\u751f\uff0c\u4ed6\u4eec\u5c31\u5bfb\u627e\u4e0b\u4e00\u4e2a\u98ce\u66b4\u53e3\uff0c\u8fd9\u662f\u4e00\u4e2a\u4fe1\u606f\u793e\u4f1a\u7684\u7279\u70b9\u201d \u201c\u6211\u4eec\u8981\u53bb\u79cd\u5f88\u591a\u7eff\u6d32\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5efa\u5f88\u591a\u4e0d\u540c\u4e2a\u6027\u3001\u4ef7\u503c\u89c2\u3001\u4e0d\u540c\u7684\u601d\u7ef4\u65b9\u5f0f\u3001\u8da3\u5473\u7684\u7eff\u6d32\u3002\u4ed6\u4eec\u4f1a\u62b5\u5fa1\u8fd9\u4e9b\u6c99\u66b4\uff0c\u6211\u5e0c\u671b\u6211\u4eec\u7684\u8282\u76ee\u662f\u4e00\u4e2a\u5c0f\u5c0f\u7684\u7eff\u6d32\u201d \u201c\u7eff\u6d32\u5145\u6c9b\u7684\u65f6\u5019\uff0c\u4ecd\u4f1a\u6709\u98ce\uff0c\u98ce\u4f1a\u66f4\u8f7b\u4e00\u70b9\u201d \u201c\u4eba\u8eab\u4e0a\u6709\u5f88\u591a\u795e\u79d8\u7684\u4e1c\u897f\uff0c\u4ed6\u4f1a\u5524\u8d77\u4f60\u5185\u5728\u7684 calling\uff0c\u5f62\u6210\u67d0\u79cd\u6027\u683c\uff0c\u8fd9\u79cd\u6027\u683c\u4e5f\u6210\u4e3a\u5bfb\u627e\u81ea\u6211\u7684\u67d0\u79cd\u65b9\u5f0f\u201d \u4fde\uff1a\u5230\u4e86\u5e74\u7eaa\u5927\u53d1\u73b0\uff0c\u751f\u547d\u672c\u8eab\uff0c\u65f6\u95f4\u6beb\u65e0\u610f\u4e49\u7684\u4e8b\uff0c\u6d3b\u5f97\u6709\u6ecb\u6709\u5473\uff0c\u529b\u56fe\u627e\u4e9b\u6709\u610f\u4e49\u7684\u4e8b\u505a\uff0c\u6216\u8ba9\u4eba\u89c9\u5f97\u6709\u610f\u4e49\uff0c\u82e5\u771f\u7684\u662f\u9762\u5bf9\u65e0\u610f\u4e49\u592a\u54f2\u5b66\u4e86\u3002\u60c5\u613f\u6d3b\u5f97\u50cf\u4e2a\u51e1\u4eba\uff0c\u627e\u5230\u5b89\u4e8e\u751f\u6d3b\u4e0b\u53bb\u7684\u70b9\u3002\u8d85\u8131\u4e8e\u51e1\u4f53\uff0c\u5c31\u5f53\u81ea\u6b3a\u6b3a\u4eba\uff0c\u83b7\u5f97\u4e50\u5475\u4e00\u70b9\u3002 \u5b58\u5728\u4e3b\u4e49\u7684\u672c\u8d28 \u4e3b\u6d41\u53d9\u4e8b\u4e4b\u5916 \u65f6\u4ee3\u8574\u85cf\u7684\u5de8\u5927\u7126\u8651 \u8fc7\u5ea6\u5a31\u4e50\u5316\u3001\u6d45\u8584","title":"\u53d1\u520a\u8bcd"},{"location":"paper/","text":"\u8fdb\u5ea6\u7ba1\u7406 TODO \u5bf9\u6bd4 \u5355\u5f20\u56fe\u7247\u8d85\u5206\u8fa8\u7387/FRSS \u5bf9\u6bd4 RAE/FRSS \u5bf9\u6bd4 TAA/FRSS \u7f51\u7edc\u7ed3\u6784\u8f6c\u6362\u4e3a Encoder-decoder FRSS \u4e2d\u52a0\u5165 Space-to-depth \u5c42\uff0c\u4e0e\u672a\u52a0\u5165\u7684\u8fdb\u884c\u5bf9\u6bd4","title":"\u8fdb\u5ea6\u7ba1\u7406"},{"location":"paper/#_1","text":"","title":"\u8fdb\u5ea6\u7ba1\u7406"},{"location":"paper/#todo","text":"\u5bf9\u6bd4 \u5355\u5f20\u56fe\u7247\u8d85\u5206\u8fa8\u7387/FRSS \u5bf9\u6bd4 RAE/FRSS \u5bf9\u6bd4 TAA/FRSS \u7f51\u7edc\u7ed3\u6784\u8f6c\u6362\u4e3a Encoder-decoder FRSS \u4e2d\u52a0\u5165 Space-to-depth \u5c42\uff0c\u4e0e\u672a\u52a0\u5165\u7684\u8fdb\u884c\u5bf9\u6bd4","title":"TODO"},{"location":"paper/convention-anti-aliasing/","text":"\u53cd\u8d70\u6837\u7b97\u6cd5 \u6e38\u620f\u6297\u952f\u9f7f\u5373\u56fe\u5f62\u5b66 Anti-Aliasing\uff08\u53cd\u8d70\u6837\uff09\uff0cFXAA\u3001MSAA\u3001TAA \u7f29\u7565\u4e2d\u7684 AA \u6765\u6e90\uff0c\u672c\u6587\u6211\u4eec\u4f7f\u7528\u56fe\u5f62\u5b66\u7684\u53cd\u8d70\u6837\u8fd9\u4e00\u672f\u8bed\u3002 \u53cd\u8d70\u6837\u672c\u8d28\u662f\u4e3a\u4e86\u89e3\u51b3\u91c7\u6837\u4e0d\u8db3\u7684\u95ee\u9898\u3002\u9700\u5728\u6e38\u620f\u753b\u9762\u8d28\u91cf\u548c\u6e32\u67d3\u6548\u7387\u6743\u8861\u4e0b\uff0c\u8fdb\u884c\u56fe\u5f62\u589e\u5f3a\u3002\u6211\u4eec\u671f\u671b\u5f15\u64ce\u4e2d\u4e3b\u6d41\u7684 AA \u7b97\u6cd5\u80fd\u5927\u5e45\u5ea6\u6539\u5584\u6e38\u620f\u4e2d\u7684\u8d70\u6837\u73b0\u8c61\u7684\u540c\u65f6\uff0c\u4e0d\u589e\u52a0\u592a\u591a\u65f6\u95f4\u7684\u5f00\u9500\u3002 \u7ecf\u8fc7\u591a\u5e74\u6f14\u8fdb\uff0c\u53cd\u8d70\u6837\u7b97\u6cd5\u4ea7\u751f\u4e86\u591a\u79cd\u5206\u652f\u3002\u968f\u7740\u6e38\u620f\u5f15\u64ce\u4e0e\u786c\u4ef6\u7684\u53d1\u5c55\uff0c\u6700\u521d\u7528\u4e8e\u6297\u952f\u9f7f\u7684 FXAA\u3001MSAA \u9010\u6e10\u88ab Temporal AA\u3001DLSS \u7b49\u65b0\u79c0\u53d6\u4ee3\u3002 \u672c\u6587\u6311\u9009\u5546\u7528\u6e38\u620f\u5f15\u64ce\u4e2d\u6700\u5177\u4ee3\u8868\u7684\u51e0\u79cd AA \u7b97\u6cd5\uff0c\u5bf9\u5176\u5e95\u5c42\u539f\u7406\u8fdb\u884c\u5256\u6790\uff0c\u5e76\u8fdb\u884c\u76f8\u4e92\u6bd4\u8f83\u3002 \u4e3b\u6d41 AA \u7b97\u6cd5\uff1a\u54ea\u79cd\u7b97\u6cd5\u6700\u4f73\uff1f \u57fa\u4e8e\u56fe\u50cf\u540e\u5904\u7406\u7684 AA \u7b97\u6cd5\uff1a\u7b80\u5355\u7684\u56fe\u50cf\u540e\u5904\u7406\uff0c\u6839\u636e\u50cf\u7d20\u90bb\u57df\u4fe1\u606f\u8fdb\u884c\u878d\u5408\uff0c\u6027\u80fd\u5f00\u9500\u5c0f\uff0c\u5bf9\u4e8e\u8fb9\u7f18\u5e73\u6ed1\u660e\u663e\uff0c\u5e38\u89c1\u4e8e FXAA\u3002 \u589e\u52a0\u50cf\u7d20\u91c7\u6837\u6570 AA \u7b97\u6cd5\uff1a\u4ed6\u4eec\u5bf9\u4e8e\u5355\u4e2a\u50cf\u7d20\u989c\u8272\uff0c\u4f7f\u7528\u4e86\u591a\u4e2a\u6837\u672c\u70b9\u5e73\u5747\uff0c\u5f97\u51fa\u7684\u7ed3\u679c\u66f4\u7cbe\u786e\u3002\u7b97\u6cd5\u5f00\u9500\u4e2d\u7b49\uff0c\u6548\u679c\u660e\u663e\u4f18\u4e8e FXAA\uff0c\u4e14\u6d88\u8017\u66f4\u591a\u7684 GPU \u5185\u5b58\u8d44\u6e90\uff0cMSAA\u3001Temporal AA \u5c5e\u4e8e\u8be5\u7c7b\u7b97\u6cd5\u3002 \u57fa\u4e8e\u6df1\u5ea6\u5b66\u4e60\u7684 AA \u7b97\u6cd5\uff1a\u524d\u4e24\u79cd\u7b97\u6cd5\u7684\u7ec4\u5408\uff0c\u5229\u7528\u795e\u7ecf\u7f51\u7edc\u7684\u91cd\u5efa\u80fd\u529b\u8fdb\u884c\u56fe\u50cf\u5904\u7406\u3002\u6548\u679c\u8f83\u597d\uff0c\u7b97\u6cd5\u5f00\u9500\u6700\u9ad8\uff0c\u540c\u65f6\u5229\u7528\u65f6\u57df\u4fe1\u606f\u589e\u52a0\u5355\u4e2a\u50cf\u7d20\u7684\u91c7\u6837\u70b9\uff0c\u5e38\u89c1\u7b97\u6cd5 DLSS\uff08\u9700\u8981\u7279\u6b8a\u786c\u4ef6 Tensor Core \u7684\u652f\u6301\uff0c\u5f53\u524d\uff0c\u4ec5 RTX 20 \u7cfb\u5217\u7684\u5c11\u91cf\u6e38\u620f\u80fd\u5f00\u542f\uff09\u3002 \u63a5\u4e0b\u6765\u7684\u7ae0\u8282\u4f1a\u6db5\u76d6\u6bcf\u79cd\u7b97\u6cd5\u7684\u539f\u7406\u3001\u8d44\u6e90\u6d88\u8017\u3001\u6548\u679c\u3001\u6297\u952f\u9f7f\u7c7b\u522b\u3001\u6240\u5904\u6e32\u67d3\u6d41\u7a0b\u4e94\u4e2a\u7ef4\u5ea6\u3002 DLSS \u5de6\u8fb9\u5c0f\u6846\u662f\u539f\u56fe\uff0c\u53f3\u8fb9\u5c0f\u6846\u662f\u5229\u7528\u6df1\u5ea6\u5b66\u4e60\u91cd\u5efa\u51fa\u7684\u753b\u9762 \u4ece\u82f1\u4f1f\u8fbe\u5b98\u65b9\u53d1\u5e03\u7684 Demo \u770b\uff0c\u6df1\u5ea6\u5b66\u4e60\u7684\u53cd\u8d70\u6837\u6548\u679c\u4f18\u4e8e\u4e3b\u6d41\u6e38\u620f\u5f15\u64ce\u4e2d\u7684 Temporal AA DLSS \u80cc\u540e\u4f7f\u7528\u7684\u6280\u672f\u662f Recurrent CNN\uff0c\u9012\u5f52\u795e\u7ecf\u7f51\u7edc\u4e0e\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u7684\u4e00\u79cd\u7ed3\u5408\u3002\u56e0\u6b64\u4ed6\u80fd\u7ed3\u5408\u65f6\u57df\u4e0a\u7684\u4fe1\u606f\u4fdd\u8bc1\u65f6\u57df\u7a33\u5b9a\u6027\u2014\u2014\u50cf\u7d20\u5177\u6709\u5e27\u95f4\u8fde\u8d2f\u6027\uff0c\u4e0d\u4f1a\u51fa\u73b0\u8fc7\u591a\u95ea\u70c1\u3001\u8df3\u53d8\u73b0\u8c61\u3002\u5176\u6b21\uff0c\u7ed3\u5408\u795e\u7ecf\u7f51\u7edc\u7684\u5f3a\u5927\u56fe\u5f62\u91cd\u5efa\u80fd\u529b\uff0cDLSS \u80fd\u591f\u5206\u522b\u5bf9\u51e0\u4f55\u8fb9\u7f18\u4ee5\u53ca\u7740\u8272\u8fdb\u884c\u91cd\u5efa\u3002 DLSS \u795e\u7ecf\u7f51\u7edc\u7ed3\u6784\u7c7b\u4f3c\u4e8e\u82f1\u4f1f\u8fbe\u5728 SIGGRAPH 17 \u53d1\u8868\u8bba\u6587\uff1a \u603b\u4f53\u6765\u8bf4\uff0c\u4f9d\u636e\u82f1\u4f1f\u8fbe\u7684\u5b98\u65b9\u8d44\u6599\u5f97\u51fa\u7684\u7ed3\u8bba\u662f\uff0cDLSS \u6548\u679c\u4f18\u4e8e\u73b0\u6709\u7684\u4e3b\u6d41 AA \u7b97\u6cd5\uff0c\u5b83\u80fd\u540c\u65f6\u5728\u51e0\u4f55\u3001\u7740\u8272\u3001\u65f6\u57df\u4e0a\u8fdb\u884c\u53cd\u8d70\u6837\uff1b\u4e0d\u8db3\u4e4b\u5904\u662f\u795e\u7ecf\u7f51\u7edc\u5e26\u6765\u7684\u6027\u80fd\u5f00\u9500\u6bd4\u8f83\u5927\uff0c\u4ec5\u4ec5\u53cd\u8d70\u6837\u5c31\u5360\u7528\u4e86\u753b\u9762 20% \u7684\u6e32\u67d3\u65f6\u957f\uff0c\u76f8\u6bd4\u4e4b\u4e0b Temporal AA \u5f00\u9500\u4f4e\u4e86\u4e00\u4e2a\u91cf\u7ea7\u3002 3DMark: TAA vs DLSS image quality comparison using the NVIDIA DLSS feature test \u77e5\u4e4e\u4e0a\u4f20\u56fe\u7247\u8f83\u6a21\u7cca\uff0c\u611f\u5174\u8da3\u53ef\u4ee5\u53c2\u9605\u4e0a\u65b9 3D Mark YouTube \u94fe\u63a5\uff0cDLSS \u6539\u8fdb TAA \u6a21\u7cca\u7684\u540c\u65f6\uff0c\u6709\u66f4\u597d\u7684\u5149\u7167\u6548\u679c \u6240\u5904\u6d41\u7a0b \u56fe\u5f62\u540e\u5904\u7406 \u6297\u952f\u9f7f\u7c7b\u522b \u65f6\u57df\u3001\u51e0\u4f55\u3001\u7740\u8272 \u4f7f\u7528\u573a\u666f \u62e5\u6709 RTX 20 \u7cfb\u5217\u663e\u5361\uff0c\u5bf9\u753b\u8d28\u654f\u611f\u73a9\u5bb6\uff0c\u8ffd\u6c42\u6781\u4f73\u56fe\u5f62/\u5149\u7167\u6548\u679c\uff0cDLSS 2X \u6a21\u5f0f\u5bf9\u6807 64X SSAA\u3002 \u4f18\u7f3a\u70b9 MSAA MSAA \u5728\u5149\u6805\u5316\u8fc7\u7a0b\u4e2d\u8ba1\u7b97\u591a\u4e2a\u5b50\u50cf\u7d20\u7684 Coverage \u60c5\u51b5\uff0c\u7740\u8272\u4ec5\u8fdb\u884c\u4e00\u6b21\uff0cResolve\u7684\u65f6\u5019\u5c06\u7740\u8272\u7ed3\u679c\u4e58\u4e0a Coverage \u7684\u6bd4\u4f8b\uff0c\u4ece\u7ed3\u679c\u4e0a\u770b MSAA \u51e0\u4f55\u8fb9\u7f18\u53cd\u8d70\u6837\u6548\u679c\u826f\u597d\u3002 \u6240\u5904\u6d41\u7a0b \u5149\u6805\u5316\uff0c\u4ec5\u652f\u6301\u524d\u5411\u6e32\u67d3\uff0c\u65e0\u6cd5\u878d\u5408\u8fdb\u4e3b\u6d41\u7684\u5ef6\u8fdf\u6e32\u67d3\u3002 \u4f7f\u7528\u573a\u666f \u524d\u5411\u6e32\u67d3 \u6297\u952f\u9f7f\u7c7b\u522b \u51e0\u4f55 \u4f18\u7f3a\u70b9 Temporal AA \u65f6\u57df\u53cd\u8d70\u6837 Temporal AA \u662f\u8fd1\u5e74\u6765\u5546\u4e1a\u5f15\u64ce\u6700\u6d41\u884c\u7684\u51e0\u79cd\u53cd\u8d70\u6837\u7b97\u6cd5\u4e4b\u4e00\u3002\u5b83\u4ee5\u540e\u5904\u7406\u7684\u65b9\u5f0f\u878d\u5165\u6e32\u67d3\u6d41\uff0c\u826f\u597d\u7684\u6297\u952f\u9f7f\u6548\u679c\u4ee5\u53ca\u4e0e\u5ef6\u8fdf\u6e32\u67d3\u7684\u9002\u914d\uff0c\u4f7f\u5f97\u4e1a\u754c\u6e38\u620f\u975e\u5e38\u4e50\u4e8e\u91c7\u53d6\u8fd9\u79cd\u6297\u952f\u9f7f\u65b9\u5f0f\u3002 \u7b97\u6cd5\u601d\u60f3\u53ef\u4ee5\u770b\u524d\u4e00\u7bc7\u6587\u7ae0\uff0cTAA \u53cd\u8d70\u6837\u7b97\u6cd5\u7814\u7a76 | \u65f6\u57df\u8d85\u91c7\u6837\u6280\u672f \u3002\u7b80\u5355\u6765\u8bf4\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u5e27\u6e38\u620f\u753b\u9762\uff0c\u76f8\u673a\u6296\u52a8 0.x~1 \u50cf\u7d20\u3002\u90a3\u4e48\u5728\u65f6\u57df\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u5f53\u524d\u50cf\u7d20\u7684\u591a\u4e2a\u5b50\u50cf\u7d20\u4fe1\u606f\u3002\u65f6\u57df\u4e0a\u8fdb\u884c\u52a0\u6743\u878d\u5408\u540e\uff0c\u5f97\u5230\u5f53\u524d\u50cf\u7d20\u7684\u6700\u7ec8\u989c\u8272\u3002 \u5176\u539f\u7406\u63a5\u8fd1 SSAA\uff0c\u4e0d\u540c\u7684\u662fTemporal AA \u5c06\u91c7\u6837\u70b9\u5206\u644a\u5230\u5386\u53f2\u5e27\u4e0a\u3002 MSAA \u4e0e TXAA \u6bd4\u8f83\uff0c\u82f1\u4f1f\u8fbe TXAA \u662f TAA \u4e0e SMAA \u7684\u878d\u5408\u7248\u672c \u6240\u5904\u6d41\u7a0b \u56fe\u5f62\u540e\u5904\u7406 \u4f7f\u7528\u573a\u666f \u652f\u6301\u4e3b\u6d41\u6e38\u620f\u5f15\u64ce\u4f7f\u7528\u7684\u5ef6\u8fdf\u6e32\u67d3\uff0c\u91c7\u6837\u6837\u672c\u5206\u644a\u5728\u65f6\u57df\u4e0a\uff0c\u5f00\u9500\u5c0f\uff0c\u6297\u952f\u9f7f\u80fd\u529b\u5f3a\u3002 \u6297\u952f\u9f7f\u7c7b\u522b \u51e0\u4f55\u3001\u7740\u8272\u3001\u65f6\u57df \u4f18\u7f3a\u70b9 FXAA \u6700\u7b80\u5355\u7684\u3001\u9ad8\u6548\u7387\u7684\u6297\u952f\u9f7f\u65b9\u5f0f\uff0c\u5bf9\u56fe\u5f62\u8fb9\u7f18\u8fdb\u884c\u540e\u5904\u7406\u3002 \u6240\u5904\u6d41\u7a0b \u56fe\u5f62\u540e\u5904\u7406 \u4f7f\u7528\u573a\u666f \u5f00\u9500\u6781\u5c0f\uff0c\u5bf9\u56fe\u5f62\u8fb9\u7f18\u8fdb\u884c\u67d4\u5316\u3002 \u6297\u952f\u9f7f\u7c7b\u522b \u51e0\u4f55\u3001\u7740\u8272 \u4f18\u7f3a\u70b9 \u5c0f\u7ed3 \u6bcf\u79cd AA \u7b97\u6cd5\u6709\u5176\u7279\u5b9a\u4f7f\u7528\u573a\u666f\uff0c\u5728\u6027\u80fd/\u753b\u8d28\u7684 Trade off \u4e0b\uff0c\u4f60\u7684\u786c\u4ef6\u914d\u7f6e\u53ca\u6e38\u620f\u6e32\u67d3\u65b9\u5f0f\u51b3\u5b9a\u4e86\u6700\u4f18\u9009\u62e9\u3002 \u5bf9\u4e8e\u8ffd\u6c42\u9ad8\u5e27\u7387/\u4f4e\u753b\u8d28\u6539\u5584\u7684\u4eba\u6765\u8bf4 FXAA \u8f83\u4e3a\u5b9e\u7528\uff1b \u62e5\u6709\u82f1\u4f1f\u8fbe\u6700\u65b0 RTX 20 \u7cfb\u5217\u663e\u5361\u7684\u6e38\u620f\u73a9\u5bb6\u6765\u8bf4\uff0c\u4e0d\u59a8\u8bd5\u8bd5 DLSS 2X \u6280\u672f\u5e26\u6765\u7684\u7edd\u4f73\u753b\u8d28\uff1b \u7edd\u5927\u591a\u6570\u7528\u6237\uff0cTAA \u5728\u4e0d\u5e26\u6765\u592a\u591a\u6027\u80fd\u635f\u5931\u7684\u60c5\u51b5\u4e0b\uff0c\u5bf9\u753b\u8d28\u6539\u5584\u8f83\u597d\uff0c\u80fd\u6ee1\u8db3\u5927\u90e8\u5206\u4f7f\u7528\u573a\u666f\u3002 \u5bf9\u90a3\u4e9b\u4ecd\u5728\u4f7f\u7528 Forward Shading \u7684\u6e38\u620f\u6765\u8bf4\uff0cMSAA \u662f\u6700\u4f73\u9009\u62e9\u3002 Appendix A\uff1a\u82f1\u4f1f\u8fbe\u5728\u7ebf Anti-Aliasing \u7b97\u6cd5\u6bd4\u8f83 FXAA vs No AA SMAA vs FXAA 4x MSAA vs SMAA 8x MSAA vs 4x TXAA SSAA 4x vs SMAA 4x TXAA vs 4x MSAA Appendix B\uff1a\u53c2\u8003\u6587\u7ae0 Anti-Aliasing: What Is It and Why Do We Need It? Anti-alias \u7684\u524d\u4e16\u4eca\u751f-\u5e38\u7528\u53cd\u8d70\u6837\u7b97\u6cd5\u603b\u7ed3 \u9f9a\u654f\u654f \u6e38\u620f\u4e2d\u7684\u6297\u952f\u9f7f\u6280\u672fAnti-Alasing\u63d0\u70bc\u603b\u7ed3 \u9f9a\u654f\u654f aa \u603b\u7ed3","title":"\u53cd\u8d70\u6837\u7b97\u6cd5"},{"location":"paper/convention-anti-aliasing/#_1","text":"\u6e38\u620f\u6297\u952f\u9f7f\u5373\u56fe\u5f62\u5b66 Anti-Aliasing\uff08\u53cd\u8d70\u6837\uff09\uff0cFXAA\u3001MSAA\u3001TAA \u7f29\u7565\u4e2d\u7684 AA \u6765\u6e90\uff0c\u672c\u6587\u6211\u4eec\u4f7f\u7528\u56fe\u5f62\u5b66\u7684\u53cd\u8d70\u6837\u8fd9\u4e00\u672f\u8bed\u3002 \u53cd\u8d70\u6837\u672c\u8d28\u662f\u4e3a\u4e86\u89e3\u51b3\u91c7\u6837\u4e0d\u8db3\u7684\u95ee\u9898\u3002\u9700\u5728\u6e38\u620f\u753b\u9762\u8d28\u91cf\u548c\u6e32\u67d3\u6548\u7387\u6743\u8861\u4e0b\uff0c\u8fdb\u884c\u56fe\u5f62\u589e\u5f3a\u3002\u6211\u4eec\u671f\u671b\u5f15\u64ce\u4e2d\u4e3b\u6d41\u7684 AA \u7b97\u6cd5\u80fd\u5927\u5e45\u5ea6\u6539\u5584\u6e38\u620f\u4e2d\u7684\u8d70\u6837\u73b0\u8c61\u7684\u540c\u65f6\uff0c\u4e0d\u589e\u52a0\u592a\u591a\u65f6\u95f4\u7684\u5f00\u9500\u3002 \u7ecf\u8fc7\u591a\u5e74\u6f14\u8fdb\uff0c\u53cd\u8d70\u6837\u7b97\u6cd5\u4ea7\u751f\u4e86\u591a\u79cd\u5206\u652f\u3002\u968f\u7740\u6e38\u620f\u5f15\u64ce\u4e0e\u786c\u4ef6\u7684\u53d1\u5c55\uff0c\u6700\u521d\u7528\u4e8e\u6297\u952f\u9f7f\u7684 FXAA\u3001MSAA \u9010\u6e10\u88ab Temporal AA\u3001DLSS \u7b49\u65b0\u79c0\u53d6\u4ee3\u3002 \u672c\u6587\u6311\u9009\u5546\u7528\u6e38\u620f\u5f15\u64ce\u4e2d\u6700\u5177\u4ee3\u8868\u7684\u51e0\u79cd AA \u7b97\u6cd5\uff0c\u5bf9\u5176\u5e95\u5c42\u539f\u7406\u8fdb\u884c\u5256\u6790\uff0c\u5e76\u8fdb\u884c\u76f8\u4e92\u6bd4\u8f83\u3002","title":"\u53cd\u8d70\u6837\u7b97\u6cd5"},{"location":"paper/convention-anti-aliasing/#aa","text":"\u57fa\u4e8e\u56fe\u50cf\u540e\u5904\u7406\u7684 AA \u7b97\u6cd5\uff1a\u7b80\u5355\u7684\u56fe\u50cf\u540e\u5904\u7406\uff0c\u6839\u636e\u50cf\u7d20\u90bb\u57df\u4fe1\u606f\u8fdb\u884c\u878d\u5408\uff0c\u6027\u80fd\u5f00\u9500\u5c0f\uff0c\u5bf9\u4e8e\u8fb9\u7f18\u5e73\u6ed1\u660e\u663e\uff0c\u5e38\u89c1\u4e8e FXAA\u3002 \u589e\u52a0\u50cf\u7d20\u91c7\u6837\u6570 AA \u7b97\u6cd5\uff1a\u4ed6\u4eec\u5bf9\u4e8e\u5355\u4e2a\u50cf\u7d20\u989c\u8272\uff0c\u4f7f\u7528\u4e86\u591a\u4e2a\u6837\u672c\u70b9\u5e73\u5747\uff0c\u5f97\u51fa\u7684\u7ed3\u679c\u66f4\u7cbe\u786e\u3002\u7b97\u6cd5\u5f00\u9500\u4e2d\u7b49\uff0c\u6548\u679c\u660e\u663e\u4f18\u4e8e FXAA\uff0c\u4e14\u6d88\u8017\u66f4\u591a\u7684 GPU \u5185\u5b58\u8d44\u6e90\uff0cMSAA\u3001Temporal AA \u5c5e\u4e8e\u8be5\u7c7b\u7b97\u6cd5\u3002 \u57fa\u4e8e\u6df1\u5ea6\u5b66\u4e60\u7684 AA \u7b97\u6cd5\uff1a\u524d\u4e24\u79cd\u7b97\u6cd5\u7684\u7ec4\u5408\uff0c\u5229\u7528\u795e\u7ecf\u7f51\u7edc\u7684\u91cd\u5efa\u80fd\u529b\u8fdb\u884c\u56fe\u50cf\u5904\u7406\u3002\u6548\u679c\u8f83\u597d\uff0c\u7b97\u6cd5\u5f00\u9500\u6700\u9ad8\uff0c\u540c\u65f6\u5229\u7528\u65f6\u57df\u4fe1\u606f\u589e\u52a0\u5355\u4e2a\u50cf\u7d20\u7684\u91c7\u6837\u70b9\uff0c\u5e38\u89c1\u7b97\u6cd5 DLSS\uff08\u9700\u8981\u7279\u6b8a\u786c\u4ef6 Tensor Core \u7684\u652f\u6301\uff0c\u5f53\u524d\uff0c\u4ec5 RTX 20 \u7cfb\u5217\u7684\u5c11\u91cf\u6e38\u620f\u80fd\u5f00\u542f\uff09\u3002 \u63a5\u4e0b\u6765\u7684\u7ae0\u8282\u4f1a\u6db5\u76d6\u6bcf\u79cd\u7b97\u6cd5\u7684\u539f\u7406\u3001\u8d44\u6e90\u6d88\u8017\u3001\u6548\u679c\u3001\u6297\u952f\u9f7f\u7c7b\u522b\u3001\u6240\u5904\u6e32\u67d3\u6d41\u7a0b\u4e94\u4e2a\u7ef4\u5ea6\u3002","title":"\u4e3b\u6d41 AA \u7b97\u6cd5\uff1a\u54ea\u79cd\u7b97\u6cd5\u6700\u4f73\uff1f"},{"location":"paper/convention-anti-aliasing/#dlss","text":"\u5de6\u8fb9\u5c0f\u6846\u662f\u539f\u56fe\uff0c\u53f3\u8fb9\u5c0f\u6846\u662f\u5229\u7528\u6df1\u5ea6\u5b66\u4e60\u91cd\u5efa\u51fa\u7684\u753b\u9762 \u4ece\u82f1\u4f1f\u8fbe\u5b98\u65b9\u53d1\u5e03\u7684 Demo \u770b\uff0c\u6df1\u5ea6\u5b66\u4e60\u7684\u53cd\u8d70\u6837\u6548\u679c\u4f18\u4e8e\u4e3b\u6d41\u6e38\u620f\u5f15\u64ce\u4e2d\u7684 Temporal AA DLSS \u80cc\u540e\u4f7f\u7528\u7684\u6280\u672f\u662f Recurrent CNN\uff0c\u9012\u5f52\u795e\u7ecf\u7f51\u7edc\u4e0e\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\u7684\u4e00\u79cd\u7ed3\u5408\u3002\u56e0\u6b64\u4ed6\u80fd\u7ed3\u5408\u65f6\u57df\u4e0a\u7684\u4fe1\u606f\u4fdd\u8bc1\u65f6\u57df\u7a33\u5b9a\u6027\u2014\u2014\u50cf\u7d20\u5177\u6709\u5e27\u95f4\u8fde\u8d2f\u6027\uff0c\u4e0d\u4f1a\u51fa\u73b0\u8fc7\u591a\u95ea\u70c1\u3001\u8df3\u53d8\u73b0\u8c61\u3002\u5176\u6b21\uff0c\u7ed3\u5408\u795e\u7ecf\u7f51\u7edc\u7684\u5f3a\u5927\u56fe\u5f62\u91cd\u5efa\u80fd\u529b\uff0cDLSS \u80fd\u591f\u5206\u522b\u5bf9\u51e0\u4f55\u8fb9\u7f18\u4ee5\u53ca\u7740\u8272\u8fdb\u884c\u91cd\u5efa\u3002 DLSS \u795e\u7ecf\u7f51\u7edc\u7ed3\u6784\u7c7b\u4f3c\u4e8e\u82f1\u4f1f\u8fbe\u5728 SIGGRAPH 17 \u53d1\u8868\u8bba\u6587\uff1a \u603b\u4f53\u6765\u8bf4\uff0c\u4f9d\u636e\u82f1\u4f1f\u8fbe\u7684\u5b98\u65b9\u8d44\u6599\u5f97\u51fa\u7684\u7ed3\u8bba\u662f\uff0cDLSS \u6548\u679c\u4f18\u4e8e\u73b0\u6709\u7684\u4e3b\u6d41 AA \u7b97\u6cd5\uff0c\u5b83\u80fd\u540c\u65f6\u5728\u51e0\u4f55\u3001\u7740\u8272\u3001\u65f6\u57df\u4e0a\u8fdb\u884c\u53cd\u8d70\u6837\uff1b\u4e0d\u8db3\u4e4b\u5904\u662f\u795e\u7ecf\u7f51\u7edc\u5e26\u6765\u7684\u6027\u80fd\u5f00\u9500\u6bd4\u8f83\u5927\uff0c\u4ec5\u4ec5\u53cd\u8d70\u6837\u5c31\u5360\u7528\u4e86\u753b\u9762 20% \u7684\u6e32\u67d3\u65f6\u957f\uff0c\u76f8\u6bd4\u4e4b\u4e0b Temporal AA \u5f00\u9500\u4f4e\u4e86\u4e00\u4e2a\u91cf\u7ea7\u3002 3DMark: TAA vs DLSS image quality comparison using the NVIDIA DLSS feature test \u77e5\u4e4e\u4e0a\u4f20\u56fe\u7247\u8f83\u6a21\u7cca\uff0c\u611f\u5174\u8da3\u53ef\u4ee5\u53c2\u9605\u4e0a\u65b9 3D Mark YouTube \u94fe\u63a5\uff0cDLSS \u6539\u8fdb TAA \u6a21\u7cca\u7684\u540c\u65f6\uff0c\u6709\u66f4\u597d\u7684\u5149\u7167\u6548\u679c \u6240\u5904\u6d41\u7a0b \u56fe\u5f62\u540e\u5904\u7406 \u6297\u952f\u9f7f\u7c7b\u522b \u65f6\u57df\u3001\u51e0\u4f55\u3001\u7740\u8272 \u4f7f\u7528\u573a\u666f \u62e5\u6709 RTX 20 \u7cfb\u5217\u663e\u5361\uff0c\u5bf9\u753b\u8d28\u654f\u611f\u73a9\u5bb6\uff0c\u8ffd\u6c42\u6781\u4f73\u56fe\u5f62/\u5149\u7167\u6548\u679c\uff0cDLSS 2X \u6a21\u5f0f\u5bf9\u6807 64X SSAA\u3002 \u4f18\u7f3a\u70b9","title":"DLSS"},{"location":"paper/convention-anti-aliasing/#msaa","text":"MSAA \u5728\u5149\u6805\u5316\u8fc7\u7a0b\u4e2d\u8ba1\u7b97\u591a\u4e2a\u5b50\u50cf\u7d20\u7684 Coverage \u60c5\u51b5\uff0c\u7740\u8272\u4ec5\u8fdb\u884c\u4e00\u6b21\uff0cResolve\u7684\u65f6\u5019\u5c06\u7740\u8272\u7ed3\u679c\u4e58\u4e0a Coverage \u7684\u6bd4\u4f8b\uff0c\u4ece\u7ed3\u679c\u4e0a\u770b MSAA \u51e0\u4f55\u8fb9\u7f18\u53cd\u8d70\u6837\u6548\u679c\u826f\u597d\u3002 \u6240\u5904\u6d41\u7a0b \u5149\u6805\u5316\uff0c\u4ec5\u652f\u6301\u524d\u5411\u6e32\u67d3\uff0c\u65e0\u6cd5\u878d\u5408\u8fdb\u4e3b\u6d41\u7684\u5ef6\u8fdf\u6e32\u67d3\u3002 \u4f7f\u7528\u573a\u666f \u524d\u5411\u6e32\u67d3 \u6297\u952f\u9f7f\u7c7b\u522b \u51e0\u4f55 \u4f18\u7f3a\u70b9","title":"MSAA"},{"location":"paper/convention-anti-aliasing/#temporal-aa","text":"Temporal AA \u662f\u8fd1\u5e74\u6765\u5546\u4e1a\u5f15\u64ce\u6700\u6d41\u884c\u7684\u51e0\u79cd\u53cd\u8d70\u6837\u7b97\u6cd5\u4e4b\u4e00\u3002\u5b83\u4ee5\u540e\u5904\u7406\u7684\u65b9\u5f0f\u878d\u5165\u6e32\u67d3\u6d41\uff0c\u826f\u597d\u7684\u6297\u952f\u9f7f\u6548\u679c\u4ee5\u53ca\u4e0e\u5ef6\u8fdf\u6e32\u67d3\u7684\u9002\u914d\uff0c\u4f7f\u5f97\u4e1a\u754c\u6e38\u620f\u975e\u5e38\u4e50\u4e8e\u91c7\u53d6\u8fd9\u79cd\u6297\u952f\u9f7f\u65b9\u5f0f\u3002 \u7b97\u6cd5\u601d\u60f3\u53ef\u4ee5\u770b\u524d\u4e00\u7bc7\u6587\u7ae0\uff0cTAA \u53cd\u8d70\u6837\u7b97\u6cd5\u7814\u7a76 | \u65f6\u57df\u8d85\u91c7\u6837\u6280\u672f \u3002\u7b80\u5355\u6765\u8bf4\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u5e27\u6e38\u620f\u753b\u9762\uff0c\u76f8\u673a\u6296\u52a8 0.x~1 \u50cf\u7d20\u3002\u90a3\u4e48\u5728\u65f6\u57df\u4e0a\uff0c\u6211\u4eec\u53ef\u4ee5\u5f97\u5230\u5f53\u524d\u50cf\u7d20\u7684\u591a\u4e2a\u5b50\u50cf\u7d20\u4fe1\u606f\u3002\u65f6\u57df\u4e0a\u8fdb\u884c\u52a0\u6743\u878d\u5408\u540e\uff0c\u5f97\u5230\u5f53\u524d\u50cf\u7d20\u7684\u6700\u7ec8\u989c\u8272\u3002 \u5176\u539f\u7406\u63a5\u8fd1 SSAA\uff0c\u4e0d\u540c\u7684\u662fTemporal AA \u5c06\u91c7\u6837\u70b9\u5206\u644a\u5230\u5386\u53f2\u5e27\u4e0a\u3002 MSAA \u4e0e TXAA \u6bd4\u8f83\uff0c\u82f1\u4f1f\u8fbe TXAA \u662f TAA \u4e0e SMAA \u7684\u878d\u5408\u7248\u672c \u6240\u5904\u6d41\u7a0b \u56fe\u5f62\u540e\u5904\u7406 \u4f7f\u7528\u573a\u666f \u652f\u6301\u4e3b\u6d41\u6e38\u620f\u5f15\u64ce\u4f7f\u7528\u7684\u5ef6\u8fdf\u6e32\u67d3\uff0c\u91c7\u6837\u6837\u672c\u5206\u644a\u5728\u65f6\u57df\u4e0a\uff0c\u5f00\u9500\u5c0f\uff0c\u6297\u952f\u9f7f\u80fd\u529b\u5f3a\u3002 \u6297\u952f\u9f7f\u7c7b\u522b \u51e0\u4f55\u3001\u7740\u8272\u3001\u65f6\u57df \u4f18\u7f3a\u70b9","title":"Temporal AA \u65f6\u57df\u53cd\u8d70\u6837"},{"location":"paper/convention-anti-aliasing/#fxaa","text":"\u6700\u7b80\u5355\u7684\u3001\u9ad8\u6548\u7387\u7684\u6297\u952f\u9f7f\u65b9\u5f0f\uff0c\u5bf9\u56fe\u5f62\u8fb9\u7f18\u8fdb\u884c\u540e\u5904\u7406\u3002 \u6240\u5904\u6d41\u7a0b \u56fe\u5f62\u540e\u5904\u7406 \u4f7f\u7528\u573a\u666f \u5f00\u9500\u6781\u5c0f\uff0c\u5bf9\u56fe\u5f62\u8fb9\u7f18\u8fdb\u884c\u67d4\u5316\u3002 \u6297\u952f\u9f7f\u7c7b\u522b \u51e0\u4f55\u3001\u7740\u8272 \u4f18\u7f3a\u70b9","title":"FXAA"},{"location":"paper/convention-anti-aliasing/#_2","text":"\u6bcf\u79cd AA \u7b97\u6cd5\u6709\u5176\u7279\u5b9a\u4f7f\u7528\u573a\u666f\uff0c\u5728\u6027\u80fd/\u753b\u8d28\u7684 Trade off \u4e0b\uff0c\u4f60\u7684\u786c\u4ef6\u914d\u7f6e\u53ca\u6e38\u620f\u6e32\u67d3\u65b9\u5f0f\u51b3\u5b9a\u4e86\u6700\u4f18\u9009\u62e9\u3002 \u5bf9\u4e8e\u8ffd\u6c42\u9ad8\u5e27\u7387/\u4f4e\u753b\u8d28\u6539\u5584\u7684\u4eba\u6765\u8bf4 FXAA \u8f83\u4e3a\u5b9e\u7528\uff1b \u62e5\u6709\u82f1\u4f1f\u8fbe\u6700\u65b0 RTX 20 \u7cfb\u5217\u663e\u5361\u7684\u6e38\u620f\u73a9\u5bb6\u6765\u8bf4\uff0c\u4e0d\u59a8\u8bd5\u8bd5 DLSS 2X \u6280\u672f\u5e26\u6765\u7684\u7edd\u4f73\u753b\u8d28\uff1b \u7edd\u5927\u591a\u6570\u7528\u6237\uff0cTAA \u5728\u4e0d\u5e26\u6765\u592a\u591a\u6027\u80fd\u635f\u5931\u7684\u60c5\u51b5\u4e0b\uff0c\u5bf9\u753b\u8d28\u6539\u5584\u8f83\u597d\uff0c\u80fd\u6ee1\u8db3\u5927\u90e8\u5206\u4f7f\u7528\u573a\u666f\u3002 \u5bf9\u90a3\u4e9b\u4ecd\u5728\u4f7f\u7528 Forward Shading \u7684\u6e38\u620f\u6765\u8bf4\uff0cMSAA \u662f\u6700\u4f73\u9009\u62e9\u3002","title":"\u5c0f\u7ed3"},{"location":"paper/convention-anti-aliasing/#appendix-a-anti-aliasing","text":"FXAA vs No AA SMAA vs FXAA 4x MSAA vs SMAA 8x MSAA vs 4x TXAA SSAA 4x vs SMAA 4x TXAA vs 4x MSAA","title":"Appendix A\uff1a\u82f1\u4f1f\u8fbe\u5728\u7ebf Anti-Aliasing \u7b97\u6cd5\u6bd4\u8f83"},{"location":"paper/convention-anti-aliasing/#appendix-b","text":"Anti-Aliasing: What Is It and Why Do We Need It? Anti-alias \u7684\u524d\u4e16\u4eca\u751f-\u5e38\u7528\u53cd\u8d70\u6837\u7b97\u6cd5\u603b\u7ed3 \u9f9a\u654f\u654f \u6e38\u620f\u4e2d\u7684\u6297\u952f\u9f7f\u6280\u672fAnti-Alasing\u63d0\u70bc\u603b\u7ed3 \u9f9a\u654f\u654f aa \u603b\u7ed3","title":"Appendix B\uff1a\u53c2\u8003\u6587\u7ae0"},{"location":"paper/data/","text":"\u6570\u636e\u91c7\u96c6 Camera Jitter \u6295\u5f71\u77e9\u9635\u8fdb\u884c\u5b50\u50cf\u7d20\u7ea7\u522b\u6270\u52a8 Sequence Warning motion vector\u4e00\u5b9a\u8981\u7528\u6d6e\u70b9\u6570\u4fdd\u5b58\uff0c\u56e0\u4e3a\u5f53\u524d\u50cf\u7d20\u5728\u6295\u5f71\u56de\u5386\u53f2\u5e27\uff0c\u4f4d\u7f6e\u4e00\u822c\u4e0d\u4f1a\u6b63\u597d\u662fpixel center Warning motion vector\u6309w h\u987a\u5e8f\u6392\u5217\uff0c\u800cpytorch\u3001tensorflow api\u591a\u7528hw\u987a\u5e8f \u8ba1\u7b97\u65b9\u5f0f\u5982\u4e0b \u56fe\u50cf\u5de6\u4e0a\u89d2\u53d6\u503c(0, 0)\u53f3\u4e0b\u89d2\u53d6(1, 1)\uff08\u6ce8\u610f\u8fb9\u7f18\u60c5\u51b5\uff09 \u5f52\u4e00\u5316\u540e\uff0c\u5f53\u524d\u50cf\u7d20\u5f53\u524d\u6df1\u5ea6\uff0c\u6295\u5f71\u56de\u524d\u4e00\u5e27 \u4e8c\u8005\u76f8\u51cf\u5f97\u5230motion_vector /* Args pixelCrd: pixel coordinate prevPosH: renderTargetDim: 1920x1080 */ float2 calcMotionVector ( float2 pixelCrd , float4 prevPosH , float2 renderTargetDim ) { float2 prevCrd = prevPosH . xy / prevPosH . w ; #ifdef FALCOR_VK prevCrd *= float2 ( 0.5 , 0.5 ); #else prevCrd *= float2 ( 0.5 , - 0.5 ); #endif prevCrd += 0.5f ; float2 normalizedCrd = pixelCrd / renderTargetDim ; return prevCrd - normalizedCrd ; } float4 prevPosW = mul ( prevPos , gPrevWorldMat [ vIn . instanceID ]); vOut . prevPosH = mul ( prevPosW , gCamera . prevViewProjMat ); D3D10 \u5750\u6807\u7cfb Info \u5229\u7528Python unittest\u5305\u8fdb\u884c\u5355\u5143\u6d4b\u8bd5 \u6570\u636e\u683c\u5f0f H W C \u4e0d\u540c\u7c7b\u578b\u6570\u91cf\u4e00\u81f4 \u6570\u636e\u8303\u56f4 import os import pfm # Falcor\u56fe\u5f62\u4fdd\u5b58\u4e3a4 channel float32 . pfm\u683c\u5f0f \uff0c\u4ee3\u7801\u6765\u6e90 https : //gist.github.com/chpatrick/8935738 class DatasetInspection : \"\"\"Summary of class here. Longer class information .... Longer class information .... Attributes : likes_spam : A boolean indicating if we like SPAM or not . eggs : An integer count of the eggs we have laid . \"\"\" DATASET_PATH = os . getcwd () COLOR_PATH = '' TARGET_PATH = '' MOTION_PATH = '' def simple_check ( dataset ) : \"\"\"Do simple check for dataset range \"\"\" def display () : \"\"\"Display a list of images, show in Jupyter Notebook Arg : images : tuple , each element is a numpy array , H , W , C order \"\"\" pass def get_random_data_group ( dataset ) : \"\"\"Randomly select a group of data Args : dataset : Returns : color , target , motion Raises : IOError : An error occurred accessing the bigtable . Table object . \"\"\" return color , target , motion def check_data_range ( data , val_min , val_max ) : \"\"\"Check the data range in the image DO NOTE this function only inspect the image ' s data , DO NOT represent the actual domain of the image Args : image : numpy array \"\"\" pass import unittest from dataset_inspection import DatasetInspection #TODO(lijiankuan) class DatasetTest ( unittest . TestCase ) : def test_data_range ( self ) : pass def test_image_changed ( self ) : pass if __name__ == ' __main__ ' : unittest . main () \u7ec4\u5185\u6570\u636e\u4e00\u81f4\u6027 \u91c7\u96c6\u65f6\u4fdd\u5b58camera\u6570\u636e \u4eba\u5de5\u68c0\u89c6 \u56fe\u7247rgb\u68c0\u89c6 \u4e0a\u4e0b\u5e27motion vector\u8f6c\u6362\u540e\u56fe\u7247","title":"\u6570\u636e\u91c7\u96c6"},{"location":"paper/data/#_1","text":"Camera Jitter \u6295\u5f71\u77e9\u9635\u8fdb\u884c\u5b50\u50cf\u7d20\u7ea7\u522b\u6270\u52a8 Sequence Warning motion vector\u4e00\u5b9a\u8981\u7528\u6d6e\u70b9\u6570\u4fdd\u5b58\uff0c\u56e0\u4e3a\u5f53\u524d\u50cf\u7d20\u5728\u6295\u5f71\u56de\u5386\u53f2\u5e27\uff0c\u4f4d\u7f6e\u4e00\u822c\u4e0d\u4f1a\u6b63\u597d\u662fpixel center Warning motion vector\u6309w h\u987a\u5e8f\u6392\u5217\uff0c\u800cpytorch\u3001tensorflow api\u591a\u7528hw\u987a\u5e8f","title":"\u6570\u636e\u91c7\u96c6"},{"location":"paper/data/#_2","text":"\u56fe\u50cf\u5de6\u4e0a\u89d2\u53d6\u503c(0, 0)\u53f3\u4e0b\u89d2\u53d6(1, 1)\uff08\u6ce8\u610f\u8fb9\u7f18\u60c5\u51b5\uff09 \u5f52\u4e00\u5316\u540e\uff0c\u5f53\u524d\u50cf\u7d20\u5f53\u524d\u6df1\u5ea6\uff0c\u6295\u5f71\u56de\u524d\u4e00\u5e27 \u4e8c\u8005\u76f8\u51cf\u5f97\u5230motion_vector /* Args pixelCrd: pixel coordinate prevPosH: renderTargetDim: 1920x1080 */ float2 calcMotionVector ( float2 pixelCrd , float4 prevPosH , float2 renderTargetDim ) { float2 prevCrd = prevPosH . xy / prevPosH . w ; #ifdef FALCOR_VK prevCrd *= float2 ( 0.5 , 0.5 ); #else prevCrd *= float2 ( 0.5 , - 0.5 ); #endif prevCrd += 0.5f ; float2 normalizedCrd = pixelCrd / renderTargetDim ; return prevCrd - normalizedCrd ; } float4 prevPosW = mul ( prevPos , gPrevWorldMat [ vIn . instanceID ]); vOut . prevPosH = mul ( prevPosW , gCamera . prevViewProjMat ); D3D10 \u5750\u6807\u7cfb Info \u5229\u7528Python unittest\u5305\u8fdb\u884c\u5355\u5143\u6d4b\u8bd5","title":"\u8ba1\u7b97\u65b9\u5f0f\u5982\u4e0b"},{"location":"paper/data/#_3","text":"H W C \u4e0d\u540c\u7c7b\u578b\u6570\u91cf\u4e00\u81f4","title":"\u6570\u636e\u683c\u5f0f"},{"location":"paper/data/#_4","text":"import os import pfm # Falcor\u56fe\u5f62\u4fdd\u5b58\u4e3a4 channel float32 . pfm\u683c\u5f0f \uff0c\u4ee3\u7801\u6765\u6e90 https : //gist.github.com/chpatrick/8935738 class DatasetInspection : \"\"\"Summary of class here. Longer class information .... Longer class information .... Attributes : likes_spam : A boolean indicating if we like SPAM or not . eggs : An integer count of the eggs we have laid . \"\"\" DATASET_PATH = os . getcwd () COLOR_PATH = '' TARGET_PATH = '' MOTION_PATH = '' def simple_check ( dataset ) : \"\"\"Do simple check for dataset range \"\"\" def display () : \"\"\"Display a list of images, show in Jupyter Notebook Arg : images : tuple , each element is a numpy array , H , W , C order \"\"\" pass def get_random_data_group ( dataset ) : \"\"\"Randomly select a group of data Args : dataset : Returns : color , target , motion Raises : IOError : An error occurred accessing the bigtable . Table object . \"\"\" return color , target , motion def check_data_range ( data , val_min , val_max ) : \"\"\"Check the data range in the image DO NOTE this function only inspect the image ' s data , DO NOT represent the actual domain of the image Args : image : numpy array \"\"\" pass import unittest from dataset_inspection import DatasetInspection #TODO(lijiankuan) class DatasetTest ( unittest . TestCase ) : def test_data_range ( self ) : pass def test_image_changed ( self ) : pass if __name__ == ' __main__ ' : unittest . main ()","title":"\u6570\u636e\u8303\u56f4"},{"location":"paper/data/#_5","text":"\u91c7\u96c6\u65f6\u4fdd\u5b58camera\u6570\u636e","title":"\u7ec4\u5185\u6570\u636e\u4e00\u81f4\u6027"},{"location":"paper/data/#_6","text":"\u56fe\u7247rgb\u68c0\u89c6 \u4e0a\u4e0b\u5e27motion vector\u8f6c\u6362\u540e\u56fe\u7247","title":"\u4eba\u5de5\u68c0\u89c6"},{"location":"paper/dataset/","text":"\u6570\u636e\u96c6\u89c4\u683c \u89c4\u683c\u63cf\u8ff0 PATH /workspace/exp_rcnn_pytorch/dataset_generation.ipynb Info \u91c7\u96c6\u7a0b\u5e8f\u4e2d\u83b7\u53d6\u7684\u6570\u636e\u683c\u5f0f\uff1a/ws/input & /ws/motion & /ws/target\u76ee\u5f55\u4e0b\u5206\u522b\u5b58\u653e1spp\u539f\u59cb\u753b\u9762\u30011spp\u8fd0\u52a8\u5411\u91cf\u300164spp\u76ee\u6807\u753b\u9762 \u5c06\u91c7\u96c6\u6570\u636e\u5212\u5206 Train Dataset 70% Test Dataset 20% Validation Dataset 10% Dataset Folder\u4e2d\u542b\u6709\u591a\u4e2aSequence Folder Sequence Folder\u4e2d\u542b\u6709\u591a\u5f20\u56fe\u7247 \u6bcf\u5f20\u56fe\u7247\u75311spp\uff0c64spp\u7b49\u7ec4\u6210 \u591a\u5f20\u56fe\u7247\u6784\u6210\u8fde\u7eed\u753b\u9762 \u56fe\u7247\u4ece\u91c7\u96c6\u6570\u636e\u4e2d\u622a\u53d6 Info \u7531\u4e8e1920x1080\u8f93\u5165\u5bfc\u81f4\u795e\u7ecf\u7f51\u7edc\u5728\u663e\u5b58\u4e2d\u5360\u7528\u7a7a\u95f4\u8fc7\u5927\uff0c\u56e0\u6b64\u51b3\u5b9a\u5c06\u56fe\u7247\u8fdb\u884c\u5207\u5206 \u6570\u636e\u96c6\u5408\u89c4\u8303 \u8f93\u5165\u5e8f\u5217\u8def\u5f84 path/to/dataset/[train/test/validation]/seq[seq_num] \u5e8f\u5217\u4e2d\u540c\u4e00\u65f6\u523b\u7684\u8f93\u5165\u8f93\u51fa\u878d\u5408\u6210\u5355\u4e00\u56fe\u7247\uff0c\u65b9\u4fbf\u8bfb\u53d6 256x256 1spp color 256x256 grid 256x256 64spp color \u5047\u8bbe\u4e00\u4e2a\u5e8f\u5217\u5e8f\u53f71-7\uff0c\u5219\u76ee\u5f55\u4e0b\u6587\u4ef6\u547d\u540d\u5982\u4e0b path/to/dataset/[train/test/validation]/seq[seq_num]/[1-7] Warning grid \u5fc5\u987b\u4fdd\u5b58\u4e3a\u6d6e\u70b9\u6570 Pink Data\u8f6c\u6362\u4e3aTensorFlow Dataset import tensorflow as tf tf . enable_eager_execution () import numpy as np import random import pfm class PinkData ( object ): def __init__ ( self , path ): self . _path = path def get_size ( self ): return 10 # todo: remove magic number def load_data ( self ): data_index_set = [ _ for _ in xrange ( 1 , self . get_size () + 1 )] data = tf . data . Dataset . from_tensor_slices ( data_index_set ) data = data . map ( self . _transform_func ) return data def _transform_func ( self , index ): input_data = tf . py_func ( self . _load_input_data , [ index ], tf . float32 ) target_data = tf . py_func ( self . _load_target_data , [ index ], tf . float32 ) return input_data , target_data def _load_input_data ( self , index ): file_dir = self . _path + '/color/' + str ( index ) + '.pfm' return pfm . load_pfm ( file_dir ) def _load_target_data ( self , index ): file_dir = self . _path + '/target/' + str ( index ) + '.pfm' return pfm . load_pfm ( file_dir ) \u6269\u5145Pink Data\u4e3aDataset import os import time import matplotlib.pyplot as plt import numpy as np import shutil from enum import Enum ExtendMode = Enum ( 'ExtendMode' , ( 'Sequence' , 'Mono' )) class ExtendDataset ( object ): def __init__ ( self , mode ): self . _mode = mode self . _pink_data = PinkData ( '/notebooks/workspace-ljk/pink-data' ) def gen_dataset ( self ): # slice the HD image into 256x256 self . _slice_data () if self . _mode == ExtendMode . Sequence : self . _gen_sequnce () elif self . _mode == ExtendMode . Mono : self . _gen_mono () else : raise ValueError ( 'invalid extend mode' ) def _slice_data ( self ): pass def _gen_mono ( self ): data = self . _pink_data . load_data () index = 0 path_to_gen = self . create_directory () for color , target in data : bucket = np . concatenate (( color . numpy (), target . numpy ()), axis = 0 ) # H-W-C FILE_NAME = path_to_gen + '/' + ( str ( index )) + '.pfm' index = index + 1 pfm . save_pfm ( FILE_NAME , image = bucket ) def _gen_sequnce ( self ): pass def _data_augmentation ( self ): data_augmentation () def _create_directory ( self ): VERSION = 'temporary' GEN_PATH = os . getcwd () + '/dataset_' + VERSION if os . path . isdir ( GEN_PATH ): shutil . rmtree ( GEN_PATH ) os . mkdir ( GEN_PATH ) return GEN_PATH \u5207\u5206 def slice_image ( image , slice_size , stride ): # image is a numpy array ordered by H W C # slice_size H W # calc how many slice in a image origin_height = image . shape [ 0 ] origin_width = image . shape [ 1 ] slice_height = slice_size [ 0 ] slice_width = slice_size [ 1 ] stride_height = stride [ 0 ] stride_width = stride [ 1 ] w_slice_count = ( origin_width - slice_width ) // stride_width + 1 h_slice_count = ( origin_height - slice_height ) // stride_height + 1 print 'slice count h,w' , h_slice_count , w_slice_count slice_count = w_slice_count * h_slice_count image_list = [] for slice_index in xrange ( slice_count ): # calc by slice_index h_index = slice_index // h_slice_count w_index = slice_index % h_slice_count # use w_index, h_index & stride to calc the offset w_offset = h_index * stride_width h_offset = w_index * stride_height slice_image = image [ h_offset : h_offset + slice_height , w_offset : w_offset + slice_width , :] image_list . append ( slice_image ) return image_list \u5207\u5206motion \u5229\u7528motion\u8ba1\u7b97texel\u5750\u6807 transform scale\u6210local texel local texel to local grid \u5229\u7528OpenCV accumulate\u51fd\u6570\u8fdb\u884cCG velocity\u5230PyTorch grid\u7684\u8f6c\u6362 \u56fe\u5f62\u91c7\u96c6\u7a0b\u5e8f\u4e2d\u7684MotionVecor\u5e76\u4e0d\u7b26\u5408PyTorch\u4e2dgrid_sample\u7684\u8981\u6c42\u3002CPU\u5904\u7406\u56fe\u50cf\u80fd\u529b\u6709\u9650\uff0c\u56e0\u6b64\u5229\u7528OpenCV\u56fe\u50cf\u64cd\u4f5c\uff0c\u5bf9\u539f\u59cbMotionVector\u8fdb\u884c\u53d8\u6362\u3002 \u800c\u8f6c\u6362\u7684\u56fe\u50cf\u7684\u89c4\u683c\u8981\u7b26\u5408PyTorchgrid_sample\u65b9\u6cd5\u7684\u8f93\u5165\uff0c\u672c\u7ae0\u5148\u8bb2\u8ff0PyTorch\u65b9\u6cd5\u7684\u8f93\u5165\u8981\u6c42\uff0c\u518d\u8bb2\u8ff0\u5982\u4f55\u5c06MotionVector\u53d8\u6362\u4e3a\u8be5\u683c\u5f0f\u3002 # \u88ab\u8bc1\u660e\u53ef\u7528\u7684 gBufOut.grid = (calcMotionVector(pos.xy, vsOut.prevPosH, gRenderTargetDim) + pos.xy/gRenderTargetDim - 0.5) * 2; PyTorch\u63d0\u4f9b\u7684\u5185\u7f6e\u7684\u56fe\u50cfWarp\u65b9\u6cd5 torch . nn . functional . grid_sample ( input , grid , mode = 'bilinear' , padding_mode = 'zeros' ) Given an input and a flow-field grid, computes the output using input pixel locations from the grid. Uses bilinear interpolation to sample the input pixels. Currently, only spatial (4 dimensional) inputs are supported. For each output location, grid has x and y input pixel locations which are used to compute output. grid has values in the range of [-1, 1]. This is because the pixel locations are normalized by the input height and width.For example, values: x: -1, y: -1 is the left-top pixel of the input values: x: 1, y: 1 is the right-bottom pixel of the input. If grid has values outside the range of [-1, 1], those locations are handled as defined by padding_mode. Options are zeros or border, defining those locations to use 0 or image border values as contribution to the bilinear interpolation. This function is used in building Spatial Transformer Network \u91c7\u96c6\u6570\u636e\u7684\u8f6c\u6362 \u8ba1\u7b97global_grid \u9996\u5148\u6839\u636emotion_vector\u8ba1\u7b97\u51fa\u5168\u56fe\u7684Grid\u6570\u636e\uff0c\u8fd9\u91cc\u9700\u8981\u683c\u5916\u5b9a\u4e49pixel_map\uff1a def get_pixel_map ( size_h_w ): height = size_h_w [ 0 ] width = size_h_w [ 1 ] pixel_map = np . zeros (( height , width , 2 )) for i in xrange ( height ): for j in xrange ( width ): pixel_map [ i , j , :] = np . array ([ i , j ]) return pixel_map size = np . array ([ 1080 , 1920 ]) pixel_map = get_pixel_map ( size ) pixel coordinate\u8f6c\u6362\u4e3atexel coordinate def pixel_to_texel ( pixel_map ): pixel_center_offset = np . array ([ 0.5 , 0.5 ]) texel_map = ( pixel_map + pixel_center_offset ) / size return texel_map texel coordinate\u5750\u6807\u4e2d\u5fc3\u8f6c\u6362\u5230texel\u4e2d\u5fc3\uff0c\u4e3a\u8f6c\u6362\u4e3agrid coordinate\u505a\u51c6\u5907 def texel_to_grid ( texel_map ): translation_offset = np . array ([ 0.5 , 0.5 ]) scale = np . array ([ 2 , 2 ]) texel_grid_mid = texel_map - translation_offset texel_grid_mid = texel_grid_mid * scale mid_to_grid_scale = 1.0 * size / ( size - 1 ) grid = texel_grid_mid * mid_to_grid_scale return grid \u8ba1\u7b97local_grid | \u56fe\u5f62\u5207\u5206 global_grid\u662f\u9488\u5bf91920x1080\u56fe\u7247\u800c\u8a00\u7684\uff0c\u7531\u4e8e\u6211\u4eec\u8981\u5c06\u5176\u5207\u5206\u4e3a256x256\u7684\u56fe\u7247\uff0cglobal_grid\u9700\u8981\u8f6c\u6362\u4e3alocal_grid\u3002 \u5b9a\u4e49\u5f53\u524d\u5207\u5206\u56fe\u50cf\u4e0e\u5de6\u4e0a\u89d2\u504f\u79fb\u91cf\u4e3aoffset\uff0c\u5207\u5206\u540e\u5927\u5c0f\u4e3a256x256 image_size = np.array([1920, 1080]) slice_size = np.array([256, 256]) offset = np.array([slice_size[0]*i, slice_size[1]*j]) sliced_grid = global_grid[offset[0]:offset[0]+slice_width, offset[1]:offset[1]+slice_height] \u518d\u901a\u8fc7sliced_grid\u8ba1\u7b97local_grid image_size = np.array([1920, 1080]) slice_size = np.array([256, 256]) offset = np.array([slice_size[0]*i, slice_size[1]*j]) def get_full_res_norm(pixel_w_h): return (offset + slice_size/2.0f)/(image_size/2.0f) def get_local_grid(sliced_grid): sub_image_center = offset + 0.5 * slice_size sub_image_center_norm = get_full_res_norm(sub_image_center) sub_image_norm_factor = (slice_size/2.0f)/(image_size/2.0f) return (sliced_grid - sub_image_center_norm)/ sub_image_norm_factor local_grid = get_local_grid(sliced_grid) Info \u5bf9\u4e8e1920x1080\u56fe\u7247\uff0c\u53ef\u4ee5\u89c4\u5219\u88c1\u526a\u5207\u5206\u621028\u5f20256x256\u5927\u5c0f\u56fe\u7247\uff0c\u540e\u7eed\u6570\u636e\u589e\u5f3a\u4e2d\u5229\u7528\u968f\u673a\u88c1\u526a\u6280\u672f\uff0c\u53ef\u4ee5\u4efb\u610f\u53d6offset \u6570\u636e\u589e\u5f3a \u7a7a\u95f4\u51e0\u4f55\u53d8\u6362 \u56fe\u50cf\u65cb\u8f6c M = cv2 . getRotationMatrix2D ( center , angle , scale ) rotated = cv2 . warpAffine ( img , M , ( w , h )) \u56fe\u50cf\u7ffb\u8f6c # flip img horizontally, vertically, # and both axes with flip() horizontal_img = cv2 . flip ( img , 0 ) vertical_img = cv2 . flip ( img , 1 ) both_img = cv2 . flip ( img , - 1 ) \u7f29\u653e \u88c1\u526a \u8272\u57df\u53d8\u6362 HSV\u5bf9\u6bd4\u5ea6\u53d8\u6362 GrayScale \u5c06\u56fe\u50cf\u4eceRGB\u989c\u8272\u7a7a\u95f4\u8f6c\u6362\u4e3a\u7070\u5ea6\u7a7a\u95f4\uff0c\u901a\u8fc7\u67d0\u4e00\u901a\u9053\u4e0e\u539f\u56fe\u50cf\u6df7\u5408\u3002 RGB\u989c\u8272\u6270\u52a8 \u8f6c\u6362\u6cd5 \u5e8f\u5217\u76f8\u5173 \u5e8f\u5217\u6b63\u653e\u3001\u5012\u653e \u6570\u636e\u589e\u5f3a \u21a9 \u6df1\u5ea6\u5b66\u4e60\u4e2d\u7684\u6570\u636e\u589e\u5f3a \u21a9","title":"\u6570\u636e\u96c6\u89c4\u683c"},{"location":"paper/dataset/#_1","text":"","title":"\u6570\u636e\u96c6\u89c4\u683c"},{"location":"paper/dataset/#_2","text":"PATH /workspace/exp_rcnn_pytorch/dataset_generation.ipynb Info \u91c7\u96c6\u7a0b\u5e8f\u4e2d\u83b7\u53d6\u7684\u6570\u636e\u683c\u5f0f\uff1a/ws/input & /ws/motion & /ws/target\u76ee\u5f55\u4e0b\u5206\u522b\u5b58\u653e1spp\u539f\u59cb\u753b\u9762\u30011spp\u8fd0\u52a8\u5411\u91cf\u300164spp\u76ee\u6807\u753b\u9762 \u5c06\u91c7\u96c6\u6570\u636e\u5212\u5206 Train Dataset 70% Test Dataset 20% Validation Dataset 10% Dataset Folder\u4e2d\u542b\u6709\u591a\u4e2aSequence Folder Sequence Folder\u4e2d\u542b\u6709\u591a\u5f20\u56fe\u7247 \u6bcf\u5f20\u56fe\u7247\u75311spp\uff0c64spp\u7b49\u7ec4\u6210 \u591a\u5f20\u56fe\u7247\u6784\u6210\u8fde\u7eed\u753b\u9762 \u56fe\u7247\u4ece\u91c7\u96c6\u6570\u636e\u4e2d\u622a\u53d6 Info \u7531\u4e8e1920x1080\u8f93\u5165\u5bfc\u81f4\u795e\u7ecf\u7f51\u7edc\u5728\u663e\u5b58\u4e2d\u5360\u7528\u7a7a\u95f4\u8fc7\u5927\uff0c\u56e0\u6b64\u51b3\u5b9a\u5c06\u56fe\u7247\u8fdb\u884c\u5207\u5206","title":"\u89c4\u683c\u63cf\u8ff0"},{"location":"paper/dataset/#_3","text":"\u8f93\u5165\u5e8f\u5217\u8def\u5f84 path/to/dataset/[train/test/validation]/seq[seq_num] \u5e8f\u5217\u4e2d\u540c\u4e00\u65f6\u523b\u7684\u8f93\u5165\u8f93\u51fa\u878d\u5408\u6210\u5355\u4e00\u56fe\u7247\uff0c\u65b9\u4fbf\u8bfb\u53d6 256x256 1spp color 256x256 grid 256x256 64spp color \u5047\u8bbe\u4e00\u4e2a\u5e8f\u5217\u5e8f\u53f71-7\uff0c\u5219\u76ee\u5f55\u4e0b\u6587\u4ef6\u547d\u540d\u5982\u4e0b path/to/dataset/[train/test/validation]/seq[seq_num]/[1-7] Warning grid \u5fc5\u987b\u4fdd\u5b58\u4e3a\u6d6e\u70b9\u6570","title":"\u6570\u636e\u96c6\u5408\u89c4\u8303"},{"location":"paper/dataset/#pink-datatensorflow-dataset","text":"import tensorflow as tf tf . enable_eager_execution () import numpy as np import random import pfm class PinkData ( object ): def __init__ ( self , path ): self . _path = path def get_size ( self ): return 10 # todo: remove magic number def load_data ( self ): data_index_set = [ _ for _ in xrange ( 1 , self . get_size () + 1 )] data = tf . data . Dataset . from_tensor_slices ( data_index_set ) data = data . map ( self . _transform_func ) return data def _transform_func ( self , index ): input_data = tf . py_func ( self . _load_input_data , [ index ], tf . float32 ) target_data = tf . py_func ( self . _load_target_data , [ index ], tf . float32 ) return input_data , target_data def _load_input_data ( self , index ): file_dir = self . _path + '/color/' + str ( index ) + '.pfm' return pfm . load_pfm ( file_dir ) def _load_target_data ( self , index ): file_dir = self . _path + '/target/' + str ( index ) + '.pfm' return pfm . load_pfm ( file_dir )","title":"Pink Data\u8f6c\u6362\u4e3aTensorFlow Dataset"},{"location":"paper/dataset/#pink-datadataset","text":"import os import time import matplotlib.pyplot as plt import numpy as np import shutil from enum import Enum ExtendMode = Enum ( 'ExtendMode' , ( 'Sequence' , 'Mono' )) class ExtendDataset ( object ): def __init__ ( self , mode ): self . _mode = mode self . _pink_data = PinkData ( '/notebooks/workspace-ljk/pink-data' ) def gen_dataset ( self ): # slice the HD image into 256x256 self . _slice_data () if self . _mode == ExtendMode . Sequence : self . _gen_sequnce () elif self . _mode == ExtendMode . Mono : self . _gen_mono () else : raise ValueError ( 'invalid extend mode' ) def _slice_data ( self ): pass def _gen_mono ( self ): data = self . _pink_data . load_data () index = 0 path_to_gen = self . create_directory () for color , target in data : bucket = np . concatenate (( color . numpy (), target . numpy ()), axis = 0 ) # H-W-C FILE_NAME = path_to_gen + '/' + ( str ( index )) + '.pfm' index = index + 1 pfm . save_pfm ( FILE_NAME , image = bucket ) def _gen_sequnce ( self ): pass def _data_augmentation ( self ): data_augmentation () def _create_directory ( self ): VERSION = 'temporary' GEN_PATH = os . getcwd () + '/dataset_' + VERSION if os . path . isdir ( GEN_PATH ): shutil . rmtree ( GEN_PATH ) os . mkdir ( GEN_PATH ) return GEN_PATH","title":"\u6269\u5145Pink Data\u4e3aDataset"},{"location":"paper/dataset/#_4","text":"def slice_image ( image , slice_size , stride ): # image is a numpy array ordered by H W C # slice_size H W # calc how many slice in a image origin_height = image . shape [ 0 ] origin_width = image . shape [ 1 ] slice_height = slice_size [ 0 ] slice_width = slice_size [ 1 ] stride_height = stride [ 0 ] stride_width = stride [ 1 ] w_slice_count = ( origin_width - slice_width ) // stride_width + 1 h_slice_count = ( origin_height - slice_height ) // stride_height + 1 print 'slice count h,w' , h_slice_count , w_slice_count slice_count = w_slice_count * h_slice_count image_list = [] for slice_index in xrange ( slice_count ): # calc by slice_index h_index = slice_index // h_slice_count w_index = slice_index % h_slice_count # use w_index, h_index & stride to calc the offset w_offset = h_index * stride_width h_offset = w_index * stride_height slice_image = image [ h_offset : h_offset + slice_height , w_offset : w_offset + slice_width , :] image_list . append ( slice_image ) return image_list","title":"\u5207\u5206"},{"location":"paper/dataset/#motion","text":"\u5229\u7528motion\u8ba1\u7b97texel\u5750\u6807 transform scale\u6210local texel local texel to local grid","title":"\u5207\u5206motion"},{"location":"paper/dataset/#opencv-accumulatecg-velocitypytorch-grid","text":"\u56fe\u5f62\u91c7\u96c6\u7a0b\u5e8f\u4e2d\u7684MotionVecor\u5e76\u4e0d\u7b26\u5408PyTorch\u4e2dgrid_sample\u7684\u8981\u6c42\u3002CPU\u5904\u7406\u56fe\u50cf\u80fd\u529b\u6709\u9650\uff0c\u56e0\u6b64\u5229\u7528OpenCV\u56fe\u50cf\u64cd\u4f5c\uff0c\u5bf9\u539f\u59cbMotionVector\u8fdb\u884c\u53d8\u6362\u3002 \u800c\u8f6c\u6362\u7684\u56fe\u50cf\u7684\u89c4\u683c\u8981\u7b26\u5408PyTorchgrid_sample\u65b9\u6cd5\u7684\u8f93\u5165\uff0c\u672c\u7ae0\u5148\u8bb2\u8ff0PyTorch\u65b9\u6cd5\u7684\u8f93\u5165\u8981\u6c42\uff0c\u518d\u8bb2\u8ff0\u5982\u4f55\u5c06MotionVector\u53d8\u6362\u4e3a\u8be5\u683c\u5f0f\u3002 # \u88ab\u8bc1\u660e\u53ef\u7528\u7684 gBufOut.grid = (calcMotionVector(pos.xy, vsOut.prevPosH, gRenderTargetDim) + pos.xy/gRenderTargetDim - 0.5) * 2;","title":"\u5229\u7528OpenCV accumulate\u51fd\u6570\u8fdb\u884cCG velocity\u5230PyTorch grid\u7684\u8f6c\u6362"},{"location":"paper/dataset/#pytorchwarp","text":"torch . nn . functional . grid_sample ( input , grid , mode = 'bilinear' , padding_mode = 'zeros' ) Given an input and a flow-field grid, computes the output using input pixel locations from the grid. Uses bilinear interpolation to sample the input pixels. Currently, only spatial (4 dimensional) inputs are supported. For each output location, grid has x and y input pixel locations which are used to compute output. grid has values in the range of [-1, 1]. This is because the pixel locations are normalized by the input height and width.For example, values: x: -1, y: -1 is the left-top pixel of the input values: x: 1, y: 1 is the right-bottom pixel of the input. If grid has values outside the range of [-1, 1], those locations are handled as defined by padding_mode. Options are zeros or border, defining those locations to use 0 or image border values as contribution to the bilinear interpolation. This function is used in building Spatial Transformer Network","title":"PyTorch\u63d0\u4f9b\u7684\u5185\u7f6e\u7684\u56fe\u50cfWarp\u65b9\u6cd5"},{"location":"paper/dataset/#_5","text":"","title":"\u91c7\u96c6\u6570\u636e\u7684\u8f6c\u6362"},{"location":"paper/dataset/#global_grid","text":"\u9996\u5148\u6839\u636emotion_vector\u8ba1\u7b97\u51fa\u5168\u56fe\u7684Grid\u6570\u636e\uff0c\u8fd9\u91cc\u9700\u8981\u683c\u5916\u5b9a\u4e49pixel_map\uff1a def get_pixel_map ( size_h_w ): height = size_h_w [ 0 ] width = size_h_w [ 1 ] pixel_map = np . zeros (( height , width , 2 )) for i in xrange ( height ): for j in xrange ( width ): pixel_map [ i , j , :] = np . array ([ i , j ]) return pixel_map size = np . array ([ 1080 , 1920 ]) pixel_map = get_pixel_map ( size ) pixel coordinate\u8f6c\u6362\u4e3atexel coordinate def pixel_to_texel ( pixel_map ): pixel_center_offset = np . array ([ 0.5 , 0.5 ]) texel_map = ( pixel_map + pixel_center_offset ) / size return texel_map texel coordinate\u5750\u6807\u4e2d\u5fc3\u8f6c\u6362\u5230texel\u4e2d\u5fc3\uff0c\u4e3a\u8f6c\u6362\u4e3agrid coordinate\u505a\u51c6\u5907 def texel_to_grid ( texel_map ): translation_offset = np . array ([ 0.5 , 0.5 ]) scale = np . array ([ 2 , 2 ]) texel_grid_mid = texel_map - translation_offset texel_grid_mid = texel_grid_mid * scale mid_to_grid_scale = 1.0 * size / ( size - 1 ) grid = texel_grid_mid * mid_to_grid_scale return grid","title":"\u8ba1\u7b97global_grid"},{"location":"paper/dataset/#local_grid","text":"global_grid\u662f\u9488\u5bf91920x1080\u56fe\u7247\u800c\u8a00\u7684\uff0c\u7531\u4e8e\u6211\u4eec\u8981\u5c06\u5176\u5207\u5206\u4e3a256x256\u7684\u56fe\u7247\uff0cglobal_grid\u9700\u8981\u8f6c\u6362\u4e3alocal_grid\u3002 \u5b9a\u4e49\u5f53\u524d\u5207\u5206\u56fe\u50cf\u4e0e\u5de6\u4e0a\u89d2\u504f\u79fb\u91cf\u4e3aoffset\uff0c\u5207\u5206\u540e\u5927\u5c0f\u4e3a256x256 image_size = np.array([1920, 1080]) slice_size = np.array([256, 256]) offset = np.array([slice_size[0]*i, slice_size[1]*j]) sliced_grid = global_grid[offset[0]:offset[0]+slice_width, offset[1]:offset[1]+slice_height] \u518d\u901a\u8fc7sliced_grid\u8ba1\u7b97local_grid image_size = np.array([1920, 1080]) slice_size = np.array([256, 256]) offset = np.array([slice_size[0]*i, slice_size[1]*j]) def get_full_res_norm(pixel_w_h): return (offset + slice_size/2.0f)/(image_size/2.0f) def get_local_grid(sliced_grid): sub_image_center = offset + 0.5 * slice_size sub_image_center_norm = get_full_res_norm(sub_image_center) sub_image_norm_factor = (slice_size/2.0f)/(image_size/2.0f) return (sliced_grid - sub_image_center_norm)/ sub_image_norm_factor local_grid = get_local_grid(sliced_grid) Info \u5bf9\u4e8e1920x1080\u56fe\u7247\uff0c\u53ef\u4ee5\u89c4\u5219\u88c1\u526a\u5207\u5206\u621028\u5f20256x256\u5927\u5c0f\u56fe\u7247\uff0c\u540e\u7eed\u6570\u636e\u589e\u5f3a\u4e2d\u5229\u7528\u968f\u673a\u88c1\u526a\u6280\u672f\uff0c\u53ef\u4ee5\u4efb\u610f\u53d6offset","title":"\u8ba1\u7b97local_grid | \u56fe\u5f62\u5207\u5206"},{"location":"paper/dataset/#_6","text":"","title":"\u6570\u636e\u589e\u5f3a"},{"location":"paper/dataset/#_7","text":"","title":"\u7a7a\u95f4\u51e0\u4f55\u53d8\u6362"},{"location":"paper/dataset/#_8","text":"M = cv2 . getRotationMatrix2D ( center , angle , scale ) rotated = cv2 . warpAffine ( img , M , ( w , h ))","title":"\u56fe\u50cf\u65cb\u8f6c"},{"location":"paper/dataset/#_9","text":"# flip img horizontally, vertically, # and both axes with flip() horizontal_img = cv2 . flip ( img , 0 ) vertical_img = cv2 . flip ( img , 1 ) both_img = cv2 . flip ( img , - 1 )","title":"\u56fe\u50cf\u7ffb\u8f6c"},{"location":"paper/dataset/#_10","text":"","title":"\u7f29\u653e"},{"location":"paper/dataset/#_11","text":"","title":"\u88c1\u526a"},{"location":"paper/dataset/#_12","text":"","title":"\u8272\u57df\u53d8\u6362"},{"location":"paper/dataset/#hsv","text":"","title":"HSV\u5bf9\u6bd4\u5ea6\u53d8\u6362"},{"location":"paper/dataset/#grayscale","text":"\u5c06\u56fe\u50cf\u4eceRGB\u989c\u8272\u7a7a\u95f4\u8f6c\u6362\u4e3a\u7070\u5ea6\u7a7a\u95f4\uff0c\u901a\u8fc7\u67d0\u4e00\u901a\u9053\u4e0e\u539f\u56fe\u50cf\u6df7\u5408\u3002 RGB\u989c\u8272\u6270\u52a8","title":"GrayScale"},{"location":"paper/dataset/#_13","text":"","title":"\u8f6c\u6362\u6cd5"},{"location":"paper/dataset/#_14","text":"","title":"\u5e8f\u5217\u76f8\u5173"},{"location":"paper/dataset/#_15","text":"\u6570\u636e\u589e\u5f3a \u21a9 \u6df1\u5ea6\u5b66\u4e60\u4e2d\u7684\u6570\u636e\u589e\u5f3a \u21a9","title":"\u5e8f\u5217\u6b63\u653e\u3001\u5012\u653e"},{"location":"paper/experiment/","text":"\u5b9e\u9a8c\u7ed3\u679c TAA \u82f1\u4f1f\u8fbe Falcor \u5f00\u6e90\u6846\u67b6 \u57fa\u4e8e Salvi 2016 SIGGRAPH Course \u7248\u672c \u6548\u7387 \u6a21\u578b input batch fp32 fp16 int8 rcnn-10 1080x1920 1 44ms 25ms 8.9ms \u6548\u679c \u6027\u80fd\u6307\u6807 1spp TAA Our Model 64spp RMSE 0.009 0.012 0.005 - PSNR 40.9 38.4 46.0 - Sun Temple \u573a\u666f 960x540 256x256 \u5e8f\u5217\u7b2c 1 \u5f20\uff0c\u4e0e\u5e8f\u5217\u7b2c 6 \u5f20\u56fe\u5f62 Pink Room \u573a\u666f 256x256 Salvi Siggraph 2017 RAE TODO \u5bf9\u6bd4 \u5355\u5f20\u56fe\u7247\u8d85\u5206\u8fa8\u7387/FRSS \u5bf9\u6bd4 RAE/FRSS \u5bf9\u6bd4 TAA/FRSS \u7f51\u7edc\u7ed3\u6784\u8f6c\u6362\u4e3a Encoder-decoder FRSS \u4e2d\u52a0\u5165 Space-to-depth \u5c42\uff0c\u4e0e\u672a\u52a0\u5165\u7684\u8fdb\u884c\u5bf9\u6bd4 \u4f4e\u5206\u8fa8\u7387shading","title":"\u5b9e\u9a8c\u7ed3\u679c"},{"location":"paper/experiment/#_1","text":"","title":"\u5b9e\u9a8c\u7ed3\u679c"},{"location":"paper/experiment/#taa","text":"\u82f1\u4f1f\u8fbe Falcor \u5f00\u6e90\u6846\u67b6 \u57fa\u4e8e Salvi 2016 SIGGRAPH Course \u7248\u672c","title":"TAA"},{"location":"paper/experiment/#_2","text":"\u6a21\u578b input batch fp32 fp16 int8 rcnn-10 1080x1920 1 44ms 25ms 8.9ms","title":"\u6548\u7387"},{"location":"paper/experiment/#_3","text":"\u6027\u80fd\u6307\u6807 1spp TAA Our Model 64spp RMSE 0.009 0.012 0.005 - PSNR 40.9 38.4 46.0 -","title":"\u6548\u679c"},{"location":"paper/experiment/#sun-temple","text":"960x540 256x256 \u5e8f\u5217\u7b2c 1 \u5f20\uff0c\u4e0e\u5e8f\u5217\u7b2c 6 \u5f20\u56fe\u5f62","title":"Sun Temple \u573a\u666f"},{"location":"paper/experiment/#pink-room","text":"256x256","title":"Pink Room \u573a\u666f"},{"location":"paper/experiment/#salvi-siggraph-2017-rae","text":"","title":"Salvi Siggraph 2017 RAE"},{"location":"paper/experiment/#todo","text":"\u5bf9\u6bd4 \u5355\u5f20\u56fe\u7247\u8d85\u5206\u8fa8\u7387/FRSS \u5bf9\u6bd4 RAE/FRSS \u5bf9\u6bd4 TAA/FRSS \u7f51\u7edc\u7ed3\u6784\u8f6c\u6362\u4e3a Encoder-decoder FRSS \u4e2d\u52a0\u5165 Space-to-depth \u5c42\uff0c\u4e0e\u672a\u52a0\u5165\u7684\u8fdb\u884c\u5bf9\u6bd4 \u4f4e\u5206\u8fa8\u7387shading","title":"TODO"},{"location":"paper/introduction/","text":"\u8bba\u6587\u5199\u4f5c \u5f15\u8a00 \u8bba\u6587\u7684Introduction\u90e8\u5206\u5230\u5e95\u8be5\u5982\u4f55\u6784\u601d\u884c\u6587\uff1f Purpose of Guide - Organizing Your Social Sciences Research Paper - Research Guides at University of Southern California \u5982\u4f55\u5feb\u901f\u627e\u5230Research Knowledge Gap? \u600e\u6837\u5199\u597d\u82f1\u6587\u8bba\u6587\u7684 Introduction \u90e8\u5206\uff1f","title":"\u8bba\u6587\u5199\u4f5c"},{"location":"paper/introduction/#_1","text":"","title":"\u8bba\u6587\u5199\u4f5c"},{"location":"paper/introduction/#_2","text":"\u8bba\u6587\u7684Introduction\u90e8\u5206\u5230\u5e95\u8be5\u5982\u4f55\u6784\u601d\u884c\u6587\uff1f Purpose of Guide - Organizing Your Social Sciences Research Paper - Research Guides at University of Southern California \u5982\u4f55\u5feb\u901f\u627e\u5230Research Knowledge Gap? \u600e\u6837\u5199\u597d\u82f1\u6587\u8bba\u6587\u7684 Introduction \u90e8\u5206\uff1f","title":"\u5f15\u8a00"},{"location":"paper/related-work/","text":"\u76f8\u5173\u5de5\u4f5c Multi-frame Rendering Amortized supersampling 1 Spatio-temporal upsampling on the gpu 2 An excursion in temporal super sampling. GDC2016 From the Lab Bench 3 Multi-frame Super-resolution Frame-recurrent video super-resolution 4 L. Yang, D. Nehab, P. V. Sander, P. Sitthi-amorn, J. Lawrence, and H. Hoppe. Amortized supersampling. In ACM Transactions on Graphics (TOG), volume 28, page 135. ACM, 2009. \u21a9 R. Herzog, E. Eisemann, K. Myszkowski, and H.-P. Seidel. Spatio-temporal upsampling on the gpu. In Proceedings of the 2010 ACM SIGGRAPH symposium on Interactive 3D Graphics and Games, pages 91\u201398. ACM, 2010. \u21a9 M. Salvi. An excursion in temporal super sampling. GDC2016 From the Lab Bench: Real-Time Rendering Advances from NVIDIA Research, 2016. \u21a9 M. S. Sajjadi, R. Vemulapalli, and M. Brown. Frame-recurrent video super-resolution. In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition, pages 6626\u2013 6634, 2018. \u21a9","title":"\u76f8\u5173\u5de5\u4f5c"},{"location":"paper/related-work/#_1","text":"","title":"\u76f8\u5173\u5de5\u4f5c"},{"location":"paper/related-work/#multi-frame-rendering","text":"Amortized supersampling 1 Spatio-temporal upsampling on the gpu 2 An excursion in temporal super sampling. GDC2016 From the Lab Bench 3","title":"Multi-frame Rendering"},{"location":"paper/related-work/#multi-frame-super-resolution","text":"Frame-recurrent video super-resolution 4 L. Yang, D. Nehab, P. V. Sander, P. Sitthi-amorn, J. Lawrence, and H. Hoppe. Amortized supersampling. In ACM Transactions on Graphics (TOG), volume 28, page 135. ACM, 2009. \u21a9 R. Herzog, E. Eisemann, K. Myszkowski, and H.-P. Seidel. Spatio-temporal upsampling on the gpu. In Proceedings of the 2010 ACM SIGGRAPH symposium on Interactive 3D Graphics and Games, pages 91\u201398. ACM, 2010. \u21a9 M. Salvi. An excursion in temporal super sampling. GDC2016 From the Lab Bench: Real-Time Rendering Advances from NVIDIA Research, 2016. \u21a9 M. S. Sajjadi, R. Vemulapalli, and M. Brown. Frame-recurrent video super-resolution. In Proceedings of the IEEE Conference on Computer Vision and Pattern Recognition, pages 6626\u2013 6634, 2018. \u21a9","title":"Multi-frame Super-resolution"},{"location":"reading/cpst-siggraph2018/","text":"Coarse Pixel Shading with Temporal Supersampling Xiao K, Liktor G, Vaidyanathan K. Coarse pixel shading with temporal supersampling[C]//Proceedings of the ACM SIGGRAPH Symposium on Interactive 3D Graphics and Games. ACM, 2018: 1. \u6982\u8ff0 \u7b97\u6cd5\u63d0\u51fa\u4e00\u79cd Jitter Sequence\uff08\u6548\u679c\u4f18\u4e8e Halton\uff09 Decoupled shading visibility \u4f4d\u7f6e\u4e0e shading \u4f4d\u7f6e\u4e0d\u540c\uff0cvisibility \u989c\u8272\u901a\u8fc7\u5468\u56f4\u591a\u4e2a shading \u52a0\u6743\u8ba1\u7b97 \u4e00\u4e2a\u50cf\u7d20\u5bf9\u5e94\u591a\u4e2a visibility\uff0c\u591a\u4e2a visibility \u989c\u8272\u52a0\u6743\u8ba1\u7b97\u8be5\u50cf\u7d20\u7ed3\u679c Jitter Sequence \u4e3a visibility \u548c shading \u5e26\u6765\u4e86\u826f\u597d\u7684\u5206\u5e03 \u5c06 visibility \u770b\u4f5c TAA \u4e2d\u7684\u5b50\u50cf\u7d20\uff0c\u878d\u5165 TAA \u6846\u67b6 \u4e0e Checkerboard Rendering \u76f8\u6bd4\uff0cCPS-T Shading \u6570\u76ee\u4e3a\u4e00\u534a\uff0c\u4f46\u6709\u4e24\u500d\u7684 Visibility \u6837\u672c\u3002 \u7b97\u6cd5 Supersampling \\hat{c}\\left(p\\right) = \\sum_{v_{i}\\in \\Omega } c\\left ( p + v_{i} \\right )w\\left ( v_{i} \\right ) \\hat{c}\\left(p\\right) = \\sum_{v_{i}\\in \\Omega } c\\left ( p + v_{i} \\right )w\\left ( v_{i} \\right ) TAA \\hat{c}^{k}\\left(p\\right) = \\alpha c( p + v_{i} ) + ( 1 - \\alpha) \\hat{c}^{k-1}(p) \\hat{c}^{k}\\left(p\\right) = \\alpha c( p + v_{i} ) + ( 1 - \\alpha) \\hat{c}^{k-1}(p) Decoupled sampling \\hat{c}\\left(p\\right) = \\sum_{v_{i} \\in \\Omega^{v}} w^{p}\\left(v_{i}\\right) \\sum_{u_{j} \\in \\Omega^{s}} c_{p+v_{i}}\\left(p+u_{j}\\right)w^{s}\\left(u_{j}\\right) \\hat{c}\\left(p\\right) = \\sum_{v_{i} \\in \\Omega^{v}} w^{p}\\left(v_{i}\\right) \\sum_{u_{j} \\in \\Omega^{s}} c_{p+v_{i}}\\left(p+u_{j}\\right)w^{s}\\left(u_{j}\\right) CPS-T \\hat{c}^{k}\\left(p\\right) = \\alpha w^{s}\\left(u_{j}\\right)c_{p+v_{i}} + \\left(1-\\alpha w^{s}\\left(u_{j}\\right)\\right)\\hat{c}^{k-1}\\left(p\\right) \\hat{c}^{k}\\left(p\\right) = \\alpha w^{s}\\left(u_{j}\\right)c_{p+v_{i}} + \\left(1-\\alpha w^{s}\\left(u_{j}\\right)\\right)\\hat{c}^{k-1}\\left(p\\right) \u4e2a\u4eba\u7406\u89e3 \u8d85\u91c7\u6837\u5c31\u662f\u8ba1\u7b97\u4e00\u4e2a\u50cf\u7d20\u989c\u8272\u65f6\u5019\uff0c\u7528\u591a\u4e2a\u5b50\u50cf\u7d20\u6837\u672c\u70b9\u5e73\u5747\u3002 TAA \u5c06\u8fd9\u4e9b\u5b50\u50cf\u7d20\u5206\u5e03\u5230\u4e86\u65f6\u57df\u4e0a\u3002 \u800c\u672c\u7b97\u6cd5\u4e2d\u7684 visibility \u6837\u672c\u5373\u5b50\u50cf\u7d20\u3002 \u5e76\u4e14 visibility \u7684\u8ba1\u7b97\uff0c\u7528\u5230\u4e86\u4e0e visibility \u6837\u672c\u4f4d\u7f6e\u4e0d\u540c\u7684 shading \u6837\u672c\uff0c\u8fd9\u4e00\u6b65\u79f0\u4e3a Decoupled shading\u3002","title":"Coarse Pixel Shading with Temporal Supersampling"},{"location":"reading/cpst-siggraph2018/#coarse-pixel-shading-with-temporal-supersampling","text":"Xiao K, Liktor G, Vaidyanathan K. Coarse pixel shading with temporal supersampling[C]//Proceedings of the ACM SIGGRAPH Symposium on Interactive 3D Graphics and Games. ACM, 2018: 1.","title":"Coarse Pixel Shading with Temporal Supersampling"},{"location":"reading/cpst-siggraph2018/#_1","text":"\u7b97\u6cd5\u63d0\u51fa\u4e00\u79cd Jitter Sequence\uff08\u6548\u679c\u4f18\u4e8e Halton\uff09 Decoupled shading visibility \u4f4d\u7f6e\u4e0e shading \u4f4d\u7f6e\u4e0d\u540c\uff0cvisibility \u989c\u8272\u901a\u8fc7\u5468\u56f4\u591a\u4e2a shading \u52a0\u6743\u8ba1\u7b97 \u4e00\u4e2a\u50cf\u7d20\u5bf9\u5e94\u591a\u4e2a visibility\uff0c\u591a\u4e2a visibility \u989c\u8272\u52a0\u6743\u8ba1\u7b97\u8be5\u50cf\u7d20\u7ed3\u679c Jitter Sequence \u4e3a visibility \u548c shading \u5e26\u6765\u4e86\u826f\u597d\u7684\u5206\u5e03 \u5c06 visibility \u770b\u4f5c TAA \u4e2d\u7684\u5b50\u50cf\u7d20\uff0c\u878d\u5165 TAA \u6846\u67b6 \u4e0e Checkerboard Rendering \u76f8\u6bd4\uff0cCPS-T Shading \u6570\u76ee\u4e3a\u4e00\u534a\uff0c\u4f46\u6709\u4e24\u500d\u7684 Visibility \u6837\u672c\u3002","title":"\u6982\u8ff0"},{"location":"reading/cpst-siggraph2018/#_2","text":"Supersampling \\hat{c}\\left(p\\right) = \\sum_{v_{i}\\in \\Omega } c\\left ( p + v_{i} \\right )w\\left ( v_{i} \\right ) \\hat{c}\\left(p\\right) = \\sum_{v_{i}\\in \\Omega } c\\left ( p + v_{i} \\right )w\\left ( v_{i} \\right ) TAA \\hat{c}^{k}\\left(p\\right) = \\alpha c( p + v_{i} ) + ( 1 - \\alpha) \\hat{c}^{k-1}(p) \\hat{c}^{k}\\left(p\\right) = \\alpha c( p + v_{i} ) + ( 1 - \\alpha) \\hat{c}^{k-1}(p) Decoupled sampling \\hat{c}\\left(p\\right) = \\sum_{v_{i} \\in \\Omega^{v}} w^{p}\\left(v_{i}\\right) \\sum_{u_{j} \\in \\Omega^{s}} c_{p+v_{i}}\\left(p+u_{j}\\right)w^{s}\\left(u_{j}\\right) \\hat{c}\\left(p\\right) = \\sum_{v_{i} \\in \\Omega^{v}} w^{p}\\left(v_{i}\\right) \\sum_{u_{j} \\in \\Omega^{s}} c_{p+v_{i}}\\left(p+u_{j}\\right)w^{s}\\left(u_{j}\\right) CPS-T \\hat{c}^{k}\\left(p\\right) = \\alpha w^{s}\\left(u_{j}\\right)c_{p+v_{i}} + \\left(1-\\alpha w^{s}\\left(u_{j}\\right)\\right)\\hat{c}^{k-1}\\left(p\\right) \\hat{c}^{k}\\left(p\\right) = \\alpha w^{s}\\left(u_{j}\\right)c_{p+v_{i}} + \\left(1-\\alpha w^{s}\\left(u_{j}\\right)\\right)\\hat{c}^{k-1}\\left(p\\right)","title":"\u7b97\u6cd5"},{"location":"reading/cpst-siggraph2018/#_3","text":"\u8d85\u91c7\u6837\u5c31\u662f\u8ba1\u7b97\u4e00\u4e2a\u50cf\u7d20\u989c\u8272\u65f6\u5019\uff0c\u7528\u591a\u4e2a\u5b50\u50cf\u7d20\u6837\u672c\u70b9\u5e73\u5747\u3002 TAA \u5c06\u8fd9\u4e9b\u5b50\u50cf\u7d20\u5206\u5e03\u5230\u4e86\u65f6\u57df\u4e0a\u3002 \u800c\u672c\u7b97\u6cd5\u4e2d\u7684 visibility \u6837\u672c\u5373\u5b50\u50cf\u7d20\u3002 \u5e76\u4e14 visibility \u7684\u8ba1\u7b97\uff0c\u7528\u5230\u4e86\u4e0e visibility \u6837\u672c\u4f4d\u7f6e\u4e0d\u540c\u7684 shading \u6837\u672c\uff0c\u8fd9\u4e00\u6b65\u79f0\u4e3a Decoupled shading\u3002","title":"\u4e2a\u4eba\u7406\u89e3"},{"location":"reading/dacs_hpg2018/","text":"Deferred Adaptive Compute Shading Mallett I, Yuksel C. Deferred adaptive compute shading[C]//Proceedings of the Conference on High-Performance Graphics. ACM, 2018: 3. \u6982\u8ff0 Level Shading\uff0c\u901a\u8fc7\u90bb\u57df\u56db\u4e2a\u50cf\u7d20\uff08\u4e5f\u53ef\u4ee5\u7528\u4e0a G-Buffer\uff09\uff0c\u6765\u5224\u65ad\u662f\u5426\u9700\u8981\u5bf9\u672c\u50cf\u7d20\u7740\u8272/\u63d2\u503c\u9886\u57df\u56db\u4e2a\u50cf\u7d20\u3002 \u65b9\u6cd5\u8be6\u8ff0 First Level Shading \u5168\u56fe1/16 \u50cf\u7d20 \u9010 Level \u7740\u8272 \u5f53\u524dLevel \u9996\u5148\u8ba1\u7b97 Previous Level 4\u4e2a\u90bb\u57df\u50cf\u7d20 Similarity Criterion \u82e5\u6ee1\u8db3 Similarity Criterion\uff0c\u5f53\u524d\u50cf\u7d20\u63d2\u503c \u82e5\u5426\uff0c\u91cd\u65b0\u7740\u8272","title":"Deferred Adaptive Compute Shading"},{"location":"reading/dacs_hpg2018/#deferred-adaptive-compute-shading","text":"Mallett I, Yuksel C. Deferred adaptive compute shading[C]//Proceedings of the Conference on High-Performance Graphics. ACM, 2018: 3.","title":"Deferred Adaptive Compute Shading"},{"location":"reading/dacs_hpg2018/#_1","text":"Level Shading\uff0c\u901a\u8fc7\u90bb\u57df\u56db\u4e2a\u50cf\u7d20\uff08\u4e5f\u53ef\u4ee5\u7528\u4e0a G-Buffer\uff09\uff0c\u6765\u5224\u65ad\u662f\u5426\u9700\u8981\u5bf9\u672c\u50cf\u7d20\u7740\u8272/\u63d2\u503c\u9886\u57df\u56db\u4e2a\u50cf\u7d20\u3002","title":"\u6982\u8ff0"},{"location":"reading/dacs_hpg2018/#_2","text":"First Level Shading \u5168\u56fe1/16 \u50cf\u7d20 \u9010 Level \u7740\u8272 \u5f53\u524dLevel \u9996\u5148\u8ba1\u7b97 Previous Level 4\u4e2a\u90bb\u57df\u50cf\u7d20 Similarity Criterion \u82e5\u6ee1\u8db3 Similarity Criterion\uff0c\u5f53\u524d\u50cf\u7d20\u63d2\u503c \u82e5\u5426\uff0c\u91cd\u65b0\u7740\u8272","title":"\u65b9\u6cd5\u8be6\u8ff0"},{"location":"reading/dso/","text":"DSO \u6ed1\u52a8\u7a97\u53e3\u3001\u57fa\u4e8e\u4f18\u5316 \u70b9\u7528\u9006\u6df1\u5ea6\u4f30\u8ba1\uff0c\u591a\u5e27\u5185\u4f30\u8ba1\u6536\u655b\u540e\uff0c\u6b63\u5f0f\u52a0\u5165residual\u8ba1\u7b97 \u53c2\u8003 https://zhuanlan.zhihu.com/p/29177540","title":"\u673a\u5668\u89c6\u89c9 | DSO"},{"location":"reading/dso/#dso","text":"\u6ed1\u52a8\u7a97\u53e3\u3001\u57fa\u4e8e\u4f18\u5316 \u70b9\u7528\u9006\u6df1\u5ea6\u4f30\u8ba1\uff0c\u591a\u5e27\u5185\u4f30\u8ba1\u6536\u655b\u540e\uff0c\u6b63\u5f0f\u52a0\u5165residual\u8ba1\u7b97","title":"DSO"},{"location":"reading/dso/#_1","text":"https://zhuanlan.zhihu.com/p/29177540","title":"\u53c2\u8003"},{"location":"reading/frvsr-cvpr2018/","text":"Frame-Recurrent Video Super-Resolution \u6982\u8ff0 \u89c6\u9891\u8d85\u5206\u8fa8\u7387\u9886\u57df State-of-the-art \u7b97\u6cd5\u3002 \u73b0\u6709\u65b9\u6cd5\uff0c\u5229\u7528\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\uff0c\u5bf9\u7ecf\u8fc7\u8fd0\u52a8\u8865\u507f\u7684\u591a\u5e27 Input\uff0c\u5f97\u5230 High Resolution \u56fe\u50cf\u3002 \u73b0\u6709\u65b9\u6cd5\u4e0d\u8db3\u5982\u4e0b\uff1a \u591a\u5f20 Frames \u8f93\u5165\u65f6\u90fd\u9700\u8981\u901a\u8fc7\u795e\u7ecf\u7f51\u7edc Warp\uff0c\u5bf9\u9f50\u4e3b Frame\u3002\u589e\u52a0\u4e86\u65f6\u95f4\u5f00\u9500\uff08\u4f46\u8fd9\u70b9\u5728\u54b1\u4eec\u56fe\u5f62\u5b66\u4e0a\u5f71\u54cd\u8f83\u5c0f\uff09 \u8f93\u51fa\u90fd\u662f\u72ec\u7acb\u4f30\u8ba1\u7684\uff0c\u65f6\u57df\u4e0a\u7684\u4e00\u81f4\u6027\u96be\u4ee5\u8fbe\u5230 \u672c\u7b97\u6cd5\u63d0\u51fa\u4e86\u7aef\u5230\u7aef\u7684\u53ef\u8bad\u7ec3\u7684\u6846\u67b6\uff0c\u4f1a\u4e0d\u65ad\u7684\u5728\u65f6\u5e8f\u4e0a\u590d\u7528\u4e4b\u524d\u7684\u7ed3\u679c\u3002\u5929\u7136\u7684\u89e3\u51b3\u4e86\u65f6\u5e8f\u4e0a\u7a33\u5b9a\u7684\u95ee\u9898\uff08\uff1f\u6709\u6ca1\u6709\u7406\u8bba\u4f9d\u636e\uff09\u3002\u8be5\u65b9\u6cd5\u5728\u4e0d\u589e\u52a0\u8ba1\u7b97\u91cf\u7684\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u5927\u91cf\u7d2f\u8ba1\u5148\u524d\u5e27\u7684\u4fe1\u606f\u3002\u4f18\u4e8e\u5df2\u6709 Sota\u3002 \u521b\u65b0\u70b9 Recurrent-frame \u6846\u67b6\uff0c\u4f7f\u7528\u524d\u4e00\u65f6\u523b\u8f93\u51fa\u7684 HR Image\uff0c\u4fdd\u6301\u65f6\u57df\u7a33\u5b9a\u6027 \u6b64\u6846\u67b6\u5728\u65f6\u57df\u4e0a\u4f20\u9012\u4fe1\u606f\uff0c\u4e0d\u589e\u52a0\u8ba1\u7b97\u91cf \u7aef\u5230\u7aef\u7f51\u7edc\uff0c\u4e0d\u9700\u8981\u9884\u5904\u7406\u8fc7\u7a0b \u6d41\u7a0b Loss Function FNet\u3001SRNet \u5747\u7528 L2 Loss Space-to-depth \u6280\u5de7 \u300aReal-time single image and video super-resolution using an efficient sub-pixel convolutional neural network\u300bMono SR \u9886\u57df Sota \u7b97\u6cd5 ESPCN \u6587\u7ae0\u4e2d\u7684\u6280\u5de7\uff0c\u5c06\u5927\u56fe\u8f6c\u6362\u4e3a\u591a\u901a\u9053\u5c0f\u56fe\u3002 \u5bf9\u6bd4\u65b9\u6cd5 \u7b97\u6cd5\uff1a Bilinear\u3001Bicubic SISR Sota \u7b97\u6cd5 \u4f17\u591a VSR \u7b97\u6cd5 \u5b9a\u6027\uff1a PSNR SSIM \u6267\u884c\u6548\u7387","title":"Frame-Recurrent Video Super-Resolution"},{"location":"reading/frvsr-cvpr2018/#frame-recurrent-video-super-resolution","text":"","title":"Frame-Recurrent Video Super-Resolution"},{"location":"reading/frvsr-cvpr2018/#_1","text":"\u89c6\u9891\u8d85\u5206\u8fa8\u7387\u9886\u57df State-of-the-art \u7b97\u6cd5\u3002 \u73b0\u6709\u65b9\u6cd5\uff0c\u5229\u7528\u5377\u79ef\u795e\u7ecf\u7f51\u7edc\uff0c\u5bf9\u7ecf\u8fc7\u8fd0\u52a8\u8865\u507f\u7684\u591a\u5e27 Input\uff0c\u5f97\u5230 High Resolution \u56fe\u50cf\u3002 \u73b0\u6709\u65b9\u6cd5\u4e0d\u8db3\u5982\u4e0b\uff1a \u591a\u5f20 Frames \u8f93\u5165\u65f6\u90fd\u9700\u8981\u901a\u8fc7\u795e\u7ecf\u7f51\u7edc Warp\uff0c\u5bf9\u9f50\u4e3b Frame\u3002\u589e\u52a0\u4e86\u65f6\u95f4\u5f00\u9500\uff08\u4f46\u8fd9\u70b9\u5728\u54b1\u4eec\u56fe\u5f62\u5b66\u4e0a\u5f71\u54cd\u8f83\u5c0f\uff09 \u8f93\u51fa\u90fd\u662f\u72ec\u7acb\u4f30\u8ba1\u7684\uff0c\u65f6\u57df\u4e0a\u7684\u4e00\u81f4\u6027\u96be\u4ee5\u8fbe\u5230 \u672c\u7b97\u6cd5\u63d0\u51fa\u4e86\u7aef\u5230\u7aef\u7684\u53ef\u8bad\u7ec3\u7684\u6846\u67b6\uff0c\u4f1a\u4e0d\u65ad\u7684\u5728\u65f6\u5e8f\u4e0a\u590d\u7528\u4e4b\u524d\u7684\u7ed3\u679c\u3002\u5929\u7136\u7684\u89e3\u51b3\u4e86\u65f6\u5e8f\u4e0a\u7a33\u5b9a\u7684\u95ee\u9898\uff08\uff1f\u6709\u6ca1\u6709\u7406\u8bba\u4f9d\u636e\uff09\u3002\u8be5\u65b9\u6cd5\u5728\u4e0d\u589e\u52a0\u8ba1\u7b97\u91cf\u7684\u60c5\u51b5\u4e0b\uff0c\u53ef\u4ee5\u5927\u91cf\u7d2f\u8ba1\u5148\u524d\u5e27\u7684\u4fe1\u606f\u3002\u4f18\u4e8e\u5df2\u6709 Sota\u3002","title":"\u6982\u8ff0"},{"location":"reading/frvsr-cvpr2018/#_2","text":"Recurrent-frame \u6846\u67b6\uff0c\u4f7f\u7528\u524d\u4e00\u65f6\u523b\u8f93\u51fa\u7684 HR Image\uff0c\u4fdd\u6301\u65f6\u57df\u7a33\u5b9a\u6027 \u6b64\u6846\u67b6\u5728\u65f6\u57df\u4e0a\u4f20\u9012\u4fe1\u606f\uff0c\u4e0d\u589e\u52a0\u8ba1\u7b97\u91cf \u7aef\u5230\u7aef\u7f51\u7edc\uff0c\u4e0d\u9700\u8981\u9884\u5904\u7406\u8fc7\u7a0b","title":"\u521b\u65b0\u70b9"},{"location":"reading/frvsr-cvpr2018/#_3","text":"Loss Function FNet\u3001SRNet \u5747\u7528 L2 Loss","title":"\u6d41\u7a0b"},{"location":"reading/frvsr-cvpr2018/#space-to-depth","text":"\u300aReal-time single image and video super-resolution using an efficient sub-pixel convolutional neural network\u300bMono SR \u9886\u57df Sota \u7b97\u6cd5 ESPCN \u6587\u7ae0\u4e2d\u7684\u6280\u5de7\uff0c\u5c06\u5927\u56fe\u8f6c\u6362\u4e3a\u591a\u901a\u9053\u5c0f\u56fe\u3002","title":"Space-to-depth \u6280\u5de7"},{"location":"reading/frvsr-cvpr2018/#_4","text":"\u7b97\u6cd5\uff1a Bilinear\u3001Bicubic SISR Sota \u7b97\u6cd5 \u4f17\u591a VSR \u7b97\u6cd5 \u5b9a\u6027\uff1a PSNR SSIM \u6267\u884c\u6548\u7387","title":"\u5bf9\u6bd4\u65b9\u6cd5"},{"location":"reading/lsd/","text":"LSD-SLAM Tracking\uff1a\u76f4\u63a5\u6cd5\uff0c\u6700\u5c0f\u5316\u5149\u5ea6\u8bef\u5dee\uff08\u7279\u5f81\u70b9\u6cd5\u6700\u5c0f\u5316\u91cd\u6295\u5f71\u8bef\u5dee\uff09 Depth Estimation\uff1a\u66f4\u65b0\u5173\u952e\u5e27\u7684\u6df1\u5ea6\u4f30\u8ba1\uff08\u7279\u5f81\u70b9\u7528\u6ee4\u6ce2\u65b9\u5f0f\uff0c\u9006\u6df1\u5ea6\u5747\u503c\u534f\u65b9\u5dee\u8868\u793a\uff09 Map Optimization\uff1apose graph \u4f18\u5316\uff0csim3\u7a7a\u95f4\u8ba1\u7b97 \u53c2\u8003 \u7ffb\u8bd1 https://www.sohu.com/a/166136329_715754 https://www.cnblogs.com/GJGJH/p/9750170.html https://zhuanlan.zhihu.com/p/47914361","title":"\u673a\u5668\u89c6\u89c9 | LSD"},{"location":"reading/lsd/#lsd-slam","text":"Tracking\uff1a\u76f4\u63a5\u6cd5\uff0c\u6700\u5c0f\u5316\u5149\u5ea6\u8bef\u5dee\uff08\u7279\u5f81\u70b9\u6cd5\u6700\u5c0f\u5316\u91cd\u6295\u5f71\u8bef\u5dee\uff09 Depth Estimation\uff1a\u66f4\u65b0\u5173\u952e\u5e27\u7684\u6df1\u5ea6\u4f30\u8ba1\uff08\u7279\u5f81\u70b9\u7528\u6ee4\u6ce2\u65b9\u5f0f\uff0c\u9006\u6df1\u5ea6\u5747\u503c\u534f\u65b9\u5dee\u8868\u793a\uff09 Map Optimization\uff1apose graph \u4f18\u5316\uff0csim3\u7a7a\u95f4\u8ba1\u7b97","title":"LSD-SLAM"},{"location":"reading/lsd/#_1","text":"\u7ffb\u8bd1 https://www.sohu.com/a/166136329_715754 https://www.cnblogs.com/GJGJH/p/9750170.html https://zhuanlan.zhihu.com/p/47914361","title":"\u53c2\u8003"},{"location":"reading/motionblur2014/","text":"A Fast and Stable Feature-Aware Motion Blur Filter V_c V_c \u901a\u8fc7 V_p V_p \u3001 V_{Max} V_{Max} \u63d2\u503c\u5f97\u6765 j \u5728 (-1, 1) \u968f\u673a\u91c7\u6837 vmax vmax \u91c7\u6837 NeighborMax\uff0cJitter\uff1f \u82e5 vmax < 0.5 vmax < 0.5 \u5219\u76f4\u63a5\u8fd4\u56de\u989c\u8272 w_n=norm(vmax) w_n=norm(vmax) V_c = V[p] V_c = V[p] w_p=(-w_{ny}, w_{nx}) w_p=(-w_{ny}, w_{nx}) \u5782\u76f4\u4e8e vmax vmax \u7684\u5355\u4f4d\u5411\u91cf \u5982\u679c vp wp \u5939\u89d2\u4e3a\u949d\u89d2\uff0cwp \u53d6\u8d1f \u4ee4 wc = rnmix \u63d2\u503c wp vc\uff1f totalweight = N\u3001k vc result color x weight j' = j yeta theta / N \u8fdb\u5165\u5faa\u73af t xx/N+1 jitter \u6837\u672c\u70b9 V_c V_c \u3001 V_{TileMax} V_{TileMax} \u5404\u91c7\u4e00\u534a\u6837\u672c\u70b9 T = txvmax \u4e0e vmax \u6709\u5173 S \u6837\u672c\u70b9\u4f4d\u7f6e \u91c7\u6837 velocity color softdepth \u8ba1\u7b97 wa = wc\u00b7d wb=norm vs \u00b7 d \u5bf9\u4e8e Tile \u8fb9\u754c\uff0c\u968f\u673a Jitter \u5bf9\u4e8e Neighbour Max\uff0c\u4ec5\u5f53\u5468\u56f4\u901f\u5ea6\u7a7f\u8fc7\u4e2d\u5fc3\u65f6\uff0c\u6709\u8d21\u732e\uff1b\u5b9e\u8df5\u4e2d\u4e0d\u542f\u7528\u672c\u6b65\u9aa4 Jitter \u5e8f\u5217 Core \u901f\u5ea6\u65b9\u5411 \u901f\u5ea6\u6743\u91cd \u91c7\u6837 Jitter Several Influential Motion Vectors dominant velocity \u6e90\u7801 Unity \u5b9e\u73b0 https://github.com/keijiro/KinoMotion/blob/master/Assets/Kino/Motion/Shader/Reconstruction.cginc","title":"A Fast and Stable Feature-Aware Motion Blur Filter"},{"location":"reading/motionblur2014/#a-fast-and-stable-feature-aware-motion-blur-filter","text":"V_c V_c \u901a\u8fc7 V_p V_p \u3001 V_{Max} V_{Max} \u63d2\u503c\u5f97\u6765 j \u5728 (-1, 1) \u968f\u673a\u91c7\u6837 vmax vmax \u91c7\u6837 NeighborMax\uff0cJitter\uff1f \u82e5 vmax < 0.5 vmax < 0.5 \u5219\u76f4\u63a5\u8fd4\u56de\u989c\u8272 w_n=norm(vmax) w_n=norm(vmax) V_c = V[p] V_c = V[p] w_p=(-w_{ny}, w_{nx}) w_p=(-w_{ny}, w_{nx}) \u5782\u76f4\u4e8e vmax vmax \u7684\u5355\u4f4d\u5411\u91cf \u5982\u679c vp wp \u5939\u89d2\u4e3a\u949d\u89d2\uff0cwp \u53d6\u8d1f \u4ee4 wc = rnmix \u63d2\u503c wp vc\uff1f totalweight = N\u3001k vc result color x weight j' = j yeta theta / N \u8fdb\u5165\u5faa\u73af t xx/N+1 jitter \u6837\u672c\u70b9 V_c V_c \u3001 V_{TileMax} V_{TileMax} \u5404\u91c7\u4e00\u534a\u6837\u672c\u70b9 T = txvmax \u4e0e vmax \u6709\u5173 S \u6837\u672c\u70b9\u4f4d\u7f6e \u91c7\u6837 velocity color softdepth \u8ba1\u7b97 wa = wc\u00b7d wb=norm vs \u00b7 d \u5bf9\u4e8e Tile \u8fb9\u754c\uff0c\u968f\u673a Jitter \u5bf9\u4e8e Neighbour Max\uff0c\u4ec5\u5f53\u5468\u56f4\u901f\u5ea6\u7a7f\u8fc7\u4e2d\u5fc3\u65f6\uff0c\u6709\u8d21\u732e\uff1b\u5b9e\u8df5\u4e2d\u4e0d\u542f\u7528\u672c\u6b65\u9aa4 Jitter \u5e8f\u5217 Core \u901f\u5ea6\u65b9\u5411 \u901f\u5ea6\u6743\u91cd \u91c7\u6837 Jitter","title":"A Fast and Stable Feature-Aware Motion Blur Filter"},{"location":"reading/motionblur2014/#several-influential-motion-vectors","text":"dominant velocity","title":"Several Influential Motion Vectors"},{"location":"reading/motionblur2014/#_1","text":"Unity \u5b9e\u73b0 https://github.com/keijiro/KinoMotion/blob/master/Assets/Kino/Motion/Shader/Reconstruction.cginc","title":"\u6e90\u7801"},{"location":"reading/msckf/","text":"MSCKF \u6982\u8ff0 \u7d27\u8026\u5408\u3001\u6ed1\u52a8\u7a97\u53e3\u3001\u6ee4\u6ce2\u65b9\u5f0f\u3002 \u6d41\u7a0b propagate\u3001update\u6ed1\u52a8\u7a97\u53e3\u72b6\u6001\u3002 imu\u7528\u4e8epropagate\u3002 \u591a\u5e27\u56fe\u50cf\u5171\u540c\u6062\u590d\u7279\u5f81\u70b9\uff0c\u7279\u5f81\u70b9\u8ddf\u4e22\u540e\u7528\u4e8eupdate\u3002 \u5361\u5c14\u66fc\u6ee4\u6ce2\u4f30\u8ba1\u3002 msckf marginalizes out the landmark coordinates from the state vector. \u53c2\u8003 https://blog.csdn.net/u014491623/article/details/84712862 https://blog.csdn.net/qq_40213457/article/details/82668822 \u7279\u5f81\u70b9\u88ab\u5982\u4f55\u7528\u7684\u95ee\u9898\u5206\u4e3a\u4e86SLAM\u7279\u5f81\u70b9\u548cMSCKF\u7279\u5f81\u70b9\uff1aSLAM\u7279\u5f81\u70b9\u88ab\u52a0\u5165\u72b6\u6001\u5411\u91cf\u5e76\u88ab\u66f4\u65b0\uff0cMSCKF\u7279\u5f81\u70b9\u5728\u6d4b\u91cf\u7684\u76f8\u5173\u516c\u5f0f\u4e2d\u88ab\u5ffd\u89c6\uff08marginalize\uff09\u6389\u6765\u751f\u6210\u4f4d\u59ff\u4e4b\u95f4\u7684\u7ea6\u675f\u3002\u8fd9\u6837\u505a\u7684\u76ee\u7684\u5728\u4e8e\u65e2\u4fdd\u6301\u4e86\u51c6\u786e\u6027\u53c8\u7167\u987e\u5230\u4e86\u5904\u7406\u65f6\u95f4\u4e0d\u4f1a\u592a\u957f\u3002","title":"\u673a\u5668\u89c6\u89c9 | MSCKF"},{"location":"reading/msckf/#msckf","text":"","title":"MSCKF"},{"location":"reading/msckf/#_1","text":"\u7d27\u8026\u5408\u3001\u6ed1\u52a8\u7a97\u53e3\u3001\u6ee4\u6ce2\u65b9\u5f0f\u3002","title":"\u6982\u8ff0"},{"location":"reading/msckf/#_2","text":"propagate\u3001update\u6ed1\u52a8\u7a97\u53e3\u72b6\u6001\u3002 imu\u7528\u4e8epropagate\u3002 \u591a\u5e27\u56fe\u50cf\u5171\u540c\u6062\u590d\u7279\u5f81\u70b9\uff0c\u7279\u5f81\u70b9\u8ddf\u4e22\u540e\u7528\u4e8eupdate\u3002 \u5361\u5c14\u66fc\u6ee4\u6ce2\u4f30\u8ba1\u3002 msckf marginalizes out the landmark coordinates from the state vector.","title":"\u6d41\u7a0b"},{"location":"reading/msckf/#_3","text":"https://blog.csdn.net/u014491623/article/details/84712862 https://blog.csdn.net/qq_40213457/article/details/82668822 \u7279\u5f81\u70b9\u88ab\u5982\u4f55\u7528\u7684\u95ee\u9898\u5206\u4e3a\u4e86SLAM\u7279\u5f81\u70b9\u548cMSCKF\u7279\u5f81\u70b9\uff1aSLAM\u7279\u5f81\u70b9\u88ab\u52a0\u5165\u72b6\u6001\u5411\u91cf\u5e76\u88ab\u66f4\u65b0\uff0cMSCKF\u7279\u5f81\u70b9\u5728\u6d4b\u91cf\u7684\u76f8\u5173\u516c\u5f0f\u4e2d\u88ab\u5ffd\u89c6\uff08marginalize\uff09\u6389\u6765\u751f\u6210\u4f4d\u59ff\u4e4b\u95f4\u7684\u7ea6\u675f\u3002\u8fd9\u6837\u505a\u7684\u76ee\u7684\u5728\u4e8e\u65e2\u4fdd\u6301\u4e86\u51c6\u786e\u6027\u53c8\u7167\u987e\u5230\u4e86\u5904\u7406\u65f6\u95f4\u4e0d\u4f1a\u592a\u957f\u3002","title":"\u53c2\u8003"},{"location":"reading/okvis-ijrr2015/","text":"Keyframe-based visual\u2013inertial odometry using nonlinear optimization Stefan Leutenegger, Simon Lynen, Michael Bosse, Roland Siegwart and Paul Timothy Furgale. Keyframe-based visual\u2013inertial odometry using nonlinear optimization. The International Journal of Robotics Research, 2015. \u57fa\u4e8e\u6ed1\u52a8\u7a97\u53e3\u7684\u7d27\u8026\u5408\u65b9\u6cd5\uff0c\u7528\u4e8e\u53cc\u76ee-IMU\u3002 \u72b6\u6001\u53d8\u91cf \u56fe\u50cf\u4f4d\u59ff\u3001\u901f\u5ea6\u3001bias[\u3001IMU\u5916\u53c2\uff08\u53ef\u9009\uff09]\u3001\u7279\u5f81\u70b9\u3002 \u6b8b\u5dee IMU \u8ba1\u7b97\u4f9d\u4ece\u9884\u79ef\u5206\u601d\u8def\u3002 \u6ed1\u52a8\u7a97\u53e3 \u6ed1\u52a8\u7a97\u53e3\u4e0a\u4e00\u4e2a\u6700\u65b0frame\u4e3a\u975ekf\u65f6\uff0c\u8fb9\u7f18\u5316pose\u3001speed\u3001bias\uff0c\u5220\u6389\u8be5frame\u7279\u5f81\u70b9\u89c2\u6d4b\uff08\u53d8\u91cf\u8fb9\u7f18\u5316\u4e86\uff0c\u65e0\u6cd5\u7b97\u51fa\u6b8b\u5dee\uff09\u3002 \u6ed1\u52a8\u7a97\u53e3\u5168\u4e3a\u5173\u952e\u5e27\u7684\u65f6\u5019\uff0c\u5bf9\u6700\u65e7\u7684kf\u8fb9\u7f18\u5316\u6240\u6709\u4e0d\u5728\u6700\u65b0\u52a0\u5165frame\u4e2d\u7684\u7279\u5f81\u70b9\uff0c\u5e76\u4e14\u8fb9\u7f18\u5316\u6389\u8be5kf pose\u3002 \u4fe1\u606f\u77e9\u9635 H\\delta x=b H\\delta x=b , H=J^{T}WJ H=J^{T}WJ , b=JWe b=JWe J\u4e3a\u8bef\u5dee\u5bf9\u4f4d\u59ff\u7684\u96c5\u53ef\u6bd4\uff0cW\u4e3a\u6743\u91cd\u3002 \u8fb9\u7f18\u5316\u76ee\u7684\uff1a\u51cf\u5c0f\u8ba1\u7b97\u91cf https://blog.csdn.net/heyijia0327/article/details/52822104 FEJ Observability\uff1a\u300a\u72b6\u6001\u4f30\u8ba1\u300b3.1.4 \u5f71\u54cd\u7cfb\u7edf\u53ef\u89c2\u6027\u3002 \u5bf9\u4e8e\u6ee4\u6ce2\u65b9\u5f0f\uff0c\u5177\u4f53\u6765\u8bf4\uff0c\u4f4d\u59ff\u91c7\u7528propagated\u503c\u800c\u975eupdated\u503c\uff0clandmark\u4f7f\u7528\u7b2c\u4e00\u6b21\u4f30\u8ba1\u503c\u3002\u5373\u91c7\u7528estimation from the first time\u3002 http://paopaorobot.org/bbs/read.php?tid=85&fid=7 okvis\u4e2d\uff1a In our keyframe-based approach, we must apply the marginalization step repeatedly and incorporate the resulting information as a prior in our optimization while our state estimate continues to change. Hence, we fix the linearization point around x0x0 , the value of xx at the time of marginalization. margin \u540e\u548c margin \u7275\u626f\u5230\u7684\u53d8\u91cf\uff0c\u9700\u8981\u7528 margin \u65f6\u5019\u7684\u72b6\u6001\u8ba1\u7b97\u96c5\u53ef\u6bd4\uff0c\u5176\u5b9e\u4e5f\u5c31\u662f\uff0c\u53d8\u91cf\u7684\u96c5\u53ef\u6bd4\u53ea\u8ba1\u7b97\u4e00\u6b21\u3002 \u8fd9\u4e2a\u89e3\u91ca\u7684\u6bd4\u8f83\u6e05\u695a\u4e86 https://blog.csdn.net/fuxingyin/article/details/53426068 https://www.zhihu.com/question/52869487/answer/258663651 \u53c2\u8003 https://blog.csdn.net/fuxingyin/article/details/53368649","title":"\u673a\u5668\u89c6\u89c9 | OKVIS"},{"location":"reading/okvis-ijrr2015/#keyframe-based-visualinertial-odometry-using-nonlinear-optimization","text":"Stefan Leutenegger, Simon Lynen, Michael Bosse, Roland Siegwart and Paul Timothy Furgale. Keyframe-based visual\u2013inertial odometry using nonlinear optimization. The International Journal of Robotics Research, 2015. \u57fa\u4e8e\u6ed1\u52a8\u7a97\u53e3\u7684\u7d27\u8026\u5408\u65b9\u6cd5\uff0c\u7528\u4e8e\u53cc\u76ee-IMU\u3002","title":"Keyframe-based visual\u2013inertial odometry using nonlinear optimization"},{"location":"reading/okvis-ijrr2015/#_1","text":"\u56fe\u50cf\u4f4d\u59ff\u3001\u901f\u5ea6\u3001bias[\u3001IMU\u5916\u53c2\uff08\u53ef\u9009\uff09]\u3001\u7279\u5f81\u70b9\u3002","title":"\u72b6\u6001\u53d8\u91cf"},{"location":"reading/okvis-ijrr2015/#_2","text":"IMU \u8ba1\u7b97\u4f9d\u4ece\u9884\u79ef\u5206\u601d\u8def\u3002","title":"\u6b8b\u5dee"},{"location":"reading/okvis-ijrr2015/#_3","text":"\u6ed1\u52a8\u7a97\u53e3\u4e0a\u4e00\u4e2a\u6700\u65b0frame\u4e3a\u975ekf\u65f6\uff0c\u8fb9\u7f18\u5316pose\u3001speed\u3001bias\uff0c\u5220\u6389\u8be5frame\u7279\u5f81\u70b9\u89c2\u6d4b\uff08\u53d8\u91cf\u8fb9\u7f18\u5316\u4e86\uff0c\u65e0\u6cd5\u7b97\u51fa\u6b8b\u5dee\uff09\u3002 \u6ed1\u52a8\u7a97\u53e3\u5168\u4e3a\u5173\u952e\u5e27\u7684\u65f6\u5019\uff0c\u5bf9\u6700\u65e7\u7684kf\u8fb9\u7f18\u5316\u6240\u6709\u4e0d\u5728\u6700\u65b0\u52a0\u5165frame\u4e2d\u7684\u7279\u5f81\u70b9\uff0c\u5e76\u4e14\u8fb9\u7f18\u5316\u6389\u8be5kf pose\u3002","title":"\u6ed1\u52a8\u7a97\u53e3"},{"location":"reading/okvis-ijrr2015/#_4","text":"H\\delta x=b H\\delta x=b , H=J^{T}WJ H=J^{T}WJ , b=JWe b=JWe J\u4e3a\u8bef\u5dee\u5bf9\u4f4d\u59ff\u7684\u96c5\u53ef\u6bd4\uff0cW\u4e3a\u6743\u91cd\u3002 \u8fb9\u7f18\u5316\u76ee\u7684\uff1a\u51cf\u5c0f\u8ba1\u7b97\u91cf https://blog.csdn.net/heyijia0327/article/details/52822104","title":"\u4fe1\u606f\u77e9\u9635"},{"location":"reading/okvis-ijrr2015/#fej","text":"Observability\uff1a\u300a\u72b6\u6001\u4f30\u8ba1\u300b3.1.4 \u5f71\u54cd\u7cfb\u7edf\u53ef\u89c2\u6027\u3002 \u5bf9\u4e8e\u6ee4\u6ce2\u65b9\u5f0f\uff0c\u5177\u4f53\u6765\u8bf4\uff0c\u4f4d\u59ff\u91c7\u7528propagated\u503c\u800c\u975eupdated\u503c\uff0clandmark\u4f7f\u7528\u7b2c\u4e00\u6b21\u4f30\u8ba1\u503c\u3002\u5373\u91c7\u7528estimation from the first time\u3002 http://paopaorobot.org/bbs/read.php?tid=85&fid=7 okvis\u4e2d\uff1a In our keyframe-based approach, we must apply the marginalization step repeatedly and incorporate the resulting information as a prior in our optimization while our state estimate continues to change. Hence, we fix the linearization point around x0x0 , the value of xx at the time of marginalization. margin \u540e\u548c margin \u7275\u626f\u5230\u7684\u53d8\u91cf\uff0c\u9700\u8981\u7528 margin \u65f6\u5019\u7684\u72b6\u6001\u8ba1\u7b97\u96c5\u53ef\u6bd4\uff0c\u5176\u5b9e\u4e5f\u5c31\u662f\uff0c\u53d8\u91cf\u7684\u96c5\u53ef\u6bd4\u53ea\u8ba1\u7b97\u4e00\u6b21\u3002 \u8fd9\u4e2a\u89e3\u91ca\u7684\u6bd4\u8f83\u6e05\u695a\u4e86 https://blog.csdn.net/fuxingyin/article/details/53426068 https://www.zhihu.com/question/52869487/answer/258663651","title":"FEJ"},{"location":"reading/okvis-ijrr2015/#_5","text":"https://blog.csdn.net/fuxingyin/article/details/53368649","title":"\u53c2\u8003"},{"location":"reading/orbslam2-/","text":"orb-slam2 \u6982\u8ff0 \u57fa\u4e8e\u4f18\u5316\u7684\u89c6\u89c9\u65b9\u6848\uff0c\u5168\u7a0b\u4f7f\u7528orb\u7279\u5f81\uff0c\u7528\u4e8e\u8ddf\u8e2a\u3001\u5efa\u56fe\u3001\u91cd\u5b9a\u4f4d\u3002 \u6d41\u7a0b Tracker\uff08\u8ddf\u8e2a\u7ebf\u7a0b\uff09\uff1a\u63a5\u53d7\u8f93\u5165\u5e27\u540e\u8ba1\u7b97\u5bf9\u5e94\u7684\u76f8\u673a\u4f4d\u59ff\uff08\u65cb\u8f6c\u4e0e\u5e73\u79fb\uff09\u3002\u5b83\u8fd8\u8981\u4ee5\u8f83\u4e3a\u5bbd\u677e\u7684\u6761\u4ef6\u51b3\u5b9a\u521b\u5efa\u4e00\u4e9b\u65b0\u5730\u56fe\u70b9\u3001\u9009\u51fa\u4e00\u4e9b\u5173\u952e\u5e27\u9001\u5230\u5c40\u90e8\u5efa\u56fe\u7ebf\u7a0b\u3002\u53e6\u5916\uff0c\u5982\u679c\u8ddf\u8e2a\u5931\u8d25\u4e86\u5c31\u8981\u8fdb\u884c\u91cd\u5b9a\u4f4d\u3002 LocalMapper\uff08\u5c40\u90e8\u5efa\u56fe\u7ebf\u7a0b\uff09\uff1a\u7ba1\u7406\u7740\u5c40\u90e8\u5730\u56fe\uff0c\u8fd8\u8981\u8fdb\u884c\u5c40\u90e8\u96c6\u675f\u4f18\u5316\u3002\u53e6\u5916\uff0c\u5b83\u4e5f\u4f1a\u521b\u5efa\u65b0\u5730\u56fe\u70b9\uff0c\u8fd8\u4f1a\u5bf9\u5730\u56fe\u70b9\u3001\u5173\u952e\u5e27\u8fdb\u884c\u8f83\u4e3a\u4e25\u683c\u7684\u7b5b\u9009\u5254\u9664\u3002 LoopCloser\uff08\u95ed\u73af\u7ebf\u7a0b\uff09\uff1a\u5bf9\u6bcf\u4e00\u4e2a\u5c40\u90e8\u5efa\u56fe\u7ebf\u7a0b\u9001\u8fc7\u6765\u7684\u5173\u952e\u5e27\u90fd\u5229\u7528\u8bcd\u888b\u7684\u65b9\u6cd5\u5728\u5173\u952e\u5e27\u6570\u636e\u5e93\u91cc\u641c\u7d22\u6709\u6ca1\u6709\u5bf9\u5e94\u7684\u95ed\u73af\u5173\u952e\u5e27\uff08\u641c\u7d22\u5230\u4e86\u8ddf\u5f53\u524d\u5173\u952e\u5e27\u957f\u5f97\u5f88\u50cf\u7684\u4e4b\u524d\u51fa\u73b0\u7684\u5173\u952e\u5e27\uff0c\u5219\u8bf4\u660e\u4f20\u611f\u5668\u8fd0\u52a8\u8f68\u8ff9\u51fa\u73b0\u4e86\u95ed\u73af\uff09\u3002\u5982\u679c\u68c0\u6d4b\u5230\u4e86\u95ed\u73af\uff0c\u5b83\u5c31\u4f1a\u8fdb\u884c\u4e00\u4e2a\u56fe\u4f18\u5316\u6b65\u9aa4\uff0c\u5e76\u4e14\u542f\u52a8\u5176\u540e\u7684\u201c\u5168\u5c40\u96c6\u675f\u4f18\u5316\u7ebf\u7a0b\u201d\u3002\u5f53\u7136\uff0c\u68c0\u6d4b\u5230\u95ed\u73af\u540e\u8fd8\u8981\u8fdb\u884c\u95ed\u73af\u878d\u5408\uff08\u5904\u7406\u91cd\u53e0\u7684\u8f68\u8ff9\u4e0e\u91cd\u590d\u7684\u5730\u56fe\u70b9\uff09\u3002 \u53c2\u8003 http://www.sohu.com/a/154011668_715754 https://zhuanlan.zhihu.com/p/66882733 https://zhuanlan.zhihu.com/p/28489469","title":"\u673a\u5668\u89c6\u89c9 | ORB-SLAM2"},{"location":"reading/orbslam2-/#orb-slam2","text":"","title":"orb-slam2"},{"location":"reading/orbslam2-/#_1","text":"\u57fa\u4e8e\u4f18\u5316\u7684\u89c6\u89c9\u65b9\u6848\uff0c\u5168\u7a0b\u4f7f\u7528orb\u7279\u5f81\uff0c\u7528\u4e8e\u8ddf\u8e2a\u3001\u5efa\u56fe\u3001\u91cd\u5b9a\u4f4d\u3002","title":"\u6982\u8ff0"},{"location":"reading/orbslam2-/#_2","text":"Tracker\uff08\u8ddf\u8e2a\u7ebf\u7a0b\uff09\uff1a\u63a5\u53d7\u8f93\u5165\u5e27\u540e\u8ba1\u7b97\u5bf9\u5e94\u7684\u76f8\u673a\u4f4d\u59ff\uff08\u65cb\u8f6c\u4e0e\u5e73\u79fb\uff09\u3002\u5b83\u8fd8\u8981\u4ee5\u8f83\u4e3a\u5bbd\u677e\u7684\u6761\u4ef6\u51b3\u5b9a\u521b\u5efa\u4e00\u4e9b\u65b0\u5730\u56fe\u70b9\u3001\u9009\u51fa\u4e00\u4e9b\u5173\u952e\u5e27\u9001\u5230\u5c40\u90e8\u5efa\u56fe\u7ebf\u7a0b\u3002\u53e6\u5916\uff0c\u5982\u679c\u8ddf\u8e2a\u5931\u8d25\u4e86\u5c31\u8981\u8fdb\u884c\u91cd\u5b9a\u4f4d\u3002 LocalMapper\uff08\u5c40\u90e8\u5efa\u56fe\u7ebf\u7a0b\uff09\uff1a\u7ba1\u7406\u7740\u5c40\u90e8\u5730\u56fe\uff0c\u8fd8\u8981\u8fdb\u884c\u5c40\u90e8\u96c6\u675f\u4f18\u5316\u3002\u53e6\u5916\uff0c\u5b83\u4e5f\u4f1a\u521b\u5efa\u65b0\u5730\u56fe\u70b9\uff0c\u8fd8\u4f1a\u5bf9\u5730\u56fe\u70b9\u3001\u5173\u952e\u5e27\u8fdb\u884c\u8f83\u4e3a\u4e25\u683c\u7684\u7b5b\u9009\u5254\u9664\u3002 LoopCloser\uff08\u95ed\u73af\u7ebf\u7a0b\uff09\uff1a\u5bf9\u6bcf\u4e00\u4e2a\u5c40\u90e8\u5efa\u56fe\u7ebf\u7a0b\u9001\u8fc7\u6765\u7684\u5173\u952e\u5e27\u90fd\u5229\u7528\u8bcd\u888b\u7684\u65b9\u6cd5\u5728\u5173\u952e\u5e27\u6570\u636e\u5e93\u91cc\u641c\u7d22\u6709\u6ca1\u6709\u5bf9\u5e94\u7684\u95ed\u73af\u5173\u952e\u5e27\uff08\u641c\u7d22\u5230\u4e86\u8ddf\u5f53\u524d\u5173\u952e\u5e27\u957f\u5f97\u5f88\u50cf\u7684\u4e4b\u524d\u51fa\u73b0\u7684\u5173\u952e\u5e27\uff0c\u5219\u8bf4\u660e\u4f20\u611f\u5668\u8fd0\u52a8\u8f68\u8ff9\u51fa\u73b0\u4e86\u95ed\u73af\uff09\u3002\u5982\u679c\u68c0\u6d4b\u5230\u4e86\u95ed\u73af\uff0c\u5b83\u5c31\u4f1a\u8fdb\u884c\u4e00\u4e2a\u56fe\u4f18\u5316\u6b65\u9aa4\uff0c\u5e76\u4e14\u542f\u52a8\u5176\u540e\u7684\u201c\u5168\u5c40\u96c6\u675f\u4f18\u5316\u7ebf\u7a0b\u201d\u3002\u5f53\u7136\uff0c\u68c0\u6d4b\u5230\u95ed\u73af\u540e\u8fd8\u8981\u8fdb\u884c\u95ed\u73af\u878d\u5408\uff08\u5904\u7406\u91cd\u53e0\u7684\u8f68\u8ff9\u4e0e\u91cd\u590d\u7684\u5730\u56fe\u70b9\uff09\u3002","title":"\u6d41\u7a0b"},{"location":"reading/orbslam2-/#_3","text":"http://www.sohu.com/a/154011668_715754 https://zhuanlan.zhihu.com/p/66882733 https://zhuanlan.zhihu.com/p/28489469","title":"\u53c2\u8003"},{"location":"reading/preintegration/","text":"On-Manifold Preintegration for Real-Time Visual Inertial Odometry \u6982\u8ff0 IMU \u5bf9 Key-frame \u95f4\u7684\u8fd0\u52a8\u6709\u4e00\u4e2a\u4f30\u8ba1\uff0cKey-frame \u5229\u7528\u591a\u89c6\u51e0\u4f55\u8ba1\u7b97\u89c2\u6d4b\u7684\u4f30\u8ba1\u3002\u4e0d\u65ad\u8c03\u6574\u72b6\u6001\u53d8\u91cf\uff0c\u8ba1\u7b97\u89c2\u6d4b\u4f30\u8ba1\u4e0e\u8fd0\u52a8\u4f30\u8ba1\u4e4b\u95f4\u6b8b\u5dee\u7684\u6700\u5c0f\u4e8c\u4e58\u3002\u4ece\u800c\u5c06 IMU \u6570\u636e\u878d\u5165\u6700\u5c0f\u4e8c\u4e58\u6846\u67b6\u3002 \u72b6\u6001\u53d8\u91cf\u4ece\u7eaf\u89c6\u89c9\u7684\u65cb\u8f6c\u3001\u4f4d\u79fb 6\u7ef4\u53d8\u91cf\uff0c\u5ef6\u5c55\u6210\u65cb\u8f6c\u3001\u4f4d\u79fb\u3001\u901f\u5ea6\u3001\u96f6\u504f 15\u7ef4\u53d8\u91cf\u3002 \u5173\u952e\u6982\u5ff5 IMU \u6d4b\u91cf\u8868\u8fbe\u51fa Key-frames \u95f4\u7684 \\Delta R \\Delta R , \\Delta p \\Delta p , \\Delta v \\Delta v \u2014\u2014 \u9884\u79ef\u5206 \u5bf9\u566a\u58f0\u4e00\u9636\u8fd1\u4f3c\uff0c\u7528\u4e8e information matrix\uff08\u975e\u7ebf\u6027\u4f18\u5316\u4e2d\u4f7f\u7528\uff0c\u770b\u4f5c\u8bef\u5dee\u7684\u6743\u91cd\uff1a\u534f\u65b9\u5dee\u5927\uff0c\u4e0d\u786e\u5b9a\u6027\u5927\uff0c\u6b8b\u5dee\u6743\u91cd\u5c0f\uff09 \u6587\u4e2d\u5b9a\u4e49\u4e86\u6b8b\u5dee\u5bf9 bias \u7684\u5bfc\u6570\uff0c\u7528\u4e8e\u4f18\u5316 bias \u4e0e\u89c6\u89c9\u4f30\u8ba1\u6784\u6210\u6b8b\u5dee\uff0c\u8c03\u6574\u4f30\u8ba1\u91cf\uff0c\u6700\u5c0f\u4e8c\u4e58 \u53c2\u8003 Paper Reading | \u9884\u79ef\u5206","title":"\u673a\u5668\u89c6\u89c9 | \u9884\u79ef\u5206"},{"location":"reading/preintegration/#on-manifold-preintegration-for-real-time-visual-inertial-odometry","text":"","title":"On-Manifold Preintegration for Real-Time Visual Inertial Odometry"},{"location":"reading/preintegration/#_1","text":"IMU \u5bf9 Key-frame \u95f4\u7684\u8fd0\u52a8\u6709\u4e00\u4e2a\u4f30\u8ba1\uff0cKey-frame \u5229\u7528\u591a\u89c6\u51e0\u4f55\u8ba1\u7b97\u89c2\u6d4b\u7684\u4f30\u8ba1\u3002\u4e0d\u65ad\u8c03\u6574\u72b6\u6001\u53d8\u91cf\uff0c\u8ba1\u7b97\u89c2\u6d4b\u4f30\u8ba1\u4e0e\u8fd0\u52a8\u4f30\u8ba1\u4e4b\u95f4\u6b8b\u5dee\u7684\u6700\u5c0f\u4e8c\u4e58\u3002\u4ece\u800c\u5c06 IMU \u6570\u636e\u878d\u5165\u6700\u5c0f\u4e8c\u4e58\u6846\u67b6\u3002 \u72b6\u6001\u53d8\u91cf\u4ece\u7eaf\u89c6\u89c9\u7684\u65cb\u8f6c\u3001\u4f4d\u79fb 6\u7ef4\u53d8\u91cf\uff0c\u5ef6\u5c55\u6210\u65cb\u8f6c\u3001\u4f4d\u79fb\u3001\u901f\u5ea6\u3001\u96f6\u504f 15\u7ef4\u53d8\u91cf\u3002","title":"\u6982\u8ff0"},{"location":"reading/preintegration/#_2","text":"IMU \u6d4b\u91cf\u8868\u8fbe\u51fa Key-frames \u95f4\u7684 \\Delta R \\Delta R , \\Delta p \\Delta p , \\Delta v \\Delta v \u2014\u2014 \u9884\u79ef\u5206 \u5bf9\u566a\u58f0\u4e00\u9636\u8fd1\u4f3c\uff0c\u7528\u4e8e information matrix\uff08\u975e\u7ebf\u6027\u4f18\u5316\u4e2d\u4f7f\u7528\uff0c\u770b\u4f5c\u8bef\u5dee\u7684\u6743\u91cd\uff1a\u534f\u65b9\u5dee\u5927\uff0c\u4e0d\u786e\u5b9a\u6027\u5927\uff0c\u6b8b\u5dee\u6743\u91cd\u5c0f\uff09 \u6587\u4e2d\u5b9a\u4e49\u4e86\u6b8b\u5dee\u5bf9 bias \u7684\u5bfc\u6570\uff0c\u7528\u4e8e\u4f18\u5316 bias \u4e0e\u89c6\u89c9\u4f30\u8ba1\u6784\u6210\u6b8b\u5dee\uff0c\u8c03\u6574\u4f30\u8ba1\u91cf\uff0c\u6700\u5c0f\u4e8c\u4e58","title":"\u5173\u952e\u6982\u5ff5"},{"location":"reading/preintegration/#_3","text":"Paper Reading | \u9884\u79ef\u5206","title":"\u53c2\u8003"},{"location":"reading/psas-slam/","text":"Probabilistic Data Association for Semantic SLAM \u53c2\u8003 https://www.sohu.com/a/219263385_715754 https://mp.weixin.qq.com/s?__biz=MzIxOTczOTM4NA==&mid=2247486764&idx=1&sn=b9987ac18f5d5a54467083b6b000be4f&chksm=97d7e8bba0a061addf3101952e24f85f9b80aecd3569858fa0e74ac6e5c55398168855c2862a&scene=21#wechat_redirect","title":"\u673a\u5668\u89c6\u89c9 | Probabilistic Data Association for Semantic SLAM(TODO)"},{"location":"reading/psas-slam/#probabilistic-data-association-for-semantic-slam","text":"","title":"Probabilistic Data Association for Semantic SLAM"},{"location":"reading/psas-slam/#_1","text":"https://www.sohu.com/a/219263385_715754 https://mp.weixin.qq.com/s?__biz=MzIxOTczOTM4NA==&mid=2247486764&idx=1&sn=b9987ac18f5d5a54467083b6b000be4f&chksm=97d7e8bba0a061addf3101952e24f85f9b80aecd3569858fa0e74ac6e5c55398168855c2862a&scene=21#wechat_redirect","title":"\u53c2\u8003"},{"location":"reading/ptam/","text":"PTAM \u57fa\u4e8e\u4f18\u5316\u7684\u5355\u76ee\u89c6\u89c9SLAM Tracking \u7ebf\u7a0b Mapping \u7ebf\u7a0b\uff1a\u5c40\u90e8 BA\u3001\u5168\u5c40 BA","title":"\u673a\u5668\u89c6\u89c9 | PTAM"},{"location":"reading/ptam/#ptam","text":"\u57fa\u4e8e\u4f18\u5316\u7684\u5355\u76ee\u89c6\u89c9SLAM Tracking \u7ebf\u7a0b Mapping \u7ebf\u7a0b\uff1a\u5c40\u90e8 BA\u3001\u5168\u5c40 BA","title":"PTAM"},{"location":"reading/semantic-fusion/","text":"SemanticFusion: Dense 3D Semantic Mapping with Convolutional Neural Networks","title":"\u673a\u5668\u89c6\u89c9 | SemanticFusion(TODO)"},{"location":"reading/semantic-fusion/#semanticfusion-dense-3d-semantic-mapping-with-convolutional-neural-networks","text":"","title":"SemanticFusion: Dense 3D Semantic Mapping with Convolutional Neural Networks"},{"location":"reading/slam++/","text":"SLAM++ RGBD\u76f8\u673a\u3001\u4e09\u7ef4\u6a21\u578b\u6570\u636e\u5e93 \u53c2\u8003 https://zhuanlan.zhihu.com/p/58648284","title":"\u673a\u5668\u89c6\u89c9 | SLAM++(TODO)"},{"location":"reading/slam++/#slam","text":"RGBD\u76f8\u673a\u3001\u4e09\u7ef4\u6a21\u578b\u6570\u636e\u5e93","title":"SLAM++"},{"location":"reading/slam++/#_1","text":"https://zhuanlan.zhihu.com/p/58648284","title":"\u53c2\u8003"},{"location":"reading/svo/","text":"SVO Tracking\uff1a\u5148\u7528\u7a00\u758f\u6cd5\u7c97\u7565\u6c42\u89e3\uff0c\u518d\u8fdb\u884c\u5c40\u90e8BA Mapping\uff1a\u7528\u9006\u6df1\u5ea6\u9ad8\u65af\u5206\u5e03\u8868\u8fbe\u7279\u5f81\u70b9 \u53c2\u8003 https://www.zhihu.com/question/39904950/answer/138644975","title":"\u673a\u5668\u89c6\u89c9 | SVO"},{"location":"reading/svo/#svo","text":"Tracking\uff1a\u5148\u7528\u7a00\u758f\u6cd5\u7c97\u7565\u6c42\u89e3\uff0c\u518d\u8fdb\u884c\u5c40\u90e8BA Mapping\uff1a\u7528\u9006\u6df1\u5ea6\u9ad8\u65af\u5206\u5e03\u8868\u8fbe\u7279\u5f81\u70b9","title":"SVO"},{"location":"reading/svo/#_1","text":"https://www.zhihu.com/question/39904950/answer/138644975","title":"\u53c2\u8003"},{"location":"reading/vins-ismar2017/","text":"Monocular Visual-Inertial State Estimation for Mobile Augmented Reality \u6982\u8ff0 Vision-IMU \u7d27\u8026\u5408\uff08\u56fe\u50cf\u7279\u5f81\u52a0\u5165\u72b6\u6001\u53d8\u91cf\uff09\uff0c\u91c7\u7528\u6ed1\u52a8\u7a97\u53e3\u4f18\u5316\u65b9\u6cd5\u3002 \u72b6\u6001\u53d8\u91cf \u7279\u5f81\u70b9\u3001pose\u3001bias\u3001velocity\u3002 \u6d41\u7a0b \u6570\u636e\u5904\u7406 \u89c6\u89c9\u90e8\u5206\u4f7f\u7528\u5149\u6d41\u8ddf\u8e2a\u7279 IMU \u4f7f\u7528\u9884\u79ef\u5206 \u521d\u59cb\u5316 SfM\uff0cIMU \u9884\u79ef\u5206\uff0c\u5206\u522b\u5f97\u5230\u4e00\u4e2a\u7ed3\u679c \u4e8c\u8005\u6b8b\u5dee\u5148\u7528\u4e8e\u6062\u590dbias\uff0c\u540e\u6062\u590d Scale\u3001\u901f\u5ea6\u3001\u91cd\u529b\u3001\u4f4d\u59ff \u4f18\u5316 \u7d27\u8026\u5408\u3001\u6ed1\u52a8\u7a97\u53e3\u4f18\u5316\uff0c\u4e0d\u65ad\u8fb9\u7f18\u5316\u5386\u53f2\u7a97\u53e3\u4fe1\u606f\u3002 IMU\u4e0e\u4f30\u8ba1\u91cf\u6709\u6b8b\u5dee\u3001\u89c6\u89c9\u5bf9\u6b8b\u5dee\u4e5f\u6709\u8d21\u732e\u3001\u8fb9\u7f18\u5316\u9057\u7559\u4e0b\u7684\u7ea6\u675f\uff0c\u4e5f\u8d21\u732e\u4e86\u6b8b\u5dee\u9879\u3002 \u6ce8\u610f x_{m2} x_{m2} x_{m3} x_{m3} \u4e4b\u95f4\u7684\u8fde\u63a5\u3002 \u5173\u4e8e First Estimate Jaccobian https://github.com/HKUST-Aerial-Robotics/VINS-Mono/issues/134 \u53ea\u5728margin\u6b8b\u5dee\u7528\u5230\u4e86fej \u56de\u73af\u68c0\u6d4b \u57fa\u4e8e DBoW \u53c2\u8003 https://zhuanlan.zhihu.com/p/31794554","title":"\u673a\u5668\u89c6\u89c9 | VIO-HKUST"},{"location":"reading/vins-ismar2017/#monocular-visual-inertial-state-estimation-for-mobile-augmented-reality","text":"","title":"Monocular Visual-Inertial State Estimation for Mobile Augmented Reality"},{"location":"reading/vins-ismar2017/#_1","text":"Vision-IMU \u7d27\u8026\u5408\uff08\u56fe\u50cf\u7279\u5f81\u52a0\u5165\u72b6\u6001\u53d8\u91cf\uff09\uff0c\u91c7\u7528\u6ed1\u52a8\u7a97\u53e3\u4f18\u5316\u65b9\u6cd5\u3002","title":"\u6982\u8ff0"},{"location":"reading/vins-ismar2017/#_2","text":"\u7279\u5f81\u70b9\u3001pose\u3001bias\u3001velocity\u3002","title":"\u72b6\u6001\u53d8\u91cf"},{"location":"reading/vins-ismar2017/#_3","text":"","title":"\u6d41\u7a0b"},{"location":"reading/vins-ismar2017/#_4","text":"\u89c6\u89c9\u90e8\u5206\u4f7f\u7528\u5149\u6d41\u8ddf\u8e2a\u7279 IMU \u4f7f\u7528\u9884\u79ef\u5206","title":"\u6570\u636e\u5904\u7406"},{"location":"reading/vins-ismar2017/#_5","text":"SfM\uff0cIMU \u9884\u79ef\u5206\uff0c\u5206\u522b\u5f97\u5230\u4e00\u4e2a\u7ed3\u679c \u4e8c\u8005\u6b8b\u5dee\u5148\u7528\u4e8e\u6062\u590dbias\uff0c\u540e\u6062\u590d Scale\u3001\u901f\u5ea6\u3001\u91cd\u529b\u3001\u4f4d\u59ff","title":"\u521d\u59cb\u5316"},{"location":"reading/vins-ismar2017/#_6","text":"\u7d27\u8026\u5408\u3001\u6ed1\u52a8\u7a97\u53e3\u4f18\u5316\uff0c\u4e0d\u65ad\u8fb9\u7f18\u5316\u5386\u53f2\u7a97\u53e3\u4fe1\u606f\u3002 IMU\u4e0e\u4f30\u8ba1\u91cf\u6709\u6b8b\u5dee\u3001\u89c6\u89c9\u5bf9\u6b8b\u5dee\u4e5f\u6709\u8d21\u732e\u3001\u8fb9\u7f18\u5316\u9057\u7559\u4e0b\u7684\u7ea6\u675f\uff0c\u4e5f\u8d21\u732e\u4e86\u6b8b\u5dee\u9879\u3002 \u6ce8\u610f x_{m2} x_{m2} x_{m3} x_{m3} \u4e4b\u95f4\u7684\u8fde\u63a5\u3002 \u5173\u4e8e First Estimate Jaccobian https://github.com/HKUST-Aerial-Robotics/VINS-Mono/issues/134 \u53ea\u5728margin\u6b8b\u5dee\u7528\u5230\u4e86fej","title":"\u4f18\u5316"},{"location":"reading/vins-ismar2017/#_7","text":"\u57fa\u4e8e DBoW","title":"\u56de\u73af\u68c0\u6d4b"},{"location":"reading/vins-ismar2017/#_8","text":"https://zhuanlan.zhihu.com/p/31794554","title":"\u53c2\u8003"},{"location":"slam/","text":"\u76ee\u5f55 \u72b6\u6001\u4f30\u8ba1 | \u6ce8\u89e3 State Estimation for Robotics| \u673a\u5668\u4eba\u4e2d\u7684\u72b6\u6001\u4f30\u8ba1 \u7814\u8bfb | IMU \u9884\u79ef\u5206 \u4e3b\u6d41 VIO \u6846\u67b6\u5206\u6790 | VINS-Mono\u3001MSCKF\u3001ROVIO \u4e3b\u6d41\u89c6\u89c9 SLAM \u6846\u67b6\u5206\u6790 | ORB-SLAM\u3001PTAM \u72b6\u6001\u4f30\u8ba1\u7684\u4f18\u5316 | \u4e09\u7ef4\u7a7a\u95f4\u4e2d\u7684\u674e\u7fa4\u674e\u4ee3\u6570 \u72b6\u6001\u4f30\u8ba1\u7edf\u4e00\u6846\u67b6 | \u8d1d\u53f6\u65af\u6ee4\u6ce2 | EKF\u3001UKF\u3001\u7c92\u5b50\u6ee4\u6ce2\u7684\u63a8\u5bfc \u72b6\u6001\u4f30\u8ba1\u7edf\u4e00\u6846\u67b6 | \u5149\u675f\u5e73\u5dee\u6cd5\u3001\u6ed1\u52a8\u7a97\u53e3\u6cd5\u3001\u5361\u5c14\u66fc\u6ee4\u6ce2\u5173\u8054 \u72b6\u6001\u4f30\u8ba1 | \u5b9e\u8df5 \u72b6\u6001\u4f30\u8ba1\u4e4b\u6279\u4f18\u5316\u65b9\u6cd5 | Bundle Adjustment \u5b9e\u8df5 \u72b6\u6001\u4f30\u8ba1\u4e4bEKF\u6cd5 | \u89c6\u89c9\u91cc\u7a0b\u8ba1\u5b9e\u8df5 \u72b6\u6001\u4f30\u8ba1\u4e4bEKF\u6cd5 | VIO\u5b9e\u8df5 \u72b6\u6001\u4f30\u8ba1\u6ed1\u52a8\u7a97\u53e3\u6cd5 | Sliding Window Filter \u5b9e\u8df5 \u72b6\u6001\u4f30\u8ba1\u4e2d\u7684\u7ebf\u6027\u4ee3\u6570 | Eigen\u5b9e\u8df5 \u72b6\u6001\u4f30\u8ba1\u4e2d\u7684\u674e\u7fa4\u674e\u4ee3\u6570 | Ceres\u3001Sophus\u5b9e\u8df5 \u72b6\u6001\u4f30\u8ba1\u4e2d\u7684\u56fe\u50cf\u76f8\u4f3c\u5ea6\u68c0\u6d4b | BoW\u5b9e\u8df5","title":"\u76ee\u5f55"},{"location":"slam/#_1","text":"","title":"\u76ee\u5f55"},{"location":"slam/#_2","text":"State Estimation for Robotics| \u673a\u5668\u4eba\u4e2d\u7684\u72b6\u6001\u4f30\u8ba1 \u7814\u8bfb | IMU \u9884\u79ef\u5206 \u4e3b\u6d41 VIO \u6846\u67b6\u5206\u6790 | VINS-Mono\u3001MSCKF\u3001ROVIO \u4e3b\u6d41\u89c6\u89c9 SLAM \u6846\u67b6\u5206\u6790 | ORB-SLAM\u3001PTAM \u72b6\u6001\u4f30\u8ba1\u7684\u4f18\u5316 | \u4e09\u7ef4\u7a7a\u95f4\u4e2d\u7684\u674e\u7fa4\u674e\u4ee3\u6570 \u72b6\u6001\u4f30\u8ba1\u7edf\u4e00\u6846\u67b6 | \u8d1d\u53f6\u65af\u6ee4\u6ce2 | EKF\u3001UKF\u3001\u7c92\u5b50\u6ee4\u6ce2\u7684\u63a8\u5bfc \u72b6\u6001\u4f30\u8ba1\u7edf\u4e00\u6846\u67b6 | \u5149\u675f\u5e73\u5dee\u6cd5\u3001\u6ed1\u52a8\u7a97\u53e3\u6cd5\u3001\u5361\u5c14\u66fc\u6ee4\u6ce2\u5173\u8054","title":"\u72b6\u6001\u4f30\u8ba1 | \u6ce8\u89e3"},{"location":"slam/#_3","text":"\u72b6\u6001\u4f30\u8ba1\u4e4b\u6279\u4f18\u5316\u65b9\u6cd5 | Bundle Adjustment \u5b9e\u8df5 \u72b6\u6001\u4f30\u8ba1\u4e4bEKF\u6cd5 | \u89c6\u89c9\u91cc\u7a0b\u8ba1\u5b9e\u8df5 \u72b6\u6001\u4f30\u8ba1\u4e4bEKF\u6cd5 | VIO\u5b9e\u8df5 \u72b6\u6001\u4f30\u8ba1\u6ed1\u52a8\u7a97\u53e3\u6cd5 | Sliding Window Filter \u5b9e\u8df5 \u72b6\u6001\u4f30\u8ba1\u4e2d\u7684\u7ebf\u6027\u4ee3\u6570 | Eigen\u5b9e\u8df5 \u72b6\u6001\u4f30\u8ba1\u4e2d\u7684\u674e\u7fa4\u674e\u4ee3\u6570 | Ceres\u3001Sophus\u5b9e\u8df5 \u72b6\u6001\u4f30\u8ba1\u4e2d\u7684\u56fe\u50cf\u76f8\u4f3c\u5ea6\u68c0\u6d4b | BoW\u5b9e\u8df5","title":"\u72b6\u6001\u4f30\u8ba1 | \u5b9e\u8df5"},{"location":"slam/category/","text":"SLAM \u5206\u7c7b \u6ee4\u6ce2\u548c\u4f18\u5316 \u72b6\u6001\u65b9\u7a0b\u5f97\u5230\u5148\u9a8c\uff0c\u89c2\u6d4b\u6765\u66f4\u6b63\u5f97\u5230\u540e\u9a8c\u79f0\u4e3a\u6ee4\u6ce2 \u72b6\u6001\u548c\u89c2\u6d4b\u4e4b\u95f4\u6784\u6210\u6b8b\u5dee\uff0c\u8fdb\u884c\u4f18\u5316\u7684\u65b9\u5f0f\u79f0\u4e3a\u4f18\u5316 \u6ee4\u6ce2\u65b9\u6cd5\uff1a\u7d27\u8026\u5408\u548c\u677e\u8026\u5408 \u5c06\u7279\u5f81\u70b9\u52a0\u5165\u72b6\u6001\u53d8\u91cf\u7684\u65b9\u5f0f\u79f0\u4e3a\u7d27\u8026\u5408\uff08\u5b9e\u8df5\u4e2d\uff0c\u5728\u89c2\u6d4b\u65b9\u7a0b\u5c06\u7279\u5f81\u70b9\u4ece\u72b6\u6001\u4e2dmargin out\u6389\uff09 \u677e\u8026\u5408\u6846\u67b6\u4e2d\u901a\u5e38\u53ea\u5305\u542bpose\u7b49\u53d8\u91cf\uff0c\u4e0d\u5305\u542b\u7279\u5f81\u70b9\u72b6\u6001 \u4f18\u5316\u65b9\u6cd5\uff1a\u5149\u675f\u6cd5\u5e73\u5dee\u3001\u56fe\u4f18\u5316 BA Graph \u4f20\u611f\u5668 \u7eaf\u89c6\u89c9 IMU \u6fc0\u5149\u96f7\u8fbe \u4e8b\u4ef6\u76f8\u673a \u7a00\u758f/\u7a20\u5bc6\u7279\u5f81 \u7a20\u5bc6 \u7a00\u758f \u611f\u77e5\u65b9\u5f0f \u8bed\u4e49 \u975e\u8bed\u4e49 \u53c2\u8003 http://www.cs.cmu.edu/~kaess/vslam_cvpr14/ \u677e\u7d27\u8026\u5408\u6765\u6e90 http://www.pamitc.org/cvpr14/tutorials.php https://blog.csdn.net/hzwwpgmwy/article/details/81607963 https://www.cnblogs.com/hitcm/p/6327442.html https://blog.csdn.net/kang1292655979/article/details/52799439 https://blog.csdn.net/qq_40213457/article/details/82668822 \u7279\u5f81\u70b9\u88ab\u5982\u4f55\u7528\u7684\u95ee\u9898\u5206\u4e3a\u4e86SLAM\u7279\u5f81\u70b9\u548cMSCKF\u7279\u5f81\u70b9\uff1aSLAM\u7279\u5f81\u70b9\u88ab\u52a0\u5165\u72b6\u6001\u5411\u91cf\u5e76\u88ab\u66f4\u65b0\uff0cMSCKF\u7279\u5f81\u70b9\u5728\u6d4b\u91cf\u7684\u76f8\u5173\u516c\u5f0f\u4e2d\u88ab\u5ffd\u89c6\uff08marginalize\uff09\u6389\u6765\u751f\u6210\u4f4d\u59ff\u4e4b\u95f4\u7684\u7ea6\u675f\u3002\u8fd9\u6837\u505a\u7684\u76ee\u7684\u5728\u4e8e\u65e2\u4fdd\u6301\u4e86\u51c6\u786e\u6027\u53c8\u7167\u987e\u5230\u4e86\u5904\u7406\u65f6\u95f4\u4e0d\u4f1a\u592a\u957f\u3002 PerceptIn\u8054\u5408\u521b\u59cb\u4eba-SLAM\u521a\u521a\u5f00\u59cb\u7684\u672a\u6765\u4e4b\u201c\u5de5\u7a0b\u7ec6\u8282\u201d \u6f2b\u8c08 SLAM \u6280\u672f\uff08\u4e0a\uff09 \u6f2b\u8c08 SLAM \u6280\u672f\uff08\u4e0b\uff09","title":"SLAM \u7c7b\u522b"},{"location":"slam/category/#slam","text":"","title":"SLAM \u5206\u7c7b"},{"location":"slam/category/#_1","text":"\u72b6\u6001\u65b9\u7a0b\u5f97\u5230\u5148\u9a8c\uff0c\u89c2\u6d4b\u6765\u66f4\u6b63\u5f97\u5230\u540e\u9a8c\u79f0\u4e3a\u6ee4\u6ce2 \u72b6\u6001\u548c\u89c2\u6d4b\u4e4b\u95f4\u6784\u6210\u6b8b\u5dee\uff0c\u8fdb\u884c\u4f18\u5316\u7684\u65b9\u5f0f\u79f0\u4e3a\u4f18\u5316","title":"\u6ee4\u6ce2\u548c\u4f18\u5316"},{"location":"slam/category/#_2","text":"\u5c06\u7279\u5f81\u70b9\u52a0\u5165\u72b6\u6001\u53d8\u91cf\u7684\u65b9\u5f0f\u79f0\u4e3a\u7d27\u8026\u5408\uff08\u5b9e\u8df5\u4e2d\uff0c\u5728\u89c2\u6d4b\u65b9\u7a0b\u5c06\u7279\u5f81\u70b9\u4ece\u72b6\u6001\u4e2dmargin out\u6389\uff09 \u677e\u8026\u5408\u6846\u67b6\u4e2d\u901a\u5e38\u53ea\u5305\u542bpose\u7b49\u53d8\u91cf\uff0c\u4e0d\u5305\u542b\u7279\u5f81\u70b9\u72b6\u6001","title":"\u6ee4\u6ce2\u65b9\u6cd5\uff1a\u7d27\u8026\u5408\u548c\u677e\u8026\u5408"},{"location":"slam/category/#_3","text":"BA Graph","title":"\u4f18\u5316\u65b9\u6cd5\uff1a\u5149\u675f\u6cd5\u5e73\u5dee\u3001\u56fe\u4f18\u5316"},{"location":"slam/category/#_4","text":"\u7eaf\u89c6\u89c9 IMU \u6fc0\u5149\u96f7\u8fbe \u4e8b\u4ef6\u76f8\u673a","title":"\u4f20\u611f\u5668"},{"location":"slam/category/#_5","text":"\u7a20\u5bc6 \u7a00\u758f","title":"\u7a00\u758f/\u7a20\u5bc6\u7279\u5f81"},{"location":"slam/category/#_6","text":"\u8bed\u4e49 \u975e\u8bed\u4e49","title":"\u611f\u77e5\u65b9\u5f0f"},{"location":"slam/category/#_7","text":"http://www.cs.cmu.edu/~kaess/vslam_cvpr14/ \u677e\u7d27\u8026\u5408\u6765\u6e90 http://www.pamitc.org/cvpr14/tutorials.php https://blog.csdn.net/hzwwpgmwy/article/details/81607963 https://www.cnblogs.com/hitcm/p/6327442.html https://blog.csdn.net/kang1292655979/article/details/52799439 https://blog.csdn.net/qq_40213457/article/details/82668822 \u7279\u5f81\u70b9\u88ab\u5982\u4f55\u7528\u7684\u95ee\u9898\u5206\u4e3a\u4e86SLAM\u7279\u5f81\u70b9\u548cMSCKF\u7279\u5f81\u70b9\uff1aSLAM\u7279\u5f81\u70b9\u88ab\u52a0\u5165\u72b6\u6001\u5411\u91cf\u5e76\u88ab\u66f4\u65b0\uff0cMSCKF\u7279\u5f81\u70b9\u5728\u6d4b\u91cf\u7684\u76f8\u5173\u516c\u5f0f\u4e2d\u88ab\u5ffd\u89c6\uff08marginalize\uff09\u6389\u6765\u751f\u6210\u4f4d\u59ff\u4e4b\u95f4\u7684\u7ea6\u675f\u3002\u8fd9\u6837\u505a\u7684\u76ee\u7684\u5728\u4e8e\u65e2\u4fdd\u6301\u4e86\u51c6\u786e\u6027\u53c8\u7167\u987e\u5230\u4e86\u5904\u7406\u65f6\u95f4\u4e0d\u4f1a\u592a\u957f\u3002 PerceptIn\u8054\u5408\u521b\u59cb\u4eba-SLAM\u521a\u521a\u5f00\u59cb\u7684\u672a\u6765\u4e4b\u201c\u5de5\u7a0b\u7ec6\u8282\u201d \u6f2b\u8c08 SLAM \u6280\u672f\uff08\u4e0a\uff09 \u6f2b\u8c08 SLAM \u6280\u672f\uff08\u4e0b\uff09","title":"\u53c2\u8003"},{"location":"slam/fej/","text":"FEJ fej\uff1a\u53ea\u8ba1\u7b97\u72b6\u6001\u53d8\u91cf\u96c5\u53ef\u6bd4\u4e00\u6b21\uff0c\u540e\u7eed\u5373\u4f7f\u53d8\u91cf\u66f4\u65b0\u4e5f\u4e0d\u518d\u91cd\u65b0\u8ba1\u7b97\u96c5\u53ef\u6bd4\uff08\u4e0e\u7cfb\u7edf\u53ef\u89c2\u6027\u76f8\u5173\uff09","title":"FEJ"},{"location":"slam/fej/#fej","text":"fej\uff1a\u53ea\u8ba1\u7b97\u72b6\u6001\u53d8\u91cf\u96c5\u53ef\u6bd4\u4e00\u6b21\uff0c\u540e\u7eed\u5373\u4f7f\u53d8\u91cf\u66f4\u65b0\u4e5f\u4e0d\u518d\u91cd\u65b0\u8ba1\u7b97\u96c5\u53ef\u6bd4\uff08\u4e0e\u7cfb\u7edf\u53ef\u89c2\u6027\u76f8\u5173\uff09","title":"FEJ"},{"location":"slam/filter-optimization/","text":"\u6ee4\u6ce2\u548c\u4f18\u5316\u5173\u7cfb \u4f18\u5316\u7ebf\u6027\u9ad8\u65af\u7cfb\u7edf \u4f18\u5316\u53d8\u91cf x=\\begin{bmatrix} x_{0}\\\\ x_{1}\\\\ \\vdots\\\\ x_{K}\\\\ \\end{bmatrix} x=\\begin{bmatrix} x_{0}\\\\ x_{1}\\\\ \\vdots\\\\ x_{K}\\\\ \\end{bmatrix} \u521d\u59cb\u72b6\u6001\u3001\u8f93\u5165\u3001\u89c2\u6d4b v=\\begin{bmatrix} \\check{x}_{0}\\\\ v_{1}\\\\ \\vdots\\\\ v_{K}\\\\ \\end{bmatrix} v=\\begin{bmatrix} \\check{x}_{0}\\\\ v_{1}\\\\ \\vdots\\\\ v_{K}\\\\ \\end{bmatrix} y=\\begin{bmatrix} y_{0}\\\\ y_{1}\\\\ \\vdots\\\\ y_{K}\\\\ \\end{bmatrix} y=\\begin{bmatrix} y_{0}\\\\ y_{1}\\\\ \\vdots\\\\ y_{K}\\\\ \\end{bmatrix} \u6982\u5ff5\u5173\u8054 \u6982\u5ff5\u5217\u8868 \u6700\u5927\u540e\u9a8c\u4f30\u8ba1\u3001\u5148\u9a8c\u3001\u6700\u5927\u4f3c\u7136\u4f30\u8ba1 \u9ad8\u65af\u5206\u5e03\u4e0b\u7684\u6982\u7387\u5206\u5e03 \u6700\u5c0f\u4e8c\u4e58\u6cd5 \u725b\u987f\u4f30\u8ba1\u6cd5 \u6279\u65b9\u6cd5 \u6700\u5c0f\u4e8c\u4e58 \u8212\u5c14\u8865 - \u52a0\u6743\u6700\u5c0f\u4e8c\u4e58\u6700\u540e\u9700\u8981\u6c42\u89e3\u77e9\u9635\u7b49\u5f0f \u5bf9\u77e9\u9635\u8fdb\u884c\u5206\u89e3\uff0c\u7b2c\u4e00\u884c\u5f80\u4e0b\u5e26\u7684\u8fc7\u7a0b\u79f0\u4e3a forward pass\uff0c\u5bf9\u5e94\u6ee4\u6ce2\uff08Filtering\uff09\u65b9\u6cd5 \u4ece\u6700\u540e\u4e00\u884c\u5f80\u524d\u6c42\u89e3\u6210\u4e3a backward pass\uff0c\u5bf9\u5e94\u5e73\u6ed1\uff08Smoothing\uff09\u65b9\u6cd5\uff0c\u4e5f\u79f0\u4f18\u5316\uff08Optimization\uff09\u65b9\u6cd5 \u53c2\u8003 http://blog.sciencenet.cn/blog-465130-1086221.html https://zhuanlan.zhihu.com/p/53400408","title":"\u6ee4\u6ce2\u548c\u4f18\u5316"},{"location":"slam/filter-optimization/#_1","text":"","title":"\u6ee4\u6ce2\u548c\u4f18\u5316\u5173\u7cfb"},{"location":"slam/filter-optimization/#_2","text":"\u4f18\u5316\u53d8\u91cf x=\\begin{bmatrix} x_{0}\\\\ x_{1}\\\\ \\vdots\\\\ x_{K}\\\\ \\end{bmatrix} x=\\begin{bmatrix} x_{0}\\\\ x_{1}\\\\ \\vdots\\\\ x_{K}\\\\ \\end{bmatrix} \u521d\u59cb\u72b6\u6001\u3001\u8f93\u5165\u3001\u89c2\u6d4b v=\\begin{bmatrix} \\check{x}_{0}\\\\ v_{1}\\\\ \\vdots\\\\ v_{K}\\\\ \\end{bmatrix} v=\\begin{bmatrix} \\check{x}_{0}\\\\ v_{1}\\\\ \\vdots\\\\ v_{K}\\\\ \\end{bmatrix} y=\\begin{bmatrix} y_{0}\\\\ y_{1}\\\\ \\vdots\\\\ y_{K}\\\\ \\end{bmatrix} y=\\begin{bmatrix} y_{0}\\\\ y_{1}\\\\ \\vdots\\\\ y_{K}\\\\ \\end{bmatrix}","title":"\u4f18\u5316\u7ebf\u6027\u9ad8\u65af\u7cfb\u7edf"},{"location":"slam/filter-optimization/#_3","text":"\u6982\u5ff5\u5217\u8868 \u6700\u5927\u540e\u9a8c\u4f30\u8ba1\u3001\u5148\u9a8c\u3001\u6700\u5927\u4f3c\u7136\u4f30\u8ba1 \u9ad8\u65af\u5206\u5e03\u4e0b\u7684\u6982\u7387\u5206\u5e03 \u6700\u5c0f\u4e8c\u4e58\u6cd5 \u725b\u987f\u4f30\u8ba1\u6cd5 \u6279\u65b9\u6cd5 \u6700\u5c0f\u4e8c\u4e58 \u8212\u5c14\u8865 - \u52a0\u6743\u6700\u5c0f\u4e8c\u4e58\u6700\u540e\u9700\u8981\u6c42\u89e3\u77e9\u9635\u7b49\u5f0f \u5bf9\u77e9\u9635\u8fdb\u884c\u5206\u89e3\uff0c\u7b2c\u4e00\u884c\u5f80\u4e0b\u5e26\u7684\u8fc7\u7a0b\u79f0\u4e3a forward pass\uff0c\u5bf9\u5e94\u6ee4\u6ce2\uff08Filtering\uff09\u65b9\u6cd5 \u4ece\u6700\u540e\u4e00\u884c\u5f80\u524d\u6c42\u89e3\u6210\u4e3a backward pass\uff0c\u5bf9\u5e94\u5e73\u6ed1\uff08Smoothing\uff09\u65b9\u6cd5\uff0c\u4e5f\u79f0\u4f18\u5316\uff08Optimization\uff09\u65b9\u6cd5","title":"\u6982\u5ff5\u5173\u8054"},{"location":"slam/filter-optimization/#_4","text":"http://blog.sciencenet.cn/blog-465130-1086221.html https://zhuanlan.zhihu.com/p/53400408","title":"\u53c2\u8003"},{"location":"slam/margin/","text":"Margin\u3001Schur complement margin\uff1a\u6982\u5ff5\uff0c\u9650\u5236\u4f18\u5316\u8ba1\u7b97\u91cf\uff0c\u5c06\u53d8\u91cf\u4f18\u96c5\u79fb\u9664\uff0c\u540c\u65f6\u4fdd\u7559\u5173\u952e\u4fe1\u606f schur\uff1a\u4e0emargin\u6982\u5ff5\u7ed1\u5b9a\uff0c\u4f18\u96c5\u79fb\u9664\u53d8\u91cf\u7684\u65b9\u6cd5 \u53c2\u8003 https://blog.csdn.net/heyijia0327/article/details/53707261","title":"\u8fb9\u7f18\u5316"},{"location":"slam/margin/#marginschur-complement","text":"margin\uff1a\u6982\u5ff5\uff0c\u9650\u5236\u4f18\u5316\u8ba1\u7b97\u91cf\uff0c\u5c06\u53d8\u91cf\u4f18\u96c5\u79fb\u9664\uff0c\u540c\u65f6\u4fdd\u7559\u5173\u952e\u4fe1\u606f schur\uff1a\u4e0emargin\u6982\u5ff5\u7ed1\u5b9a\uff0c\u4f18\u96c5\u79fb\u9664\u53d8\u91cf\u7684\u65b9\u6cd5","title":"Margin\u3001Schur complement"},{"location":"slam/margin/#_1","text":"https://blog.csdn.net/heyijia0327/article/details/53707261","title":"\u53c2\u8003"},{"location":"slam/reference/","text":"\u8d44\u6599 https://blog.csdn.net/wendox/article/details/52416663","title":"\u8d44\u6599"},{"location":"slam/reference/#_1","text":"https://blog.csdn.net/wendox/article/details/52416663","title":"\u8d44\u6599"},{"location":"slam/state-estimation/","text":"\u300a\u673a\u5668\u4eba\u5b66\u4e2d\u7684\u72b6\u6001\u4f30\u8ba1\u300b \u8be6\u7ec6\u63cf\u8ff0\u4e86\u4e09\u7ef4\u7a7a\u95f4\u673a\u5668\u4eba\u7684\u72b6\u6001\u4f30\u8ba1\uff0c\u503c\u5f97\u4e00\u8bfb\u3002 Chapter 1 \u72b6\u6001\u4f30\u8ba1 \u673a\u5668\u4eba\u5b66\u4e2d\u7684\u91cd\u8981\u95ee\u9898\uff1a\u72b6\u6001\u4f30\u8ba1\u548c\u63a7\u5236 \u72b6\u6001\uff1a\u4e00\u7ec4\u5b8c\u6574\u63cf\u8ff0\u4ed6\u968f\u65f6\u95f4\u8fd0\u52a8\u7684\u7269\u7406\u91cf\uff0c\u5982\u4f4d\u7f6e\u3001\u901f\u5ea6\u3001\u89d2\u901f\u5ea6 1.1 \u72b6\u6001\u4f30\u8ba1\u7b80\u53f2 \u822a\u6d77\u5b9a\u4f4d \u5929\u6587\u5b66\u662f\u72b6\u6001\u4f30\u8ba1\u7406\u8bba\u8d77\u6e90 \u9ad8\u65af\u8bc1\u660e\u4e86\u6b63\u6001\u5206\u5e03\u8bef\u5dee\u5047\u8bbe\u4e0b\uff0c\u6700\u5c0f\u4e8c\u4e58\u5373\u6700\u4f18\u89e3 \u5361\u5c14\u66fc \u80fd\u5173\u6027\uff1a\u52a8\u6001\u7cfb\u7edf\u7684\u72b6\u6001\u4f55\u65f6\u80fd\u4ece\u8be5\u7cfb\u7edf\u7684\u4e00\u7ec4\u89c2\u6d4b\u503c\u4e2d\u63a8\u65ad\u51fa\u6765 \u5361\u5c14\u66fc\u6ee4\u6ce2\uff0c\u4f30\u8ba1\u7cfb\u7edf\u72b6\u6001\u7684\u4f18\u5316\u6846\u67b6\uff0c\u9488\u5bf9\u53d7\u9ad8\u65af\u89c2\u6d4b\u566a\u58f0\u5f71\u54cd\u7684\u7ebf\u6027\u7cfb\u7edf\u72b6\u6001\u4f30\u8ba1\u65b9\u6cd5 \u65b0\u578b\u4f20\u611f\u5668\u5174\u8d77 \u76f8\u673a\u3001\u6fc0\u5149\u3001GPS 1.2 \u4f20\u611f\u5668\u3001\u6d4b\u91cf\u548c\u95ee\u9898\u5b9a\u4e49 interoceptive \u52a0\u901f\u5ea6\u8ba1\u3001\u9640\u87ba\u4eea\u3001\u8f6e\u5f0f\u7f16\u7801\u5668 exteroceptive \u76f8\u673a\u3001ToF\uff08\u6fc0\u5149\u3001GPS\uff09 \u6700\u597d\u7684\u72b6\u6001\u4f30\u8ba1\uff1a\u540c\u65f6\u6709\u6548\u878d\u5408\u5185\u611f\u53d7\u578b\u3001\u5916\u611f\u53d7\u578b\u4f20\u611f\u5668\u89c2\u6d4b\u503c \u72b6\u6001\u4f30\u8ba1\uff1a\u6839\u636e\u7cfb\u7edf\u5148\u9a8c\u6a21\u578b\u548c\u6d4b\u91cf\u5e8f\u5217\uff0c\u5bf9\u7cfb\u7edf\u5185\u5728\u72b6\u6001\u8fdb\u884c\u91cd\u6784\u3002 1.3 \u672c\u4e66\u7ec4\u7ec7\u7ed3\u6784 \u72b6\u6001\u4f30\u8ba1\u673a\u7406 \u9012\u5f52\u3001\u6279\u65b9\u6cd5 \u8d1d\u53f6\u65af\u65b9\u6cd5\u3001\u6700\u5927\u540e\u9a8c\u4f30\u8ba1 \u8fde\u7eed\u65f6\u95f4\u72b6\u6001\u4f30\u8ba1\u3001\u9ad8\u65af\u8fc7\u7a0b\u56de\u5f52\u65b9\u6cd5 \u9c81\u68d2\u4f30\u8ba1\u548c\u504f\u5dee \u4e09\u7ef4\u7a7a\u95f4\u8fd0\u52a8\u673a\u7406 \u674e\u7fa4\u674e\u4ee3\u6570 \u5e94\u7528 \u7ed3\u5408\u524d\u4e24\u90e8\u5206 1.4 \u4e0e\u5176\u4ed6\u6559\u7a0b\u7684\u5173\u7cfb \u552f\u4e00\u540c\u65f6\u6d89\u53ca\u4ee5\u4e0b\u4e3b\u9898\u7684\u4e66\u7c4d \u4e09\u7ef4\u7a7a\u95f4 \u72b6\u6001\u4f30\u8ba1 Chapter 2 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u3001\u9ad8\u65af\u6982\u7387\u5bc6\u5ea6\u51fd\u6570 \u5f15\u5165\u8d1d\u53f6\u65af\u516c\u5f0f 2.1 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570 2.1.1 \u5b9a\u4e49 \u5168\u6982\u7387\u516c\u7406 \u6982\u7387\u5bc6\u5ea6 \u6761\u4ef6\u6982\u7387 \u8054\u5408\u6982\u7387\u5bc6\u5ea6 2.1.2 \u8d1d\u53f6\u65af\u516c\u5f0f\u53ca\u63a8\u65ad p(x|y) = \\frac{p(y|x)p(x)}{p(y)} p(x|y) = \\frac{p(y|x)p(x)}{p(y)} p(x) p(x) \u5148\u9a8c p(x|y) p(x|y) \u540e\u9a8c \u5728\u72b6\u6001\u4f30\u8ba1\u4e2d\uff0c\u72b6\u6001\u7684\u5148\u9a8c p(x) p(x) \u548c\u4f20\u611f\u5668\u6a21\u578b p(y|x) p(y|x) \u63a8\u51fa\u72b6\u6001\u7684\u540e\u9a8c p(x|y) p(x|y) \u8fb9\u7f18\u5316\u8ba1\u7b97 p(y) p(y) \uff1a p(y)=\\int{p(y|x)p(x)\\mathrm{d}x} p(y)=\\int{p(y|x)p(x)\\mathrm{d}x} \u8d1d\u53f6\u65af\u63a8\u65ad\uff1a\u5229\u7528\u89c2\u6d4b\u6765\u4fee\u6b63\u4f30\u8ba1 2.1.3 \u77e9 \u6982\u7387\u96f6\u9636\u77e9\uff1a\u5168\u4e8b\u4ef6\u6982\u7387 \u6982\u7387\u4e00\u9636\u77e9\uff1a\u671f\u671b \u6982\u7387\u4e8c\u9636\u77e9\uff1a\u534f\u65b9\u5dee\u77e9\u9635 2.1.4 \u6837\u672c\u5747\u503c\u548c\u6837\u672c\u65b9\u5dee \u6837\u672c\u4e3a\u968f\u673a\u53d8\u91cf\u7684\u4e00\u6b21\u5b9e\u73b0 \u901a\u8fc7\u6837\u672c\u4f30\u8ba1\u968f\u673a\u53d8\u91cf\u7684\u671f\u671b\u548c\u65b9\u5dee \u65b9\u5dee\u7684\u8d1d\u585e\u5c14\u4fee\u6b63 2.1.5 \u7edf\u8ba1\u72ec\u7acb\u6027\u4e0e\u4e0d\u76f8\u5173\u6027 \u7edf\u8ba1\u72ec\u7acb p(x, y) = p(x)p(y) p(x, y) = p(x)p(y) \u4e0d\u76f8\u5173 \\mathrm{E}[xy^{T}] = \\mathrm{E}[x]\\mathrm{E}[y] \\mathrm{E}[xy^{T}] = \\mathrm{E}[x]\\mathrm{E}[y] 2.1.6 \u5f52\u4e00\u5316\u79ef \u4e00\u4e2a\u968f\u673a\u53d8\u91cf\u7684\u4e24\u4e2a\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u5f52\u4e00\u5316 p(x) = \\eta p_{1}(x)p_{2}(x) p(x) = \\eta p_{1}(x)p_{2}(x) \u9999\u519c\u4fe1\u606f\u548c\u4e92\u4fe1\u606f \u4e0d\u786e\u5b9a\u6027\u63cf\u8ff0 \u514b\u7f57\u7f8e\u62c9\u4e0b\u754c\u548c\u8d39\u6b47\u5c14\u4fe1\u606f\u91cf \u514b\u7f57\u7f8e\u62c9\u4e0b\u754c\uff1a\u53c2\u6570\u4f30\u8ba1\u7684\u534f\u65b9\u5dee\u7684\u4e0b\u754c\u7531\u8d39\u6b47\u5c14\u4fe1\u606f\u77e9\u9635\u5b9a\u4e49 2.2 \u9ad8\u65af\u6982\u7387\u5bc6\u5ea6\u51fd\u6570 2.2.1 \u5b9a\u4e49 Isserlis \u5b9a\u7406 \u5b9a\u7406\u7528\u4e8e\u8ba1\u7b97\u9ad8\u9636\u77e9 2.2.3 \u8054\u5408\u9ad8\u65af\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\uff0c\u5206\u89e3\u4e0e\u63a8\u65ad \u8054\u5408\u6982\u7387\u5206\u5e03\uff0c\u5206\u89e3\u4e3a\u6761\u4ef6\u6982\u7387\u53ca\u8fb9\u7f18\u6982\u7387 \u5229\u7528\u8212\u5c14\u8865\u63a8\u6f14\u591a\u5143\u9ad8\u65af\u5206\u5e03\u7684\u5206\u89e3\u8fc7\u7a0b \u9ad8\u65af\u63a8\u65ad\uff1a\u5229\u7528\u89c2\u6d4b\u503c\uff0c\u4fee\u6b63\u5148\u9a8c\u6982\u7387\u5206\u5e03\u5747\u503c\u3001\u51cf\u5c0f\u534f\u65b9\u5dee 2.2.4 \u7edf\u8ba1\u72ec\u7acb\u6027\u3001\u4e0d\u76f8\u5173\u6027 \u9ad8\u65af\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u4e0b\uff0c\u7edf\u8ba1\u72ec\u7acb\u6027\u548c\u4e0d\u76f8\u5173\u6027\u7b49\u4ef7 2.2.5 \u9ad8\u65af\u5206\u5e03\u968f\u673a\u53d8\u91cf\u7684\u7ebf\u6027\u53d8\u6362 x \\in \\mathbb{R}^{N} \\sim \\mathcal{N}(\\mu_x, \\Sigma_{xx}) x \\in \\mathbb{R}^{N} \\sim \\mathcal{N}(\\mu_x, \\Sigma_{xx}) y= Gx y= Gx \uff0c G \\in \\mathbb{R}^{M \\times N} G \\in \\mathbb{R}^{M \\times N} y \\in \\mathbb{R}^{M} \\sim \\mathcal{N}(G\\mu_x, G\\Sigma_{xx}G^T) y \\in \\mathbb{R}^{M} \\sim \\mathcal{N}(G\\mu_x, G\\Sigma_{xx}G^T) 2.2.6 \u9ad8\u65af\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u7684\u5f52\u4e00\u5316\u79ef K \u4e2a\u9ad8\u65af\u6982\u7387\u5bc6\u5ea6\u5206\u5e03\u7684\u79ef\u4ecd\u662f\u9ad8\u65af \u5bf9\u4e8e\u7ebf\u6027\u53d8\u6362\uff0c\u4ecd\u6709\u7c7b\u4f3c\u7ed3\u679c 2.2.7 SMW \u7b49\u5f0f \u53ef\u9006\u77e9\u9635\u7ecf\u8fc7\u4e0a\u4e09\u89d2\u3001\u4e0b\u4e09\u89d2\u5206\u89e3\uff0c\u6c42\u9006\uff0c\u7531\u4e00\u4e2a\u6052\u7b49\u5f0f\u5f15\u51fa\u7684\u56db\u4e2a\u4e0d\u540c\u7b49\u5f0f \u53c8\u79f0\u77e9\u9635\u6c42\u9006\u5f15\u7406 2.2.8 \u9ad8\u65af\u5206\u5e03\u968f\u673a\u53d8\u91cf\u7684\u975e\u7ebf\u6027\u53d8\u6362 p(y) = \\int_{-\\infty}^{\\infty} p(y|x) p(x) \\mathrm{d}x p(y) = \\int_{-\\infty}^{\\infty} p(y|x) p(x) \\mathrm{d}x \uff0c\u8d1d\u53f6\u65af\u63a8\u65ad\u5206\u6bcd\u5b58\u5728\u8fd9\u6837\u7684\u53d8\u6362 p(y|x) = \\mathcal{N}(g(x), R) p(y|x) = \\mathcal{N}(g(x), R) \uff0c\u8868\u793a\u975e\u7ebf\u6027\u53d8\u6362\u540e\uff0c\u4ecd\u53d7\u4e00\u4e2a\u96f6\u5747\u503c\u9ad8\u65af\u566a\u58f0\u5f71\u54cd\uff0c\u5e38\u89c1\u4e8e\u4f20\u611f\u5668\u4e2d p(x) = \\mathcal{N}(\\mu_x, \\Sigma_{xx}) p(x) = \\mathcal{N}(\\mu_x, \\Sigma_{xx}) \uff0c\u7406\u89e3\u4e3a\u72b6\u6001\u91cf\uff0c\u9ad8\u65af\u5206\u5e03 \u4e00\u822c\u60c5\u51b5\u4e0b\u7684\u7ebf\u6027\u5316\u5904\u7406 g(x) \\approx \\mu_y + G(x-\\mu_x) g(x) \\approx \\mu_y + G(x-\\mu_x) \u6cf0\u52d2\u516c\u5f0f G=\\frac{\\partial g(x)}{\\partial x} \\rvert_{x=\\mu_x} G=\\frac{\\partial g(x)}{\\partial x} \\rvert_{x=\\mu_x} \\mu_y=g(\\mu_x) \\mu_y=g(\\mu_x) - p(y)=\\rho \\exp{(-\\frac{1}{2}(y-\\mu_y)^T(R+G\\Sigma_{xx}G^T)^{-1}(y-\\mu_y))} p(y)=\\rho \\exp{(-\\frac{1}{2}(y-\\mu_y)^T(R+G\\Sigma_{xx}G^T)^{-1}(y-\\mu_y))} \uff0c\u4e3a\u79bb\u6563\u65f6\u95f4\u5361\u5c14\u66fc\u6ee4\u6ce2\u7684\u89c2\u6d4b\u90e8\u5206 2.2.9 \u9ad8\u65af\u5206\u5e03\u7684\u9999\u519c\u4fe1\u606f \u534f\u65b9\u5dee 2.2.10 \u8054\u5408\u9ad8\u65af\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u7684\u4e92\u4fe1\u606f \u76f4\u63a5\u4ee3\u5165\u8ba1\u7b97 2.2.11 \u9ad8\u65af\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u7684\u514b\u62c9\u7f8e\u7f57\u4e0b\u754c \\frac{1}{K} \\Sigma \\frac{1}{K} \\Sigma 2.3 \u9ad8\u65af\u8fc7\u7a0b \u65f6\u95f4 t \u4e0a\u7684\u8fde\u7eed\u72b6\u6001\u91cf GP \u7684\u5206\u5e03\u5c31\u662f\u5bf9\u4e8e\u65f6\u95f4\u57df\u4e0a\u6240\u6709\u968f\u673a\u53d8\u91cf\u7684\u8054\u5408\u5206\u5e03 GP \u4efb\u610f\u4e2a\u6837\u672c\u70b9\uff08\u5bf9\u5e94\u4e0d\u540c\u65f6\u523b\u7684\u968f\u673a\u53d8\u91cf\uff09\u8054\u5408\u9700\u8981\u670d\u4ece\u591a\u5143\u9ad8\u65af\u5206\u5e03 GP \u534f\u65b9\u5dee\u523b\u753b\u8f68\u8ff9\u7684\u5e73\u6ed1\u7a0b\u5ea6 GP \u534f\u65b9\u5dee\u53c8\u79f0 Kernels \u53ef\u4ee5\u53c2\u770b\u94fe\u63a5\u4e2d\u7684\u56fe\uff0c\u5bf9\u9ad8\u65af\u8fc7\u7a0b\u72b6\u6001\u6709\u521d\u6b65\u5370\u8c61 https://www.studyai.cn/modules/gaussian_process.html Chapter 3 \u72b6\u6001\u4f30\u8ba1\uff0cLinear Gaussian\uff08LG\uff09 3.1 \u79bb\u6563\u65f6\u95f4\u7684\u6279\u4f30\u8ba1 3.1.1 \u95ee\u9898\u5b9a\u4e49 \u8fd0\u52a8\u65b9\u7a0b\uff1a x_k = A_{k-1}x_{k-1} + v_k + w_k x_k = A_{k-1}x_{k-1} + v_k + w_k \u89c2\u6d4b\u65b9\u7a0b\uff1a y_k = C_kx_k + n_k y_k = C_kx_k + n_k \u6700\u5927\u540e\u9a8c\u4f30\u8ba1\u3001\u8d1d\u53f6\u65af\u63a8\u65ad\uff0c\u4e24\u79cd\u65b9\u6cd5\u4f30\u8ba1\u7cfb\u7edf\u72b6\u6001 LG\u72b6\u6001\u4f30\u8ba1\u7684\u6839\u672c\u63a8\u5bfc\u6765\u6e90\u4e8e\u6b64 \u6279\u4f30\u8ba1\uff0c\u5229\u7528\u5168\u90e8\u89c2\u6d4b\u3001\u6570\u636e\u63a8\u65ad\u5f53\u524d\u65f6\u523b\u72b6\u6001\uff0c\u5229\u7528Cholesky\u5206\u89e3\u3001RTS\u5e73\u6ed1\u7b97\u6cd5 \u9012\u5f52\u4f30\u8ba1\uff0c\u5f53\u524d\u65f6\u523b\u72b6\u6001\u4ec5\u7531\u4e4b\u524d\u4fe1\u606f\u51b3\u5b9a\u3002 \u5173\u8054\uff1a \u5229\u7528\u8d1d\u53f6\u65af\u516c\u5f0f\u3001\u9a6c\u5c14\u53ef\u592b\u6027\u3001\u6761\u4ef6\u72ec\u7acb\uff0c \u5229\u7528\u6700\u5927\u540e\u9a8c\u4f30\u8ba1\uff0c\u6781\u503c\u70b9\uff0c \u5229\u7528\u8fd0\u52a8-\u89c2\u6d4b\u65b9\u7a0b\u7684\u7ebf\u6027\u9ad8\u65af\u5206\u5e03\uff0c \u8fde\u7acb\u6c42\u89e3\u51fa\u7cfb\u7edf\u72b6\u6001 \u5229\u7528Cholesky\u5206\u89e3\uff0c\u8fdb\u884c\u6279\u4f30\u8ba1\uff0c\u6279\u4f30\u8ba1\u5229\u7528\u6240\u6709\u65f6\u523b\u4fe1\u606f\u6765\u9884\u6d4b\u72b6\u6001 \u901a\u8fc7\u8fb9\u7f18\u5316\uff0c\u5f97\u5230\u5173\u4e8e\u67d0\u65f6\u523b\u7684\u4f30\u8ba1\uff0c\u4f30\u8ba1\u53c8\u5206\u4e3a\u5229\u7528k\u4e4b\u524d\u4fe1\u606f\u4ee5\u53cak\u672a\u6765\u4fe1\u606f \u4ec5\u5229\u7528k\u4e4b\u524d\u4fe1\u606f\u8fdb\u884c\u4f30\u8ba1\uff0c\u5f97\u5230\u524d\u5411\u4f30\u8ba1\uff0c\u79f0\u4e3a\u6ee4\u6ce2\uff0cFilter \u8fdb\u4e00\u6b65\uff0ck\u53ef\u4ee5\u5229\u7528k-1\u4fe1\u606f\u5f97\u5230\u7ed3\u679c\uff0c\u5f97\u5230\u5361\u5c14\u66fc\u6ee4\u6ce2\u5f62\u5f0f \uff08MAP\u3001\u8d1d\u53f6\u65af\u4e24\u79cd\u63a8\u5bfc\uff09 Chapter 4 \u72b6\u6001\u4f30\u8ba1\uff0cNon Linear Non Gaussian 4.22\u63a8\u5bfc\u81f3\u5173\u91cd\u8981\u3002 \u5728\u8d1d\u53f6\u65af\u6846\u67b6\u4e0b\uff0c\u53d1\u5c55\u51fa\u9ad8\u65af\u6ee4\u6ce2 \u7c92\u5b50\u6ee4\u6ce2 \u5229\u7528\u5728k\u5904\u7ebf\u6027\u5316\uff0c \u63a8\u5bfc\u51fa\u6269\u5c55\u5361\u5c14\u66fc\u6ee4\u6ce2 SLAM\u7cfb\u7edf\u7684\u6ee4\u6ce2\u548c\u4f18\u5316\u65b9\u6cd5\u7b14\u8bb0 - \u738b\u7433\u7684\u535a\u6587","title":"\u300a\u673a\u5668\u4eba\u5b66\u4e2d\u7684\u72b6\u6001\u4f30\u8ba1\u300b"},{"location":"slam/state-estimation/#_1","text":"\u8be6\u7ec6\u63cf\u8ff0\u4e86\u4e09\u7ef4\u7a7a\u95f4\u673a\u5668\u4eba\u7684\u72b6\u6001\u4f30\u8ba1\uff0c\u503c\u5f97\u4e00\u8bfb\u3002","title":"\u300a\u673a\u5668\u4eba\u5b66\u4e2d\u7684\u72b6\u6001\u4f30\u8ba1\u300b"},{"location":"slam/state-estimation/#chapter-1","text":"\u673a\u5668\u4eba\u5b66\u4e2d\u7684\u91cd\u8981\u95ee\u9898\uff1a\u72b6\u6001\u4f30\u8ba1\u548c\u63a7\u5236 \u72b6\u6001\uff1a\u4e00\u7ec4\u5b8c\u6574\u63cf\u8ff0\u4ed6\u968f\u65f6\u95f4\u8fd0\u52a8\u7684\u7269\u7406\u91cf\uff0c\u5982\u4f4d\u7f6e\u3001\u901f\u5ea6\u3001\u89d2\u901f\u5ea6","title":"Chapter 1 \u72b6\u6001\u4f30\u8ba1"},{"location":"slam/state-estimation/#11","text":"\u822a\u6d77\u5b9a\u4f4d \u5929\u6587\u5b66\u662f\u72b6\u6001\u4f30\u8ba1\u7406\u8bba\u8d77\u6e90 \u9ad8\u65af\u8bc1\u660e\u4e86\u6b63\u6001\u5206\u5e03\u8bef\u5dee\u5047\u8bbe\u4e0b\uff0c\u6700\u5c0f\u4e8c\u4e58\u5373\u6700\u4f18\u89e3 \u5361\u5c14\u66fc \u80fd\u5173\u6027\uff1a\u52a8\u6001\u7cfb\u7edf\u7684\u72b6\u6001\u4f55\u65f6\u80fd\u4ece\u8be5\u7cfb\u7edf\u7684\u4e00\u7ec4\u89c2\u6d4b\u503c\u4e2d\u63a8\u65ad\u51fa\u6765 \u5361\u5c14\u66fc\u6ee4\u6ce2\uff0c\u4f30\u8ba1\u7cfb\u7edf\u72b6\u6001\u7684\u4f18\u5316\u6846\u67b6\uff0c\u9488\u5bf9\u53d7\u9ad8\u65af\u89c2\u6d4b\u566a\u58f0\u5f71\u54cd\u7684\u7ebf\u6027\u7cfb\u7edf\u72b6\u6001\u4f30\u8ba1\u65b9\u6cd5 \u65b0\u578b\u4f20\u611f\u5668\u5174\u8d77 \u76f8\u673a\u3001\u6fc0\u5149\u3001GPS","title":"1.1 \u72b6\u6001\u4f30\u8ba1\u7b80\u53f2"},{"location":"slam/state-estimation/#12","text":"interoceptive \u52a0\u901f\u5ea6\u8ba1\u3001\u9640\u87ba\u4eea\u3001\u8f6e\u5f0f\u7f16\u7801\u5668 exteroceptive \u76f8\u673a\u3001ToF\uff08\u6fc0\u5149\u3001GPS\uff09 \u6700\u597d\u7684\u72b6\u6001\u4f30\u8ba1\uff1a\u540c\u65f6\u6709\u6548\u878d\u5408\u5185\u611f\u53d7\u578b\u3001\u5916\u611f\u53d7\u578b\u4f20\u611f\u5668\u89c2\u6d4b\u503c \u72b6\u6001\u4f30\u8ba1\uff1a\u6839\u636e\u7cfb\u7edf\u5148\u9a8c\u6a21\u578b\u548c\u6d4b\u91cf\u5e8f\u5217\uff0c\u5bf9\u7cfb\u7edf\u5185\u5728\u72b6\u6001\u8fdb\u884c\u91cd\u6784\u3002","title":"1.2 \u4f20\u611f\u5668\u3001\u6d4b\u91cf\u548c\u95ee\u9898\u5b9a\u4e49"},{"location":"slam/state-estimation/#13","text":"\u72b6\u6001\u4f30\u8ba1\u673a\u7406 \u9012\u5f52\u3001\u6279\u65b9\u6cd5 \u8d1d\u53f6\u65af\u65b9\u6cd5\u3001\u6700\u5927\u540e\u9a8c\u4f30\u8ba1 \u8fde\u7eed\u65f6\u95f4\u72b6\u6001\u4f30\u8ba1\u3001\u9ad8\u65af\u8fc7\u7a0b\u56de\u5f52\u65b9\u6cd5 \u9c81\u68d2\u4f30\u8ba1\u548c\u504f\u5dee \u4e09\u7ef4\u7a7a\u95f4\u8fd0\u52a8\u673a\u7406 \u674e\u7fa4\u674e\u4ee3\u6570 \u5e94\u7528 \u7ed3\u5408\u524d\u4e24\u90e8\u5206","title":"1.3 \u672c\u4e66\u7ec4\u7ec7\u7ed3\u6784"},{"location":"slam/state-estimation/#14","text":"\u552f\u4e00\u540c\u65f6\u6d89\u53ca\u4ee5\u4e0b\u4e3b\u9898\u7684\u4e66\u7c4d \u4e09\u7ef4\u7a7a\u95f4 \u72b6\u6001\u4f30\u8ba1","title":"1.4 \u4e0e\u5176\u4ed6\u6559\u7a0b\u7684\u5173\u7cfb"},{"location":"slam/state-estimation/#chapter-2","text":"\u5f15\u5165\u8d1d\u53f6\u65af\u516c\u5f0f","title":"Chapter 2 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u3001\u9ad8\u65af\u6982\u7387\u5bc6\u5ea6\u51fd\u6570"},{"location":"slam/state-estimation/#21","text":"","title":"2.1 \u6982\u7387\u5bc6\u5ea6\u51fd\u6570"},{"location":"slam/state-estimation/#211","text":"\u5168\u6982\u7387\u516c\u7406 \u6982\u7387\u5bc6\u5ea6 \u6761\u4ef6\u6982\u7387 \u8054\u5408\u6982\u7387\u5bc6\u5ea6","title":"2.1.1 \u5b9a\u4e49"},{"location":"slam/state-estimation/#212","text":"p(x|y) = \\frac{p(y|x)p(x)}{p(y)} p(x|y) = \\frac{p(y|x)p(x)}{p(y)} p(x) p(x) \u5148\u9a8c p(x|y) p(x|y) \u540e\u9a8c \u5728\u72b6\u6001\u4f30\u8ba1\u4e2d\uff0c\u72b6\u6001\u7684\u5148\u9a8c p(x) p(x) \u548c\u4f20\u611f\u5668\u6a21\u578b p(y|x) p(y|x) \u63a8\u51fa\u72b6\u6001\u7684\u540e\u9a8c p(x|y) p(x|y) \u8fb9\u7f18\u5316\u8ba1\u7b97 p(y) p(y) \uff1a p(y)=\\int{p(y|x)p(x)\\mathrm{d}x} p(y)=\\int{p(y|x)p(x)\\mathrm{d}x} \u8d1d\u53f6\u65af\u63a8\u65ad\uff1a\u5229\u7528\u89c2\u6d4b\u6765\u4fee\u6b63\u4f30\u8ba1","title":"2.1.2 \u8d1d\u53f6\u65af\u516c\u5f0f\u53ca\u63a8\u65ad"},{"location":"slam/state-estimation/#213","text":"\u6982\u7387\u96f6\u9636\u77e9\uff1a\u5168\u4e8b\u4ef6\u6982\u7387 \u6982\u7387\u4e00\u9636\u77e9\uff1a\u671f\u671b \u6982\u7387\u4e8c\u9636\u77e9\uff1a\u534f\u65b9\u5dee\u77e9\u9635","title":"2.1.3 \u77e9"},{"location":"slam/state-estimation/#214","text":"\u6837\u672c\u4e3a\u968f\u673a\u53d8\u91cf\u7684\u4e00\u6b21\u5b9e\u73b0 \u901a\u8fc7\u6837\u672c\u4f30\u8ba1\u968f\u673a\u53d8\u91cf\u7684\u671f\u671b\u548c\u65b9\u5dee \u65b9\u5dee\u7684\u8d1d\u585e\u5c14\u4fee\u6b63","title":"2.1.4 \u6837\u672c\u5747\u503c\u548c\u6837\u672c\u65b9\u5dee"},{"location":"slam/state-estimation/#215","text":"\u7edf\u8ba1\u72ec\u7acb p(x, y) = p(x)p(y) p(x, y) = p(x)p(y) \u4e0d\u76f8\u5173 \\mathrm{E}[xy^{T}] = \\mathrm{E}[x]\\mathrm{E}[y] \\mathrm{E}[xy^{T}] = \\mathrm{E}[x]\\mathrm{E}[y]","title":"2.1.5 \u7edf\u8ba1\u72ec\u7acb\u6027\u4e0e\u4e0d\u76f8\u5173\u6027"},{"location":"slam/state-estimation/#216","text":"\u4e00\u4e2a\u968f\u673a\u53d8\u91cf\u7684\u4e24\u4e2a\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u5f52\u4e00\u5316 p(x) = \\eta p_{1}(x)p_{2}(x) p(x) = \\eta p_{1}(x)p_{2}(x)","title":"2.1.6 \u5f52\u4e00\u5316\u79ef"},{"location":"slam/state-estimation/#_2","text":"\u4e0d\u786e\u5b9a\u6027\u63cf\u8ff0","title":"\u9999\u519c\u4fe1\u606f\u548c\u4e92\u4fe1\u606f"},{"location":"slam/state-estimation/#_3","text":"\u514b\u7f57\u7f8e\u62c9\u4e0b\u754c\uff1a\u53c2\u6570\u4f30\u8ba1\u7684\u534f\u65b9\u5dee\u7684\u4e0b\u754c\u7531\u8d39\u6b47\u5c14\u4fe1\u606f\u77e9\u9635\u5b9a\u4e49","title":"\u514b\u7f57\u7f8e\u62c9\u4e0b\u754c\u548c\u8d39\u6b47\u5c14\u4fe1\u606f\u91cf"},{"location":"slam/state-estimation/#22","text":"","title":"2.2 \u9ad8\u65af\u6982\u7387\u5bc6\u5ea6\u51fd\u6570"},{"location":"slam/state-estimation/#221","text":"","title":"2.2.1 \u5b9a\u4e49"},{"location":"slam/state-estimation/#isserlis","text":"\u5b9a\u7406\u7528\u4e8e\u8ba1\u7b97\u9ad8\u9636\u77e9","title":"Isserlis \u5b9a\u7406"},{"location":"slam/state-estimation/#223","text":"\u8054\u5408\u6982\u7387\u5206\u5e03\uff0c\u5206\u89e3\u4e3a\u6761\u4ef6\u6982\u7387\u53ca\u8fb9\u7f18\u6982\u7387 \u5229\u7528\u8212\u5c14\u8865\u63a8\u6f14\u591a\u5143\u9ad8\u65af\u5206\u5e03\u7684\u5206\u89e3\u8fc7\u7a0b \u9ad8\u65af\u63a8\u65ad\uff1a\u5229\u7528\u89c2\u6d4b\u503c\uff0c\u4fee\u6b63\u5148\u9a8c\u6982\u7387\u5206\u5e03\u5747\u503c\u3001\u51cf\u5c0f\u534f\u65b9\u5dee","title":"2.2.3 \u8054\u5408\u9ad8\u65af\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\uff0c\u5206\u89e3\u4e0e\u63a8\u65ad"},{"location":"slam/state-estimation/#224","text":"\u9ad8\u65af\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u4e0b\uff0c\u7edf\u8ba1\u72ec\u7acb\u6027\u548c\u4e0d\u76f8\u5173\u6027\u7b49\u4ef7","title":"2.2.4 \u7edf\u8ba1\u72ec\u7acb\u6027\u3001\u4e0d\u76f8\u5173\u6027"},{"location":"slam/state-estimation/#225","text":"x \\in \\mathbb{R}^{N} \\sim \\mathcal{N}(\\mu_x, \\Sigma_{xx}) x \\in \\mathbb{R}^{N} \\sim \\mathcal{N}(\\mu_x, \\Sigma_{xx}) y= Gx y= Gx \uff0c G \\in \\mathbb{R}^{M \\times N} G \\in \\mathbb{R}^{M \\times N} y \\in \\mathbb{R}^{M} \\sim \\mathcal{N}(G\\mu_x, G\\Sigma_{xx}G^T) y \\in \\mathbb{R}^{M} \\sim \\mathcal{N}(G\\mu_x, G\\Sigma_{xx}G^T)","title":"2.2.5 \u9ad8\u65af\u5206\u5e03\u968f\u673a\u53d8\u91cf\u7684\u7ebf\u6027\u53d8\u6362"},{"location":"slam/state-estimation/#226","text":"K \u4e2a\u9ad8\u65af\u6982\u7387\u5bc6\u5ea6\u5206\u5e03\u7684\u79ef\u4ecd\u662f\u9ad8\u65af \u5bf9\u4e8e\u7ebf\u6027\u53d8\u6362\uff0c\u4ecd\u6709\u7c7b\u4f3c\u7ed3\u679c","title":"2.2.6 \u9ad8\u65af\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u7684\u5f52\u4e00\u5316\u79ef"},{"location":"slam/state-estimation/#227-smw","text":"\u53ef\u9006\u77e9\u9635\u7ecf\u8fc7\u4e0a\u4e09\u89d2\u3001\u4e0b\u4e09\u89d2\u5206\u89e3\uff0c\u6c42\u9006\uff0c\u7531\u4e00\u4e2a\u6052\u7b49\u5f0f\u5f15\u51fa\u7684\u56db\u4e2a\u4e0d\u540c\u7b49\u5f0f \u53c8\u79f0\u77e9\u9635\u6c42\u9006\u5f15\u7406","title":"2.2.7 SMW \u7b49\u5f0f"},{"location":"slam/state-estimation/#228","text":"p(y) = \\int_{-\\infty}^{\\infty} p(y|x) p(x) \\mathrm{d}x p(y) = \\int_{-\\infty}^{\\infty} p(y|x) p(x) \\mathrm{d}x \uff0c\u8d1d\u53f6\u65af\u63a8\u65ad\u5206\u6bcd\u5b58\u5728\u8fd9\u6837\u7684\u53d8\u6362 p(y|x) = \\mathcal{N}(g(x), R) p(y|x) = \\mathcal{N}(g(x), R) \uff0c\u8868\u793a\u975e\u7ebf\u6027\u53d8\u6362\u540e\uff0c\u4ecd\u53d7\u4e00\u4e2a\u96f6\u5747\u503c\u9ad8\u65af\u566a\u58f0\u5f71\u54cd\uff0c\u5e38\u89c1\u4e8e\u4f20\u611f\u5668\u4e2d p(x) = \\mathcal{N}(\\mu_x, \\Sigma_{xx}) p(x) = \\mathcal{N}(\\mu_x, \\Sigma_{xx}) \uff0c\u7406\u89e3\u4e3a\u72b6\u6001\u91cf\uff0c\u9ad8\u65af\u5206\u5e03 \u4e00\u822c\u60c5\u51b5\u4e0b\u7684\u7ebf\u6027\u5316\u5904\u7406 g(x) \\approx \\mu_y + G(x-\\mu_x) g(x) \\approx \\mu_y + G(x-\\mu_x) \u6cf0\u52d2\u516c\u5f0f G=\\frac{\\partial g(x)}{\\partial x} \\rvert_{x=\\mu_x} G=\\frac{\\partial g(x)}{\\partial x} \\rvert_{x=\\mu_x} \\mu_y=g(\\mu_x) \\mu_y=g(\\mu_x) - p(y)=\\rho \\exp{(-\\frac{1}{2}(y-\\mu_y)^T(R+G\\Sigma_{xx}G^T)^{-1}(y-\\mu_y))} p(y)=\\rho \\exp{(-\\frac{1}{2}(y-\\mu_y)^T(R+G\\Sigma_{xx}G^T)^{-1}(y-\\mu_y))} \uff0c\u4e3a\u79bb\u6563\u65f6\u95f4\u5361\u5c14\u66fc\u6ee4\u6ce2\u7684\u89c2\u6d4b\u90e8\u5206","title":"2.2.8 \u9ad8\u65af\u5206\u5e03\u968f\u673a\u53d8\u91cf\u7684\u975e\u7ebf\u6027\u53d8\u6362"},{"location":"slam/state-estimation/#229","text":"\u534f\u65b9\u5dee","title":"2.2.9 \u9ad8\u65af\u5206\u5e03\u7684\u9999\u519c\u4fe1\u606f"},{"location":"slam/state-estimation/#2210","text":"\u76f4\u63a5\u4ee3\u5165\u8ba1\u7b97","title":"2.2.10 \u8054\u5408\u9ad8\u65af\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u7684\u4e92\u4fe1\u606f"},{"location":"slam/state-estimation/#2211","text":"\\frac{1}{K} \\Sigma \\frac{1}{K} \\Sigma","title":"2.2.11 \u9ad8\u65af\u6982\u7387\u5bc6\u5ea6\u51fd\u6570\u7684\u514b\u62c9\u7f8e\u7f57\u4e0b\u754c"},{"location":"slam/state-estimation/#23","text":"\u65f6\u95f4 t \u4e0a\u7684\u8fde\u7eed\u72b6\u6001\u91cf GP \u7684\u5206\u5e03\u5c31\u662f\u5bf9\u4e8e\u65f6\u95f4\u57df\u4e0a\u6240\u6709\u968f\u673a\u53d8\u91cf\u7684\u8054\u5408\u5206\u5e03 GP \u4efb\u610f\u4e2a\u6837\u672c\u70b9\uff08\u5bf9\u5e94\u4e0d\u540c\u65f6\u523b\u7684\u968f\u673a\u53d8\u91cf\uff09\u8054\u5408\u9700\u8981\u670d\u4ece\u591a\u5143\u9ad8\u65af\u5206\u5e03 GP \u534f\u65b9\u5dee\u523b\u753b\u8f68\u8ff9\u7684\u5e73\u6ed1\u7a0b\u5ea6 GP \u534f\u65b9\u5dee\u53c8\u79f0 Kernels \u53ef\u4ee5\u53c2\u770b\u94fe\u63a5\u4e2d\u7684\u56fe\uff0c\u5bf9\u9ad8\u65af\u8fc7\u7a0b\u72b6\u6001\u6709\u521d\u6b65\u5370\u8c61 https://www.studyai.cn/modules/gaussian_process.html","title":"2.3 \u9ad8\u65af\u8fc7\u7a0b"},{"location":"slam/state-estimation/#chapter-3-linear-gaussianlg","text":"","title":"Chapter 3 \u72b6\u6001\u4f30\u8ba1\uff0cLinear Gaussian\uff08LG\uff09"},{"location":"slam/state-estimation/#31","text":"","title":"3.1 \u79bb\u6563\u65f6\u95f4\u7684\u6279\u4f30\u8ba1"},{"location":"slam/state-estimation/#311","text":"\u8fd0\u52a8\u65b9\u7a0b\uff1a x_k = A_{k-1}x_{k-1} + v_k + w_k x_k = A_{k-1}x_{k-1} + v_k + w_k \u89c2\u6d4b\u65b9\u7a0b\uff1a y_k = C_kx_k + n_k y_k = C_kx_k + n_k \u6700\u5927\u540e\u9a8c\u4f30\u8ba1\u3001\u8d1d\u53f6\u65af\u63a8\u65ad\uff0c\u4e24\u79cd\u65b9\u6cd5\u4f30\u8ba1\u7cfb\u7edf\u72b6\u6001 LG\u72b6\u6001\u4f30\u8ba1\u7684\u6839\u672c\u63a8\u5bfc\u6765\u6e90\u4e8e\u6b64 \u6279\u4f30\u8ba1\uff0c\u5229\u7528\u5168\u90e8\u89c2\u6d4b\u3001\u6570\u636e\u63a8\u65ad\u5f53\u524d\u65f6\u523b\u72b6\u6001\uff0c\u5229\u7528Cholesky\u5206\u89e3\u3001RTS\u5e73\u6ed1\u7b97\u6cd5 \u9012\u5f52\u4f30\u8ba1\uff0c\u5f53\u524d\u65f6\u523b\u72b6\u6001\u4ec5\u7531\u4e4b\u524d\u4fe1\u606f\u51b3\u5b9a\u3002 \u5173\u8054\uff1a \u5229\u7528\u8d1d\u53f6\u65af\u516c\u5f0f\u3001\u9a6c\u5c14\u53ef\u592b\u6027\u3001\u6761\u4ef6\u72ec\u7acb\uff0c \u5229\u7528\u6700\u5927\u540e\u9a8c\u4f30\u8ba1\uff0c\u6781\u503c\u70b9\uff0c \u5229\u7528\u8fd0\u52a8-\u89c2\u6d4b\u65b9\u7a0b\u7684\u7ebf\u6027\u9ad8\u65af\u5206\u5e03\uff0c \u8fde\u7acb\u6c42\u89e3\u51fa\u7cfb\u7edf\u72b6\u6001 \u5229\u7528Cholesky\u5206\u89e3\uff0c\u8fdb\u884c\u6279\u4f30\u8ba1\uff0c\u6279\u4f30\u8ba1\u5229\u7528\u6240\u6709\u65f6\u523b\u4fe1\u606f\u6765\u9884\u6d4b\u72b6\u6001 \u901a\u8fc7\u8fb9\u7f18\u5316\uff0c\u5f97\u5230\u5173\u4e8e\u67d0\u65f6\u523b\u7684\u4f30\u8ba1\uff0c\u4f30\u8ba1\u53c8\u5206\u4e3a\u5229\u7528k\u4e4b\u524d\u4fe1\u606f\u4ee5\u53cak\u672a\u6765\u4fe1\u606f \u4ec5\u5229\u7528k\u4e4b\u524d\u4fe1\u606f\u8fdb\u884c\u4f30\u8ba1\uff0c\u5f97\u5230\u524d\u5411\u4f30\u8ba1\uff0c\u79f0\u4e3a\u6ee4\u6ce2\uff0cFilter \u8fdb\u4e00\u6b65\uff0ck\u53ef\u4ee5\u5229\u7528k-1\u4fe1\u606f\u5f97\u5230\u7ed3\u679c\uff0c\u5f97\u5230\u5361\u5c14\u66fc\u6ee4\u6ce2\u5f62\u5f0f \uff08MAP\u3001\u8d1d\u53f6\u65af\u4e24\u79cd\u63a8\u5bfc\uff09","title":"3.1.1 \u95ee\u9898\u5b9a\u4e49"},{"location":"slam/state-estimation/#chapter-4-non-linear-non-gaussian","text":"4.22\u63a8\u5bfc\u81f3\u5173\u91cd\u8981\u3002 \u5728\u8d1d\u53f6\u65af\u6846\u67b6\u4e0b\uff0c\u53d1\u5c55\u51fa\u9ad8\u65af\u6ee4\u6ce2 \u7c92\u5b50\u6ee4\u6ce2 \u5229\u7528\u5728k\u5904\u7ebf\u6027\u5316\uff0c \u63a8\u5bfc\u51fa\u6269\u5c55\u5361\u5c14\u66fc\u6ee4\u6ce2 SLAM\u7cfb\u7edf\u7684\u6ee4\u6ce2\u548c\u4f18\u5316\u65b9\u6cd5\u7b14\u8bb0 - \u738b\u7433\u7684\u535a\u6587","title":"Chapter 4 \u72b6\u6001\u4f30\u8ba1\uff0cNon Linear Non Gaussian"},{"location":"sr/","text":"\u76ee\u5f55 \u89c6\u9891\u8d85\u5206\u8fa8\u7387\u6280\u672f Real-Time Video Super-Resolution with Spatio-Temporal Networks and Motion Compensation \u4f7f\u7528 spatial transformer network FRVSR \u5229\u7528 recurrent \u53c2\u8003 https://arxiv.org/pdf/1902.06068.pdf","title":"\u76ee\u5f55"},{"location":"sr/#_1","text":"","title":"\u76ee\u5f55"},{"location":"sr/#_2","text":"Real-Time Video Super-Resolution with Spatio-Temporal Networks and Motion Compensation \u4f7f\u7528 spatial transformer network FRVSR \u5229\u7528 recurrent","title":"\u89c6\u9891\u8d85\u5206\u8fa8\u7387\u6280\u672f"},{"location":"sr/#_3","text":"https://arxiv.org/pdf/1902.06068.pdf","title":"\u53c2\u8003"},{"location":"tensorrt/","text":"TensorRT \u5b89\u88c5\u8bf4\u660e Ubuntu \u4f7f\u7528 Nvidia Docker\u3002\u4ec5\u9700\u8981\u5728\u4e3b\u673a\u4e0a\u5b89\u88c5\u82f1\u4f1f\u8fbe\u9a71\u52a8\u3001Nvidia Docker\uff0c\u5e76\u4ece\u4e91\u7aef\u62c9\u53d6\u955c\u50cf\u5373\u53ef Windows Prerequisite CUDA Toolkit (CUDA versions 9.0, 10.0, and 10.1 are supported) cuDNN (cuDNN version 7.5.0 is supported) TRT \u76f8\u5173\u8d44\u6599 NVIDIA TensorRT | NVIDIA Developer TensorRT Developer Guide :: Deep Learning SDK Documentation","title":"TensorRT \u5b89\u88c5\u8bf4\u660e"},{"location":"tensorrt/#tensorrt","text":"","title":"TensorRT \u5b89\u88c5\u8bf4\u660e"},{"location":"tensorrt/#ubuntu","text":"\u4f7f\u7528 Nvidia Docker\u3002\u4ec5\u9700\u8981\u5728\u4e3b\u673a\u4e0a\u5b89\u88c5\u82f1\u4f1f\u8fbe\u9a71\u52a8\u3001Nvidia Docker\uff0c\u5e76\u4ece\u4e91\u7aef\u62c9\u53d6\u955c\u50cf\u5373\u53ef","title":"Ubuntu"},{"location":"tensorrt/#windows","text":"","title":"Windows"},{"location":"tensorrt/#prerequisite","text":"CUDA Toolkit (CUDA versions 9.0, 10.0, and 10.1 are supported) cuDNN (cuDNN version 7.5.0 is supported)","title":"Prerequisite"},{"location":"tensorrt/#trt","text":"NVIDIA TensorRT | NVIDIA Developer TensorRT Developer Guide :: Deep Learning SDK Documentation","title":"TRT \u76f8\u5173\u8d44\u6599"},{"location":"tensorrt/project-workflow/","text":"\u9879\u76ee\u4ee3\u7801\u6d41\u7a0b \u547d\u4ee4\u884c\u53c2\u6570\u6307\u660e\u56fe\u7247\u8def\u5f84 create engine do inference\uff1a\u8bfb\u53d6\u56fe\u7247\uff0c\u8f7d\u5165\u663e\u5b58\uff0c\u6267\u884c\uff0c\u663e\u793a\u8f93\u51fa \u6d41\u7a0b \u53c2\u8003 sampleMNIST fileData \u4ece PGM \u8bfb\u53d6\u51fa\u7684\u6570\u636e\u4fdd\u5b58\u5728\u5176\u4e2d buffers.getHostBuffer \u83b7\u53d6 host buffer\uff0c\u5c06 fileData \u590d\u5236\u5230 hostbuffer \u65e0\u6cd5\u83b7\u53d6 hostbuffer\uff0c\u7531\u4e8eonnx\u6a21\u578b\u65e0\u6cd5\u89e3\u6790tensorname engine->getNbBindings \u83b7\u53d6\u7ed1\u5b9a\u70b9\u6570\u76ee \u5047\u8bbe binding 0 \u4e3a input\uff0c1 \u4e3a output \u5c06\u6587\u4ef6\u8bfb\u5165 0\uff0c \u62f7\u8d1d\u5230 device input device output \u8bfb\u56de\uff0c\u5199\u5165\u6587\u4ef6 \u5199\u5165/\u8bfb\u56de\u90fd\u6210\u529f\uff0cinference \u540e\u5931\u8d25 \u6570\u636e\u683c\u5f0f A.2. Data Format Descriptions \u53c2\u8003 sampleFasterRCNN float * data = new float [ N * INPUT_C * INPUT_H * INPUT_W ]; // Pixel mean used by the Faster R-CNN's author float pixelMean [ 3 ]{ 102.9801f , 115.9465f , 122.7717f }; // Also in BGR order for ( int i = 0 , volImg = INPUT_C * INPUT_H * INPUT_W ; i < N ; ++ i ) { for ( int c = 0 ; c < INPUT_C ; ++ c ) { // The color image to input should be in BGR order for ( unsigned j = 0 , volChl = INPUT_H * INPUT_W ; j < volChl ; ++ j ) data [ i * volImg + c * volChl + j ] = float ( ppms [ i ]. buffer [ j * INPUT_C + 2 - c ]) - pixelMean [ c ]; } }","title":"\u9879\u76ee\u4ee3\u7801\u6d41\u7a0b"},{"location":"tensorrt/project-workflow/#_1","text":"\u547d\u4ee4\u884c\u53c2\u6570\u6307\u660e\u56fe\u7247\u8def\u5f84 create engine do inference\uff1a\u8bfb\u53d6\u56fe\u7247\uff0c\u8f7d\u5165\u663e\u5b58\uff0c\u6267\u884c\uff0c\u663e\u793a\u8f93\u51fa","title":"\u9879\u76ee\u4ee3\u7801\u6d41\u7a0b"},{"location":"tensorrt/project-workflow/#_2","text":"","title":"\u6d41\u7a0b"},{"location":"tensorrt/project-workflow/#samplemnist","text":"fileData \u4ece PGM \u8bfb\u53d6\u51fa\u7684\u6570\u636e\u4fdd\u5b58\u5728\u5176\u4e2d buffers.getHostBuffer \u83b7\u53d6 host buffer\uff0c\u5c06 fileData \u590d\u5236\u5230 hostbuffer \u65e0\u6cd5\u83b7\u53d6 hostbuffer\uff0c\u7531\u4e8eonnx\u6a21\u578b\u65e0\u6cd5\u89e3\u6790tensorname engine->getNbBindings \u83b7\u53d6\u7ed1\u5b9a\u70b9\u6570\u76ee \u5047\u8bbe binding 0 \u4e3a input\uff0c1 \u4e3a output \u5c06\u6587\u4ef6\u8bfb\u5165 0\uff0c \u62f7\u8d1d\u5230 device input device output \u8bfb\u56de\uff0c\u5199\u5165\u6587\u4ef6 \u5199\u5165/\u8bfb\u56de\u90fd\u6210\u529f\uff0cinference \u540e\u5931\u8d25","title":"\u53c2\u8003 sampleMNIST"},{"location":"tensorrt/project-workflow/#_3","text":"A.2. Data Format Descriptions","title":"\u6570\u636e\u683c\u5f0f"},{"location":"tensorrt/project-workflow/#samplefasterrcnn","text":"float * data = new float [ N * INPUT_C * INPUT_H * INPUT_W ]; // Pixel mean used by the Faster R-CNN's author float pixelMean [ 3 ]{ 102.9801f , 115.9465f , 122.7717f }; // Also in BGR order for ( int i = 0 , volImg = INPUT_C * INPUT_H * INPUT_W ; i < N ; ++ i ) { for ( int c = 0 ; c < INPUT_C ; ++ c ) { // The color image to input should be in BGR order for ( unsigned j = 0 , volChl = INPUT_H * INPUT_W ; j < volChl ; ++ j ) data [ i * volImg + c * volChl + j ] = float ( ppms [ i ]. buffer [ j * INPUT_C + 2 - c ]) - pixelMean [ c ]; } }","title":"\u53c2\u8003 sampleFasterRCNN"},{"location":"tensorrt/project/","text":"\u6d4b\u8bd5 $ bin \\t rtexec.exe --deploy = data \\m nist \\m nist.prototxt --model = data \\m nist \\m nist.caffemodel --output = prob \u6d4b\u8bd5\u73af\u5883 \u786c\u4ef6 GeForce RTX 2080 i3-4160 CPU @ 3.60Hz 7.94 GB RAM \u8f6f\u4ef6 \u663e\u5361\u9a71\u52a8 430.39 Windows 10 version 1903 Cuda 10.0 cuDnn 7.5.0 TensorRT 5.1 \u5bf9\u6bd4\u7ed3\u679c \u6a21\u578b input batch fp32 fp16 int8 ResNet50 224x224 41 37ms 10ms 5.7ms cnn-10 1080x1920 1 43ms 24ms 8.7ms rcnn-10 1080x1920 1 44ms 25ms 8.9ms TensorRT \u8fd0\u884c\u7ed3\u679c\u622a\u56fe \u8d70\u6837\u8f93\u5165 \u6df1\u5ea6\u5b66\u4e60\u53cd\u8d70\u6837\u8f93\u51fa\u7ed3\u679c 64x SSAA \u7ed3\u679c\u7ec6\u8282 ResNet50 224x224x3 \u53d61000\u6b21\u63a8\u65ad\u5e73\u5747\u65f6\u95f4\uff0cbatch \u5927\u5c0f\u9009\u4e3a41\uff08224x224x41->1080p\uff09 fp32 ~37ms fp16 ~10ms int8 ~5.7ms &&&& RUNNING TensorRT.trtexec # bin\\trtexec.exe --deploy=data\\resnet50\\ResNet50_N2.prototxt --model=data\\resnet50\\ResNet50_fp32.caffemodel --output=prob --batch=41 --avgRuns=1000 [I] deploy: data\\resnet50\\ResNet50_N2.prototxt [I] model: data\\resnet50\\ResNet50_fp32.caffemodel [I] output: prob [I] batch: 41 [I] avgRuns: 1000 [I] Input \"data\": 3x224x224 [I] Output \"prob\": 1000x1x1 [I] Average over 1000 runs is 36.5989 ms (host walltime is 37.056 ms, 99% percentile time is 40.3437). [I] Average over 1000 runs is 36.8025 ms (host walltime is 37.323 ms, 99% percentile time is 40.1227). [I] Average over 1000 runs is 37.0368 ms (host walltime is 37.5535 ms, 99% percentile time is 40.8833). [I] Average over 1000 runs is 36.9303 ms (host walltime is 37.4497 ms, 99% percentile time is 40.2044). [I] Average over 1000 runs is 37.3102 ms (host walltime is 37.8786 ms, 99% percentile time is 41.175). [I] Average over 1000 runs is 37.4353 ms (host walltime is 37.8854 ms, 99% percentile time is 41.0356). [I] Average over 1000 runs is 37.217 ms (host walltime is 37.7247 ms, 99% percentile time is 38.4388). [I] Average over 1000 runs is 37.6249 ms (host walltime is 38.1419 ms, 99% percentile time is 41.4488). [I] Average over 1000 runs is 37.7456 ms (host walltime is 38.2448 ms, 99% percentile time is 41.5314). [I] Average over 1000 runs is 37.6224 ms (host walltime is 38.1146 ms, 99% percentile time is 41.2564). &&&& PASSED TensorRT.trtexec # bin\\trtexec.exe --deploy=data\\resnet50\\ResNet50_N2.prototxt --model=data\\resnet50\\ResNet50_fp32.caffemodel --output=prob --batch=41 --avgRuns=1000 &&&& RUNNING TensorRT.trtexec # bin\\trtexec.exe --deploy=data\\resnet50\\ResNet50_N2.prototxt --model=data\\resnet50\\ResNet50_fp32.caffemodel --output=prob --batch=41 --fp16 --avgRuns=1000 [I] deploy: data\\resnet50\\ResNet50_N2.prototxt [I] model: data\\resnet50\\ResNet50_fp32.caffemodel [I] output: prob [I] batch: 41 [I] fp16 [I] avgRuns: 1000 [I] Input \"data\": 3x224x224 [I] Output \"prob\": 1000x1x1 [I] Average over 1000 runs is 9.78154 ms (host walltime is 10.1434 ms, 99% percentile time is 10.9564). [I] Average over 1000 runs is 9.80061 ms (host walltime is 10.1679 ms, 99% percentile time is 10.8871). [I] Average over 1000 runs is 9.85407 ms (host walltime is 10.1652 ms, 99% percentile time is 11.1824). [I] Average over 1000 runs is 9.7751 ms (host walltime is 10.1061 ms, 99% percentile time is 10.3968). [I] Average over 1000 runs is 9.79208 ms (host walltime is 10.1128 ms, 99% percentile time is 10.3916). [I] Average over 1000 runs is 9.97582 ms (host walltime is 10.2224 ms, 99% percentile time is 11.2078). [I] Average over 1000 runs is 10.149 ms (host walltime is 10.419 ms, 99% percentile time is 11.2807). [I] Average over 1000 runs is 10.1625 ms (host walltime is 10.4829 ms, 99% percentile time is 11.2303). [I] Average over 1000 runs is 10.1419 ms (host walltime is 10.4095 ms, 99% percentile time is 11.2451). [I] Average over 1000 runs is 9.81545 ms (host walltime is 10.0941 ms, 99% percentile time is 10.4676). &&&& PASSED TensorRT.trtexec # bin\\trtexec.exe --deploy=data\\resnet50\\ResNet50_N2.prototxt --model=data\\resnet50\\ResNet50_fp32.caffemodel --output=prob --batch=41 --fp16 --avgRuns=1000 &&&& RUNNING TensorRT.trtexec # bin\\trtexec.exe --deploy=data\\resnet50\\ResNet50_N2.prototxt --model=data\\resnet50\\ResNet50_fp32.caffemodel --output=prob --batch=41 --int8 --avgRuns=1000 [I] deploy: data\\resnet50\\ResNet50_N2.prototxt [I] model: data\\resnet50\\ResNet50_fp32.caffemodel [I] output: prob [I] batch: 41 [I] int8 [I] avgRuns: 1000 [I] Input \"data\": 3x224x224 [I] Output \"prob\": 1000x1x1 [I] Average over 1000 runs is 5.74966 ms (host walltime is 6.04008 ms, 99% percentile time is 6.38528). [I] Average over 1000 runs is 5.71288 ms (host walltime is 5.9746 ms, 99% percentile time is 6.29187). [I] Average over 1000 runs is 5.78671 ms (host walltime is 6.10283 ms, 99% percentile time is 6.49056). [I] Average over 1000 runs is 5.74245 ms (host walltime is 6.01866 ms, 99% percentile time is 6.32483). [I] Average over 1000 runs is 5.7246 ms (host walltime is 5.96897 ms, 99% percentile time is 6.26262). [I] Average over 1000 runs is 5.71427 ms (host walltime is 5.94986 ms, 99% percentile time is 6.2911). [I] Average over 1000 runs is 5.76482 ms (host walltime is 6.01559 ms, 99% percentile time is 6.91024). [I] Average over 1000 runs is 5.79972 ms (host walltime is 6.10345 ms, 99% percentile time is 6.41738). [I] Average over 1000 runs is 5.80141 ms (host walltime is 6.10004 ms, 99% percentile time is 6.45424). [I] Average over 1000 runs is 5.75387 ms (host walltime is 6.00265 ms, 99% percentile time is 6.24486). &&&& PASSED TensorRT.trtexec # bin\\trtexec.exe --deploy=data\\resnet50\\ResNet50_N2.prototxt --model=data\\resnet50\\ResNet50_fp32.caffemodel --output=prob --batch=41 --int8 --avgRuns=1000 \u9879\u76ee\u6a21\u578b cnn-10 256x256x31 Project/pytorch-mono/model/model_256_256.onnx \u53d61000\u6b21\u63a8\u65ad\u5e73\u5747\u65f6\u95f4\uff0cbatch \u5927\u5c0f\u9009\u4e3a31\uff08256x256x31->1080p\uff09 fp32 ~41ms fp16 ~ &&&& RUNNING TensorRT.trtexec # bin\\trtexec.exe --onnx=data\\project\\model_256_256.onnx --batch=31 --avgRuns=1000 [I] onnx: data\\project\\model_256_256.onnx [I] batch: 31 [I] avgRuns: 1000 ---------------------------------------------------------------- Input filename: data\\project\\model_256_256.onnx ONNX IR version: 0.0.3 Opset version: 9 Producer name: pytorch Producer version: 0.4 Domain: Model version: 0 Doc string: ---------------------------------------------------------------- [I] Average over 1000 runs is 41.0329 ms (host walltime is 41.5606 ms, 99% percentile time is 45.5106). [I] Average over 1000 runs is 41.384 ms (host walltime is 41.9805 ms, 99% percentile time is 44.7077). [I] Average over 1000 runs is 41.7235 ms (host walltime is 42.2927 ms, 99% percentile time is 44.0291). [I] Average over 1000 runs is 42.318 ms (host walltime is 42.8769 ms, 99% percentile time is 46.7965). [I] Average over 1000 runs is 42.7134 ms (host walltime is 43.2284 ms, 99% percentile time is 47.8287). [I] Average over 1000 runs is 42.7245 ms (host walltime is 43.2779 ms, 99% percentile time is 47.6328). [I] Average over 1000 runs is 42.8418 ms (host walltime is 43.4213 ms, 99% percentile time is 47.8085). [I] Average over 1000 runs is 42.9501 ms (host walltime is 43.5097 ms, 99% percentile time is 46.7021). [I] Average over 1000 runs is 43.1244 ms (host walltime is 43.7388 ms, 99% percentile time is 46.721). [I] Average over 1000 runs is 43.3234 ms (host walltime is 43.8563 ms, 99% percentile time is 47.3295). &&&& PASSED TensorRT.trtexec # bin\\trtexec.exe --onnx=data\\project\\model_256_256.onnx --batch=31 --avgRuns=1000 &&&& RUNNING TensorRT.trtexec # bin\\trtexec.exe --onnx=data\\project\\model_256_256.onnx --batch=31 --avgRuns=1000 --fp16 [I] onnx: data\\project\\model_256_256.onnx [I] batch: 31 [I] avgRuns: 1000 [I] fp16 ---------------------------------------------------------------- Input filename: data\\project\\model_256_256.onnx ONNX IR version: 0.0.3 Opset version: 9 Producer name: pytorch Producer version: 0.4 Domain: Model version: 0 Doc string: ---------------------------------------------------------------- [I] Average over 1000 runs is 24.7055 ms (host walltime is 25.1759 ms, 99% percentile time is 27.4459). [I] Average over 1000 runs is 24.5021 ms (host walltime is 25.0236 ms, 99% percentile time is 27.277). [I] Average over 1000 runs is 24.6615 ms (host walltime is 25.1073 ms, 99% percentile time is 27.5085). [I] Average over 1000 runs is 24.8448 ms (host walltime is 25.3175 ms, 99% percentile time is 27.521). [I] Average over 1000 runs is 24.7442 ms (host walltime is 25.2699 ms, 99% percentile time is 27.5941). [I] Average over 1000 runs is 24.7661 ms (host walltime is 25.3317 ms, 99% percentile time is 27.9524). [I] Average over 1000 runs is 24.5799 ms (host walltime is 25.0773 ms, 99% percentile time is 28.3853). [I] Average over 1000 runs is 24.339 ms (host walltime is 24.8702 ms, 99% percentile time is 25.3111). [I] Average over 1000 runs is 24.6018 ms (host walltime is 25.1085 ms, 99% percentile time is 27.2757). [I] Average over 1000 runs is 24.373 ms (host walltime is 24.8947 ms, 99% percentile time is 26.6195). &&&& PASSED TensorRT.trtexec # bin\\trtexec.exe --onnx=data\\project\\model_256_256.onnx --batch=31 --avgRuns=1000 --fp16 &&&& RUNNING TensorRT.trtexec # bin\\trtexec.exe --onnx=data\\project\\model_256_256.onnx --batch=31 --avgRuns=1000 --int8 [I] onnx: data\\project\\model_256_256.onnx [I] batch: 31 [I] avgRuns: 1000 [I] int8 ---------------------------------------------------------------- Input filename: data\\project\\model_256_256.onnx ONNX IR version: 0.0.3 Opset version: 9 Producer name: pytorch Producer version: 0.4 Domain: Model version: 0 Doc string: ---------------------------------------------------------------- [I] Average over 1000 runs is 8.73495 ms (host walltime is 9.20868 ms, 99% percentile time is 10.3488). [I] Average over 1000 runs is 8.64708 ms (host walltime is 9.09442 ms, 99% percentile time is 10.1545). [I] Average over 1000 runs is 8.61756 ms (host walltime is 9.1009 ms, 99% percentile time is 9.4536). [I] Average over 1000 runs is 8.65811 ms (host walltime is 9.18585 ms, 99% percentile time is 9.25504). [I] Average over 1000 runs is 8.6794 ms (host walltime is 9.17846 ms, 99% percentile time is 9.27763). [I] Average over 1000 runs is 8.70592 ms (host walltime is 9.21263 ms, 99% percentile time is 9.44774). [I] Average over 1000 runs is 8.73309 ms (host walltime is 9.21576 ms, 99% percentile time is 10.0148). [I] Average over 1000 runs is 8.84639 ms (host walltime is 9.22179 ms, 99% percentile time is 10.2569). [I] Average over 1000 runs is 8.81949 ms (host walltime is 9.20646 ms, 99% percentile time is 10.2398). [I] Average over 1000 runs is 8.67455 ms (host walltime is 9.11521 ms, 99% percentile time is 9.55434). &&&& PASSED TensorRT.trtexec # bin\\trtexec.exe --onnx=data\\project\\model_256_256.onnx --batch=31 --avgRuns=1000 --int8 cnn-10 1080x1920x1 Project/pytorch-mono/model/model_256_256.onnx &&&& RUNNING TensorRT.trtexec # bin\\trtexec.exe --onnx=data\\project\\model_1080_1920.onnx --avgRuns=1000 [I] onnx: data\\project\\model_1080_1920.onnx [I] avgRuns: 1000 ---------------------------------------------------------------- Input filename: data\\project\\model_1080_1920.onnx ONNX IR version: 0.0.3 Opset version: 9 Producer name: pytorch Producer version: 0.4 Domain: Model version: 0 Doc string: ---------------------------------------------------------------- [I] Average over 1000 runs is 42.5376 ms (host walltime is 43.1446 ms, 99% percentile time is 46.0185). [I] Average over 1000 runs is 43.0747 ms (host walltime is 43.689 ms, 99% percentile time is 46.514). [I] Average over 1000 runs is 43.358 ms (host walltime is 44.1039 ms, 99% percentile time is 46.8438). [I] Average over 1000 runs is 43.4793 ms (host walltime is 44.1057 ms, 99% percentile time is 46.8652). [I] Average over 1000 runs is 43.5992 ms (host walltime is 44.2232 ms, 99% percentile time is 46.9056). [I] Average over 1000 runs is 43.5605 ms (host walltime is 44.0431 ms, 99% percentile time is 46.944). [I] Average over 1000 runs is 43.7356 ms (host walltime is 44.245 ms, 99% percentile time is 47.3206). [I] Average over 1000 runs is 43.8808 ms (host walltime is 44.4116 ms, 99% percentile time is 47.3298). [I] Average over 1000 runs is 43.9177 ms (host walltime is 44.4749 ms, 99% percentile time is 47.3356). [I] Average over 1000 runs is 43.9216 ms (host walltime is 44.4726 ms, 99% percentile time is 47.4481). &&&& PASSED TensorRT.trtexec # bin\\trtexec.exe --onnx=data\\project\\model_1080_1920.onnx --avgRuns=1000 &&&& RUNNING TensorRT.trtexec # bin\\trtexec.exe --onnx=data\\project\\model_1080_1920.onnx --avgRuns=1000 --fp16 [I] onnx: data\\project\\model_1080_1920.onnx [I] avgRuns: 1000 [I] fp16 ---------------------------------------------------------------- Input filename: data\\project\\model_1080_1920.onnx ONNX IR version: 0.0.3 Opset version: 9 Producer name: pytorch Producer version: 0.4 Domain: Model version: 0 Doc string: ---------------------------------------------------------------- [I] Average over 1000 runs is 23.8831 ms (host walltime is 24.1203 ms, 99% percentile time is 24.3608). [I] Average over 1000 runs is 24.4111 ms (host walltime is 24.6861 ms, 99% percentile time is 27.3841). [I] Average over 1000 runs is 24.2999 ms (host walltime is 24.5427 ms, 99% percentile time is 26.731). [I] Average over 1000 runs is 24.4412 ms (host walltime is 24.7081 ms, 99% percentile time is 27.0674). [I] Average over 1000 runs is 24.4237 ms (host walltime is 24.6792 ms, 99% percentile time is 26.8421). [I] Average over 1000 runs is 24.8017 ms (host walltime is 25.0704 ms, 99% percentile time is 27.8242). [I] Average over 1000 runs is 24.5303 ms (host walltime is 24.7996 ms, 99% percentile time is 26.7191). [I] Average over 1000 runs is 25.0661 ms (host walltime is 25.3921 ms, 99% percentile time is 27.5972). [I] Average over 1000 runs is 24.9305 ms (host walltime is 25.1841 ms, 99% percentile time is 27.854). [I] Average over 1000 runs is 24.7011 ms (host walltime is 24.9569 ms, 99% percentile time is 27.7975). &&&& PASSED TensorRT.trtexec # bin\\trtexec.exe --onnx=data\\project\\model_1080_1920.onnx --avgRuns=1000 --fp16 &&&& RUNNING TensorRT.trtexec # bin\\trtexec.exe --onnx=data\\project\\model_1080_1920.onnx --avgRuns=1000 --int8 [I] onnx: data\\project\\model_1080_1920.onnx [I] avgRuns: 1000 [I] int8 ---------------------------------------------------------------- Input filename: data\\project\\model_1080_1920.onnx ONNX IR version: 0.0.3 Opset version: 9 Producer name: pytorch Producer version: 0.4 Domain: Model version: 0 Doc string: ---------------------------------------------------------------- [I] Average over 1000 runs is 8.66529 ms (host walltime is 9.21411 ms, 99% percentile time is 9.0624). [I] Average over 1000 runs is 8.73242 ms (host walltime is 9.309 ms, 99% percentile time is 9.12998). [I] Average over 1000 runs is 8.74873 ms (host walltime is 9.35212 ms, 99% percentile time is 9.2423). [I] Average over 1000 runs is 8.73695 ms (host walltime is 9.25817 ms, 99% percentile time is 9.19722). [I] Average over 1000 runs is 8.74951 ms (host walltime is 9.2688 ms, 99% percentile time is 9.21798). [I] Average over 1000 runs is 8.71137 ms (host walltime is 9.13181 ms, 99% percentile time is 9.40294). [I] Average over 1000 runs is 8.77244 ms (host walltime is 9.22304 ms, 99% percentile time is 10.645). [I] Average over 1000 runs is 8.75664 ms (host walltime is 9.22046 ms, 99% percentile time is 9.9672). [I] Average over 1000 runs is 8.84094 ms (host walltime is 9.32806 ms, 99% percentile time is 10.4063). [I] Average over 1000 runs is 8.95917 ms (host walltime is 9.36222 ms, 99% percentile time is 10.5293). &&&& PASSED TensorRT.trtexec # bin\\trtexec.exe --onnx=data\\project\\model_1080_1920.onnx --avgRuns=1000 --int8 rcnn-10 &&&& RUNNING TensorRT.trtexec # bin\\trtexec.exe --onnx=data\\project\\rcnn_1080_1920.onnx --avgRuns=1000 --fp16 [I] onnx: data\\project\\rcnn_1080_1920.onnx [I] avgRuns: 1000 [I] fp16 ---------------------------------------------------------------- Input filename: data\\project\\rcnn_1080_1920.onnx ONNX IR version: 0.0.3 Opset version: 9 Producer name: pytorch Producer version: 0.4 Domain: Model version: 0 Doc string: ---------------------------------------------------------------- [I] Average over 1000 runs is 24.7947 ms (host walltime is 25.4378 ms, 99% percentile time is 27.7331). [I] Average over 1000 runs is 24.7445 ms (host walltime is 25.388 ms, 99% percentile time is 26.7407). [I] Average over 1000 runs is 25.1315 ms (host walltime is 25.7714 ms, 99% percentile time is 28.4338). [I] Average over 1000 runs is 24.9105 ms (host walltime is 25.5266 ms, 99% percentile time is 27.814). [I] Average over 1000 runs is 24.8836 ms (host walltime is 25.5464 ms, 99% percentile time is 27.5691). [I] Average over 1000 runs is 25.1164 ms (host walltime is 25.7185 ms, 99% percentile time is 27.9678). [I] Average over 1000 runs is 25.2527 ms (host walltime is 25.9155 ms, 99% percentile time is 28.072). [I] Average over 1000 runs is 25.2182 ms (host walltime is 25.84 ms, 99% percentile time is 28.8976). [I] Average over 1000 runs is 25.1389 ms (host walltime is 25.6296 ms, 99% percentile time is 27.8299). [I] Average over 1000 runs is 24.8778 ms (host walltime is 25.3639 ms, 99% percentile time is 26.6261). &&&& PASSED TensorRT.trtexec # bin\\trtexec.exe --onnx=data\\project\\rcnn_1080_1920.onnx --avgRuns=1000 --fp16 &&&& RUNNING TensorRT.trtexec # bin\\trtexec.exe --onnx=data\\project\\rcnn_1080_1920.onnx --avgRuns=1000 --int8 [I] onnx: data\\project\\rcnn_1080_1920.onnx [I] avgRuns: 1000 [I] int8 ---------------------------------------------------------------- Input filename: data\\project\\rcnn_1080_1920.onnx ONNX IR version: 0.0.3 Opset version: 9 Producer name: pytorch Producer version: 0.4 Domain: Model version: 0 Doc string: ---------------------------------------------------------------- [I] Average over 1000 runs is 8.74936 ms (host walltime is 8.99387 ms, 99% percentile time is 9.86048). [I] Average over 1000 runs is 8.84878 ms (host walltime is 9.1176 ms, 99% percentile time is 10.4693). [I] Average over 1000 runs is 8.97294 ms (host walltime is 9.42228 ms, 99% percentile time is 10.1783). [I] Average over 1000 runs is 9.02047 ms (host walltime is 9.62085 ms, 99% percentile time is 9.66451). [I] Average over 1000 runs is 9.04405 ms (host walltime is 9.64213 ms, 99% percentile time is 9.72186). [I] Average over 1000 runs is 9.08964 ms (host walltime is 9.65024 ms, 99% percentile time is 9.99885). [I] Average over 1000 runs is 8.94115 ms (host walltime is 9.25126 ms, 99% percentile time is 9.94397). [I] Average over 1000 runs is 9.0138 ms (host walltime is 9.43296 ms, 99% percentile time is 9.77478). [I] Average over 1000 runs is 9.08845 ms (host walltime is 9.70892 ms, 99% percentile time is 9.81402). [I] Average over 1000 runs is 9.10858 ms (host walltime is 9.70716 ms, 99% percentile time is 9.93792). &&&& PASSED TensorRT.trtexec # bin\\trtexec.exe --onnx=data\\project\\rcnn_1080_1920.onnx --avgRuns=1000 --int8 &&&& RUNNING TensorRT.trtexec # bin\\trtexec.exe --onnx=data\\project\\rcnn_1080_1920.onnx --avgRuns=1000 [I] onnx: data\\project\\rcnn_1080_1920.onnx [I] avgRuns: 1000 ---------------------------------------------------------------- Input filename: data\\project\\rcnn_1080_1920.onnx ONNX IR version: 0.0.3 Opset version: 9 Producer name: pytorch Producer version: 0.4 Domain: Model version: 0 Doc string: ---------------------------------------------------------------- [I] Average over 1000 runs is 43.781 ms (host walltime is 44.2806 ms, 99% percentile time is 47.6637). [I] Average over 1000 runs is 44.2414 ms (host walltime is 44.756 ms, 99% percentile time is 49.923). [I] Average over 1000 runs is 44.6497 ms (host walltime is 45.1768 ms, 99% percentile time is 51.5759). [I] Average over 1000 runs is 44.3383 ms (host walltime is 44.8596 ms, 99% percentile time is 49.2312). [I] Average over 1000 runs is 43.9716 ms (host walltime is 44.5007 ms, 99% percentile time is 48.3427). [I] Average over 1000 runs is 44.1964 ms (host walltime is 44.7082 ms, 99% percentile time is 47.5894). [I] Average over 1000 runs is 44.2688 ms (host walltime is 44.807 ms, 99% percentile time is 48.258). [I] Average over 1000 runs is 44.5854 ms (host walltime is 45.1112 ms, 99% percentile time is 49.9511). [I] Average over 1000 runs is 44.2579 ms (host walltime is 44.7664 ms, 99% percentile time is 50.2773). [I] Average over 1000 runs is 44.5676 ms (host walltime is 45.0882 ms, 99% percentile time is 50.0144). &&&& PASSED TensorRT.trtexec # bin\\trtexec.exe --onnx=data\\project\\rcnn_1080_1920.onnx --avgRuns=1000 \u5b9e\u6d4b\u7ec6\u8282 &&&& RUNNING TensorRT.trtexec # bin\\trtexec.exe --onnx=data\\project\\model_256_256.onnx --avgRuns=1 --pfmDims=3,256,256 --pfmIn=256x256-color.pfm --pfmOut=anti-aliased-image.pfm [I] onnx: data\\project\\model_256_256.onnx [I] avgRuns: 1 [I] pfmDims: 3,256,256 [I] pfmIn: 256x256-color.pfm [I] pfmOut: anti-aliased-image.pfm ---------------------------------------------------------------- Input filename: data\\project\\model_256_256.onnx ONNX IR version: 0.0.3 Opset version: 9 Producer name: pytorch Producer version: 0.4 Domain: Model version: 0 Doc string: ---------------------------------------------------------------- processing input... [I] Average over 1 runs is 1.48886 ms (host walltime is 1.7345 ms, 99% percentile time is 1.48886). [I] Average over 1 runs is 2.0439 ms (host walltime is 2.2575 ms, 99% percentile time is 2.0439). [I] Average over 1 runs is 1.42774 ms (host walltime is 1.6747 ms, 99% percentile time is 1.42774). [I] Average over 1 runs is 1.56954 ms (host walltime is 1.7291 ms, 99% percentile time is 1.56954). [I] Average over 1 runs is 1.49696 ms (host walltime is 1.6449 ms, 99% percentile time is 1.49696). [I] Average over 1 runs is 1.48346 ms (host walltime is 1.6521 ms, 99% percentile time is 1.48346). [I] Average over 1 runs is 1.52355 ms (host walltime is 1.6975 ms, 99% percentile time is 1.52355). [I] Average over 1 runs is 1.48278 ms (host walltime is 1.6042 ms, 99% percentile time is 1.48278). [I] Average over 1 runs is 1.48112 ms (host walltime is 1.6171 ms, 99% percentile time is 1.48112). [I] Average over 1 runs is 1.57683 ms (host walltime is 1.7249 ms, 99% percentile time is 1.57683). &&&& PASSED TensorRT.trtexec # bin\\trtexec.exe --onnx=data\\project\\model_256_256.onnx --avgRuns=1 --pfmDims=3,256,256 --pfmIn=256x256-color.pfm --pfmOut=anti-aliased-image.pfm //TODO: \u672a\u5904\u7406\u5927\u5c0f\u7aef\u95ee\u9898 bool ReadPFMFile ( const std :: string & fileName , float * buffer ) { std :: ifstream file ( fileName , std :: ifstream :: binary ); assert ( file . is_open () && \"Attempting to read from a file that is not open.\" ); string bands ; int width , height ; float scalef , fvalue ; file >> bands ; file >> width ; file >> height ; file >> scalef ; assert ( bands == \"Pf\" || bands == \"PF\" ); assert ( width > 0 && height > 0 ); int channel = ( bands == \"Pf\" ? 1 : 3 ); file . seekg ( 1 , file . cur ); file . read ( reinterpret_cast < char *> ( buffer ), width * height * channel * sizeof ( float )); return true ; }; bool processInput ( samplesCommon :: BufferManager & bufferManager ) { size_t width = gParams . pfmDims . d [ 2 ]; size_t height = gParams . pfmDims . d [ 1 ]; size_t channel = gParams . pfmDims . d [ 0 ]; cout << \"processing input...\" << endl ; std :: vector < float > fileData ( channel * width * height ); string path = gParams . pfmIn ; ReadPFMFile ( path , fileData . data ()); auto hostInputBuffer = static_cast < float *> ( bufferManager . getBufferByIndex ( true , 0 )); for ( int c = 0 ; c < channel ; ++ c ) { // The color image to input should be in BGR order for ( unsigned j = 0 , volChl = height * width ; j < volChl ; ++ j ) hostInputBuffer [ c * volChl + j ] = float ( fileData [ j * channel + c ]); } bufferManager . copyInputToDevice (); return true ; } bool IsLittleEndian () { int intval = 1 ; unsigned char * uval = reinterpret_cast < unsigned char *> ( & intval ); return uval [ 0 ] == 1 ; } // TODO: \u672a\u5904\u7406\u5927\u5c0f\u7aef\u95ee\u9898 void WritePfmFile ( const float * const image_data , int width , int height , int channel , std :: string path , float scalef = 1.0f ) { assert ( ! path . empty ()); assert ( width > 0 && height > 0 ); assert ( channel == 1 || channel == 3 ); assert ( image_data ); std :: fstream file ( path . c_str (), std :: ios :: out | std :: ios :: binary ); std :: string bands ; float fvalue ; // scale factor and temp value to hold pixel value bands = ( channel == 1 ? \"Pf\" : \"PF\" ); // grayscale // sign of scalefact indicates endianness, see pfm specs if ( IsLittleEndian ()) scalef = - scalef ; // insert header information file << bands << \" \\n \" ; file << width << \" \" ; file << height << \" \\n \" ; file << scalef << \" \\n \" ; file . write ( reinterpret_cast < const char *> ( image_data ), width * height * channel * sizeof ( float )); } bool DumpPfm ( samplesCommon :: BufferManager & bufferManager ) { string path = gParams . pfmOut ; size_t width = gParams . pfmDims . d [ 2 ], height = gParams . pfmDims . d [ 1 ], channel = gParams . pfmDims . d [ 0 ]; bufferManager . copyOutputToHost (); auto hostOutputBuffer = static_cast < float *> ( bufferManager . getBufferByIndex ( true , 1 )); std :: vector < float > fileData ( channel * width * height ); for ( int c = 0 ; c < channel ; ++ c ) { for ( unsigned j = 0 , volChl = height * width ; j < volChl ; ++ j ) fileData [ j * channel + c ] = hostOutputBuffer [ c * volChl + j ]; } WritePfmFile ( fileData . data (), width , height , channel , path ); return true ; }","title":"\u6d4b\u8bd5"},{"location":"tensorrt/project/#_1","text":"$ bin \\t rtexec.exe --deploy = data \\m nist \\m nist.prototxt --model = data \\m nist \\m nist.caffemodel --output = prob","title":"\u6d4b\u8bd5"},{"location":"tensorrt/project/#_2","text":"\u786c\u4ef6 GeForce RTX 2080 i3-4160 CPU @ 3.60Hz 7.94 GB RAM \u8f6f\u4ef6 \u663e\u5361\u9a71\u52a8 430.39 Windows 10 version 1903 Cuda 10.0 cuDnn 7.5.0 TensorRT 5.1","title":"\u6d4b\u8bd5\u73af\u5883"},{"location":"tensorrt/project/#_3","text":"\u6a21\u578b input batch fp32 fp16 int8 ResNet50 224x224 41 37ms 10ms 5.7ms cnn-10 1080x1920 1 43ms 24ms 8.7ms rcnn-10 1080x1920 1 44ms 25ms 8.9ms","title":"\u5bf9\u6bd4\u7ed3\u679c"},{"location":"tensorrt/project/#tensorrt","text":"\u8d70\u6837\u8f93\u5165 \u6df1\u5ea6\u5b66\u4e60\u53cd\u8d70\u6837\u8f93\u51fa\u7ed3\u679c 64x SSAA","title":"TensorRT \u8fd0\u884c\u7ed3\u679c\u622a\u56fe"},{"location":"tensorrt/project/#_4","text":"","title":"\u7ed3\u679c\u7ec6\u8282"},{"location":"tensorrt/project/#resnet50","text":"","title":"ResNet50"},{"location":"tensorrt/project/#224x224x3","text":"\u53d61000\u6b21\u63a8\u65ad\u5e73\u5747\u65f6\u95f4\uff0cbatch \u5927\u5c0f\u9009\u4e3a41\uff08224x224x41->1080p\uff09 fp32 ~37ms fp16 ~10ms int8 ~5.7ms &&&& RUNNING TensorRT.trtexec # bin\\trtexec.exe --deploy=data\\resnet50\\ResNet50_N2.prototxt --model=data\\resnet50\\ResNet50_fp32.caffemodel --output=prob --batch=41 --avgRuns=1000 [I] deploy: data\\resnet50\\ResNet50_N2.prototxt [I] model: data\\resnet50\\ResNet50_fp32.caffemodel [I] output: prob [I] batch: 41 [I] avgRuns: 1000 [I] Input \"data\": 3x224x224 [I] Output \"prob\": 1000x1x1 [I] Average over 1000 runs is 36.5989 ms (host walltime is 37.056 ms, 99% percentile time is 40.3437). [I] Average over 1000 runs is 36.8025 ms (host walltime is 37.323 ms, 99% percentile time is 40.1227). [I] Average over 1000 runs is 37.0368 ms (host walltime is 37.5535 ms, 99% percentile time is 40.8833). [I] Average over 1000 runs is 36.9303 ms (host walltime is 37.4497 ms, 99% percentile time is 40.2044). [I] Average over 1000 runs is 37.3102 ms (host walltime is 37.8786 ms, 99% percentile time is 41.175). [I] Average over 1000 runs is 37.4353 ms (host walltime is 37.8854 ms, 99% percentile time is 41.0356). [I] Average over 1000 runs is 37.217 ms (host walltime is 37.7247 ms, 99% percentile time is 38.4388). [I] Average over 1000 runs is 37.6249 ms (host walltime is 38.1419 ms, 99% percentile time is 41.4488). [I] Average over 1000 runs is 37.7456 ms (host walltime is 38.2448 ms, 99% percentile time is 41.5314). [I] Average over 1000 runs is 37.6224 ms (host walltime is 38.1146 ms, 99% percentile time is 41.2564). &&&& PASSED TensorRT.trtexec # bin\\trtexec.exe --deploy=data\\resnet50\\ResNet50_N2.prototxt --model=data\\resnet50\\ResNet50_fp32.caffemodel --output=prob --batch=41 --avgRuns=1000 &&&& RUNNING TensorRT.trtexec # bin\\trtexec.exe --deploy=data\\resnet50\\ResNet50_N2.prototxt --model=data\\resnet50\\ResNet50_fp32.caffemodel --output=prob --batch=41 --fp16 --avgRuns=1000 [I] deploy: data\\resnet50\\ResNet50_N2.prototxt [I] model: data\\resnet50\\ResNet50_fp32.caffemodel [I] output: prob [I] batch: 41 [I] fp16 [I] avgRuns: 1000 [I] Input \"data\": 3x224x224 [I] Output \"prob\": 1000x1x1 [I] Average over 1000 runs is 9.78154 ms (host walltime is 10.1434 ms, 99% percentile time is 10.9564). [I] Average over 1000 runs is 9.80061 ms (host walltime is 10.1679 ms, 99% percentile time is 10.8871). [I] Average over 1000 runs is 9.85407 ms (host walltime is 10.1652 ms, 99% percentile time is 11.1824). [I] Average over 1000 runs is 9.7751 ms (host walltime is 10.1061 ms, 99% percentile time is 10.3968). [I] Average over 1000 runs is 9.79208 ms (host walltime is 10.1128 ms, 99% percentile time is 10.3916). [I] Average over 1000 runs is 9.97582 ms (host walltime is 10.2224 ms, 99% percentile time is 11.2078). [I] Average over 1000 runs is 10.149 ms (host walltime is 10.419 ms, 99% percentile time is 11.2807). [I] Average over 1000 runs is 10.1625 ms (host walltime is 10.4829 ms, 99% percentile time is 11.2303). [I] Average over 1000 runs is 10.1419 ms (host walltime is 10.4095 ms, 99% percentile time is 11.2451). [I] Average over 1000 runs is 9.81545 ms (host walltime is 10.0941 ms, 99% percentile time is 10.4676). &&&& PASSED TensorRT.trtexec # bin\\trtexec.exe --deploy=data\\resnet50\\ResNet50_N2.prototxt --model=data\\resnet50\\ResNet50_fp32.caffemodel --output=prob --batch=41 --fp16 --avgRuns=1000 &&&& RUNNING TensorRT.trtexec # bin\\trtexec.exe --deploy=data\\resnet50\\ResNet50_N2.prototxt --model=data\\resnet50\\ResNet50_fp32.caffemodel --output=prob --batch=41 --int8 --avgRuns=1000 [I] deploy: data\\resnet50\\ResNet50_N2.prototxt [I] model: data\\resnet50\\ResNet50_fp32.caffemodel [I] output: prob [I] batch: 41 [I] int8 [I] avgRuns: 1000 [I] Input \"data\": 3x224x224 [I] Output \"prob\": 1000x1x1 [I] Average over 1000 runs is 5.74966 ms (host walltime is 6.04008 ms, 99% percentile time is 6.38528). [I] Average over 1000 runs is 5.71288 ms (host walltime is 5.9746 ms, 99% percentile time is 6.29187). [I] Average over 1000 runs is 5.78671 ms (host walltime is 6.10283 ms, 99% percentile time is 6.49056). [I] Average over 1000 runs is 5.74245 ms (host walltime is 6.01866 ms, 99% percentile time is 6.32483). [I] Average over 1000 runs is 5.7246 ms (host walltime is 5.96897 ms, 99% percentile time is 6.26262). [I] Average over 1000 runs is 5.71427 ms (host walltime is 5.94986 ms, 99% percentile time is 6.2911). [I] Average over 1000 runs is 5.76482 ms (host walltime is 6.01559 ms, 99% percentile time is 6.91024). [I] Average over 1000 runs is 5.79972 ms (host walltime is 6.10345 ms, 99% percentile time is 6.41738). [I] Average over 1000 runs is 5.80141 ms (host walltime is 6.10004 ms, 99% percentile time is 6.45424). [I] Average over 1000 runs is 5.75387 ms (host walltime is 6.00265 ms, 99% percentile time is 6.24486). &&&& PASSED TensorRT.trtexec # bin\\trtexec.exe --deploy=data\\resnet50\\ResNet50_N2.prototxt --model=data\\resnet50\\ResNet50_fp32.caffemodel --output=prob --batch=41 --int8 --avgRuns=1000","title":"224x224x3"},{"location":"tensorrt/project/#_5","text":"","title":"\u9879\u76ee\u6a21\u578b"},{"location":"tensorrt/project/#cnn-10-256x256x31","text":"Project/pytorch-mono/model/model_256_256.onnx \u53d61000\u6b21\u63a8\u65ad\u5e73\u5747\u65f6\u95f4\uff0cbatch \u5927\u5c0f\u9009\u4e3a31\uff08256x256x31->1080p\uff09 fp32 ~41ms fp16 ~ &&&& RUNNING TensorRT.trtexec # bin\\trtexec.exe --onnx=data\\project\\model_256_256.onnx --batch=31 --avgRuns=1000 [I] onnx: data\\project\\model_256_256.onnx [I] batch: 31 [I] avgRuns: 1000 ---------------------------------------------------------------- Input filename: data\\project\\model_256_256.onnx ONNX IR version: 0.0.3 Opset version: 9 Producer name: pytorch Producer version: 0.4 Domain: Model version: 0 Doc string: ---------------------------------------------------------------- [I] Average over 1000 runs is 41.0329 ms (host walltime is 41.5606 ms, 99% percentile time is 45.5106). [I] Average over 1000 runs is 41.384 ms (host walltime is 41.9805 ms, 99% percentile time is 44.7077). [I] Average over 1000 runs is 41.7235 ms (host walltime is 42.2927 ms, 99% percentile time is 44.0291). [I] Average over 1000 runs is 42.318 ms (host walltime is 42.8769 ms, 99% percentile time is 46.7965). [I] Average over 1000 runs is 42.7134 ms (host walltime is 43.2284 ms, 99% percentile time is 47.8287). [I] Average over 1000 runs is 42.7245 ms (host walltime is 43.2779 ms, 99% percentile time is 47.6328). [I] Average over 1000 runs is 42.8418 ms (host walltime is 43.4213 ms, 99% percentile time is 47.8085). [I] Average over 1000 runs is 42.9501 ms (host walltime is 43.5097 ms, 99% percentile time is 46.7021). [I] Average over 1000 runs is 43.1244 ms (host walltime is 43.7388 ms, 99% percentile time is 46.721). [I] Average over 1000 runs is 43.3234 ms (host walltime is 43.8563 ms, 99% percentile time is 47.3295). &&&& PASSED TensorRT.trtexec # bin\\trtexec.exe --onnx=data\\project\\model_256_256.onnx --batch=31 --avgRuns=1000 &&&& RUNNING TensorRT.trtexec # bin\\trtexec.exe --onnx=data\\project\\model_256_256.onnx --batch=31 --avgRuns=1000 --fp16 [I] onnx: data\\project\\model_256_256.onnx [I] batch: 31 [I] avgRuns: 1000 [I] fp16 ---------------------------------------------------------------- Input filename: data\\project\\model_256_256.onnx ONNX IR version: 0.0.3 Opset version: 9 Producer name: pytorch Producer version: 0.4 Domain: Model version: 0 Doc string: ---------------------------------------------------------------- [I] Average over 1000 runs is 24.7055 ms (host walltime is 25.1759 ms, 99% percentile time is 27.4459). [I] Average over 1000 runs is 24.5021 ms (host walltime is 25.0236 ms, 99% percentile time is 27.277). [I] Average over 1000 runs is 24.6615 ms (host walltime is 25.1073 ms, 99% percentile time is 27.5085). [I] Average over 1000 runs is 24.8448 ms (host walltime is 25.3175 ms, 99% percentile time is 27.521). [I] Average over 1000 runs is 24.7442 ms (host walltime is 25.2699 ms, 99% percentile time is 27.5941). [I] Average over 1000 runs is 24.7661 ms (host walltime is 25.3317 ms, 99% percentile time is 27.9524). [I] Average over 1000 runs is 24.5799 ms (host walltime is 25.0773 ms, 99% percentile time is 28.3853). [I] Average over 1000 runs is 24.339 ms (host walltime is 24.8702 ms, 99% percentile time is 25.3111). [I] Average over 1000 runs is 24.6018 ms (host walltime is 25.1085 ms, 99% percentile time is 27.2757). [I] Average over 1000 runs is 24.373 ms (host walltime is 24.8947 ms, 99% percentile time is 26.6195). &&&& PASSED TensorRT.trtexec # bin\\trtexec.exe --onnx=data\\project\\model_256_256.onnx --batch=31 --avgRuns=1000 --fp16 &&&& RUNNING TensorRT.trtexec # bin\\trtexec.exe --onnx=data\\project\\model_256_256.onnx --batch=31 --avgRuns=1000 --int8 [I] onnx: data\\project\\model_256_256.onnx [I] batch: 31 [I] avgRuns: 1000 [I] int8 ---------------------------------------------------------------- Input filename: data\\project\\model_256_256.onnx ONNX IR version: 0.0.3 Opset version: 9 Producer name: pytorch Producer version: 0.4 Domain: Model version: 0 Doc string: ---------------------------------------------------------------- [I] Average over 1000 runs is 8.73495 ms (host walltime is 9.20868 ms, 99% percentile time is 10.3488). [I] Average over 1000 runs is 8.64708 ms (host walltime is 9.09442 ms, 99% percentile time is 10.1545). [I] Average over 1000 runs is 8.61756 ms (host walltime is 9.1009 ms, 99% percentile time is 9.4536). [I] Average over 1000 runs is 8.65811 ms (host walltime is 9.18585 ms, 99% percentile time is 9.25504). [I] Average over 1000 runs is 8.6794 ms (host walltime is 9.17846 ms, 99% percentile time is 9.27763). [I] Average over 1000 runs is 8.70592 ms (host walltime is 9.21263 ms, 99% percentile time is 9.44774). [I] Average over 1000 runs is 8.73309 ms (host walltime is 9.21576 ms, 99% percentile time is 10.0148). [I] Average over 1000 runs is 8.84639 ms (host walltime is 9.22179 ms, 99% percentile time is 10.2569). [I] Average over 1000 runs is 8.81949 ms (host walltime is 9.20646 ms, 99% percentile time is 10.2398). [I] Average over 1000 runs is 8.67455 ms (host walltime is 9.11521 ms, 99% percentile time is 9.55434). &&&& PASSED TensorRT.trtexec # bin\\trtexec.exe --onnx=data\\project\\model_256_256.onnx --batch=31 --avgRuns=1000 --int8","title":"cnn-10 256x256x31"},{"location":"tensorrt/project/#cnn-10-1080x1920x1","text":"Project/pytorch-mono/model/model_256_256.onnx &&&& RUNNING TensorRT.trtexec # bin\\trtexec.exe --onnx=data\\project\\model_1080_1920.onnx --avgRuns=1000 [I] onnx: data\\project\\model_1080_1920.onnx [I] avgRuns: 1000 ---------------------------------------------------------------- Input filename: data\\project\\model_1080_1920.onnx ONNX IR version: 0.0.3 Opset version: 9 Producer name: pytorch Producer version: 0.4 Domain: Model version: 0 Doc string: ---------------------------------------------------------------- [I] Average over 1000 runs is 42.5376 ms (host walltime is 43.1446 ms, 99% percentile time is 46.0185). [I] Average over 1000 runs is 43.0747 ms (host walltime is 43.689 ms, 99% percentile time is 46.514). [I] Average over 1000 runs is 43.358 ms (host walltime is 44.1039 ms, 99% percentile time is 46.8438). [I] Average over 1000 runs is 43.4793 ms (host walltime is 44.1057 ms, 99% percentile time is 46.8652). [I] Average over 1000 runs is 43.5992 ms (host walltime is 44.2232 ms, 99% percentile time is 46.9056). [I] Average over 1000 runs is 43.5605 ms (host walltime is 44.0431 ms, 99% percentile time is 46.944). [I] Average over 1000 runs is 43.7356 ms (host walltime is 44.245 ms, 99% percentile time is 47.3206). [I] Average over 1000 runs is 43.8808 ms (host walltime is 44.4116 ms, 99% percentile time is 47.3298). [I] Average over 1000 runs is 43.9177 ms (host walltime is 44.4749 ms, 99% percentile time is 47.3356). [I] Average over 1000 runs is 43.9216 ms (host walltime is 44.4726 ms, 99% percentile time is 47.4481). &&&& PASSED TensorRT.trtexec # bin\\trtexec.exe --onnx=data\\project\\model_1080_1920.onnx --avgRuns=1000 &&&& RUNNING TensorRT.trtexec # bin\\trtexec.exe --onnx=data\\project\\model_1080_1920.onnx --avgRuns=1000 --fp16 [I] onnx: data\\project\\model_1080_1920.onnx [I] avgRuns: 1000 [I] fp16 ---------------------------------------------------------------- Input filename: data\\project\\model_1080_1920.onnx ONNX IR version: 0.0.3 Opset version: 9 Producer name: pytorch Producer version: 0.4 Domain: Model version: 0 Doc string: ---------------------------------------------------------------- [I] Average over 1000 runs is 23.8831 ms (host walltime is 24.1203 ms, 99% percentile time is 24.3608). [I] Average over 1000 runs is 24.4111 ms (host walltime is 24.6861 ms, 99% percentile time is 27.3841). [I] Average over 1000 runs is 24.2999 ms (host walltime is 24.5427 ms, 99% percentile time is 26.731). [I] Average over 1000 runs is 24.4412 ms (host walltime is 24.7081 ms, 99% percentile time is 27.0674). [I] Average over 1000 runs is 24.4237 ms (host walltime is 24.6792 ms, 99% percentile time is 26.8421). [I] Average over 1000 runs is 24.8017 ms (host walltime is 25.0704 ms, 99% percentile time is 27.8242). [I] Average over 1000 runs is 24.5303 ms (host walltime is 24.7996 ms, 99% percentile time is 26.7191). [I] Average over 1000 runs is 25.0661 ms (host walltime is 25.3921 ms, 99% percentile time is 27.5972). [I] Average over 1000 runs is 24.9305 ms (host walltime is 25.1841 ms, 99% percentile time is 27.854). [I] Average over 1000 runs is 24.7011 ms (host walltime is 24.9569 ms, 99% percentile time is 27.7975). &&&& PASSED TensorRT.trtexec # bin\\trtexec.exe --onnx=data\\project\\model_1080_1920.onnx --avgRuns=1000 --fp16 &&&& RUNNING TensorRT.trtexec # bin\\trtexec.exe --onnx=data\\project\\model_1080_1920.onnx --avgRuns=1000 --int8 [I] onnx: data\\project\\model_1080_1920.onnx [I] avgRuns: 1000 [I] int8 ---------------------------------------------------------------- Input filename: data\\project\\model_1080_1920.onnx ONNX IR version: 0.0.3 Opset version: 9 Producer name: pytorch Producer version: 0.4 Domain: Model version: 0 Doc string: ---------------------------------------------------------------- [I] Average over 1000 runs is 8.66529 ms (host walltime is 9.21411 ms, 99% percentile time is 9.0624). [I] Average over 1000 runs is 8.73242 ms (host walltime is 9.309 ms, 99% percentile time is 9.12998). [I] Average over 1000 runs is 8.74873 ms (host walltime is 9.35212 ms, 99% percentile time is 9.2423). [I] Average over 1000 runs is 8.73695 ms (host walltime is 9.25817 ms, 99% percentile time is 9.19722). [I] Average over 1000 runs is 8.74951 ms (host walltime is 9.2688 ms, 99% percentile time is 9.21798). [I] Average over 1000 runs is 8.71137 ms (host walltime is 9.13181 ms, 99% percentile time is 9.40294). [I] Average over 1000 runs is 8.77244 ms (host walltime is 9.22304 ms, 99% percentile time is 10.645). [I] Average over 1000 runs is 8.75664 ms (host walltime is 9.22046 ms, 99% percentile time is 9.9672). [I] Average over 1000 runs is 8.84094 ms (host walltime is 9.32806 ms, 99% percentile time is 10.4063). [I] Average over 1000 runs is 8.95917 ms (host walltime is 9.36222 ms, 99% percentile time is 10.5293). &&&& PASSED TensorRT.trtexec # bin\\trtexec.exe --onnx=data\\project\\model_1080_1920.onnx --avgRuns=1000 --int8","title":"cnn-10 1080x1920x1"},{"location":"tensorrt/project/#rcnn-10","text":"&&&& RUNNING TensorRT.trtexec # bin\\trtexec.exe --onnx=data\\project\\rcnn_1080_1920.onnx --avgRuns=1000 --fp16 [I] onnx: data\\project\\rcnn_1080_1920.onnx [I] avgRuns: 1000 [I] fp16 ---------------------------------------------------------------- Input filename: data\\project\\rcnn_1080_1920.onnx ONNX IR version: 0.0.3 Opset version: 9 Producer name: pytorch Producer version: 0.4 Domain: Model version: 0 Doc string: ---------------------------------------------------------------- [I] Average over 1000 runs is 24.7947 ms (host walltime is 25.4378 ms, 99% percentile time is 27.7331). [I] Average over 1000 runs is 24.7445 ms (host walltime is 25.388 ms, 99% percentile time is 26.7407). [I] Average over 1000 runs is 25.1315 ms (host walltime is 25.7714 ms, 99% percentile time is 28.4338). [I] Average over 1000 runs is 24.9105 ms (host walltime is 25.5266 ms, 99% percentile time is 27.814). [I] Average over 1000 runs is 24.8836 ms (host walltime is 25.5464 ms, 99% percentile time is 27.5691). [I] Average over 1000 runs is 25.1164 ms (host walltime is 25.7185 ms, 99% percentile time is 27.9678). [I] Average over 1000 runs is 25.2527 ms (host walltime is 25.9155 ms, 99% percentile time is 28.072). [I] Average over 1000 runs is 25.2182 ms (host walltime is 25.84 ms, 99% percentile time is 28.8976). [I] Average over 1000 runs is 25.1389 ms (host walltime is 25.6296 ms, 99% percentile time is 27.8299). [I] Average over 1000 runs is 24.8778 ms (host walltime is 25.3639 ms, 99% percentile time is 26.6261). &&&& PASSED TensorRT.trtexec # bin\\trtexec.exe --onnx=data\\project\\rcnn_1080_1920.onnx --avgRuns=1000 --fp16 &&&& RUNNING TensorRT.trtexec # bin\\trtexec.exe --onnx=data\\project\\rcnn_1080_1920.onnx --avgRuns=1000 --int8 [I] onnx: data\\project\\rcnn_1080_1920.onnx [I] avgRuns: 1000 [I] int8 ---------------------------------------------------------------- Input filename: data\\project\\rcnn_1080_1920.onnx ONNX IR version: 0.0.3 Opset version: 9 Producer name: pytorch Producer version: 0.4 Domain: Model version: 0 Doc string: ---------------------------------------------------------------- [I] Average over 1000 runs is 8.74936 ms (host walltime is 8.99387 ms, 99% percentile time is 9.86048). [I] Average over 1000 runs is 8.84878 ms (host walltime is 9.1176 ms, 99% percentile time is 10.4693). [I] Average over 1000 runs is 8.97294 ms (host walltime is 9.42228 ms, 99% percentile time is 10.1783). [I] Average over 1000 runs is 9.02047 ms (host walltime is 9.62085 ms, 99% percentile time is 9.66451). [I] Average over 1000 runs is 9.04405 ms (host walltime is 9.64213 ms, 99% percentile time is 9.72186). [I] Average over 1000 runs is 9.08964 ms (host walltime is 9.65024 ms, 99% percentile time is 9.99885). [I] Average over 1000 runs is 8.94115 ms (host walltime is 9.25126 ms, 99% percentile time is 9.94397). [I] Average over 1000 runs is 9.0138 ms (host walltime is 9.43296 ms, 99% percentile time is 9.77478). [I] Average over 1000 runs is 9.08845 ms (host walltime is 9.70892 ms, 99% percentile time is 9.81402). [I] Average over 1000 runs is 9.10858 ms (host walltime is 9.70716 ms, 99% percentile time is 9.93792). &&&& PASSED TensorRT.trtexec # bin\\trtexec.exe --onnx=data\\project\\rcnn_1080_1920.onnx --avgRuns=1000 --int8 &&&& RUNNING TensorRT.trtexec # bin\\trtexec.exe --onnx=data\\project\\rcnn_1080_1920.onnx --avgRuns=1000 [I] onnx: data\\project\\rcnn_1080_1920.onnx [I] avgRuns: 1000 ---------------------------------------------------------------- Input filename: data\\project\\rcnn_1080_1920.onnx ONNX IR version: 0.0.3 Opset version: 9 Producer name: pytorch Producer version: 0.4 Domain: Model version: 0 Doc string: ---------------------------------------------------------------- [I] Average over 1000 runs is 43.781 ms (host walltime is 44.2806 ms, 99% percentile time is 47.6637). [I] Average over 1000 runs is 44.2414 ms (host walltime is 44.756 ms, 99% percentile time is 49.923). [I] Average over 1000 runs is 44.6497 ms (host walltime is 45.1768 ms, 99% percentile time is 51.5759). [I] Average over 1000 runs is 44.3383 ms (host walltime is 44.8596 ms, 99% percentile time is 49.2312). [I] Average over 1000 runs is 43.9716 ms (host walltime is 44.5007 ms, 99% percentile time is 48.3427). [I] Average over 1000 runs is 44.1964 ms (host walltime is 44.7082 ms, 99% percentile time is 47.5894). [I] Average over 1000 runs is 44.2688 ms (host walltime is 44.807 ms, 99% percentile time is 48.258). [I] Average over 1000 runs is 44.5854 ms (host walltime is 45.1112 ms, 99% percentile time is 49.9511). [I] Average over 1000 runs is 44.2579 ms (host walltime is 44.7664 ms, 99% percentile time is 50.2773). [I] Average over 1000 runs is 44.5676 ms (host walltime is 45.0882 ms, 99% percentile time is 50.0144). &&&& PASSED TensorRT.trtexec # bin\\trtexec.exe --onnx=data\\project\\rcnn_1080_1920.onnx --avgRuns=1000","title":"rcnn-10"},{"location":"tensorrt/project/#_6","text":"&&&& RUNNING TensorRT.trtexec # bin\\trtexec.exe --onnx=data\\project\\model_256_256.onnx --avgRuns=1 --pfmDims=3,256,256 --pfmIn=256x256-color.pfm --pfmOut=anti-aliased-image.pfm [I] onnx: data\\project\\model_256_256.onnx [I] avgRuns: 1 [I] pfmDims: 3,256,256 [I] pfmIn: 256x256-color.pfm [I] pfmOut: anti-aliased-image.pfm ---------------------------------------------------------------- Input filename: data\\project\\model_256_256.onnx ONNX IR version: 0.0.3 Opset version: 9 Producer name: pytorch Producer version: 0.4 Domain: Model version: 0 Doc string: ---------------------------------------------------------------- processing input... [I] Average over 1 runs is 1.48886 ms (host walltime is 1.7345 ms, 99% percentile time is 1.48886). [I] Average over 1 runs is 2.0439 ms (host walltime is 2.2575 ms, 99% percentile time is 2.0439). [I] Average over 1 runs is 1.42774 ms (host walltime is 1.6747 ms, 99% percentile time is 1.42774). [I] Average over 1 runs is 1.56954 ms (host walltime is 1.7291 ms, 99% percentile time is 1.56954). [I] Average over 1 runs is 1.49696 ms (host walltime is 1.6449 ms, 99% percentile time is 1.49696). [I] Average over 1 runs is 1.48346 ms (host walltime is 1.6521 ms, 99% percentile time is 1.48346). [I] Average over 1 runs is 1.52355 ms (host walltime is 1.6975 ms, 99% percentile time is 1.52355). [I] Average over 1 runs is 1.48278 ms (host walltime is 1.6042 ms, 99% percentile time is 1.48278). [I] Average over 1 runs is 1.48112 ms (host walltime is 1.6171 ms, 99% percentile time is 1.48112). [I] Average over 1 runs is 1.57683 ms (host walltime is 1.7249 ms, 99% percentile time is 1.57683). &&&& PASSED TensorRT.trtexec # bin\\trtexec.exe --onnx=data\\project\\model_256_256.onnx --avgRuns=1 --pfmDims=3,256,256 --pfmIn=256x256-color.pfm --pfmOut=anti-aliased-image.pfm //TODO: \u672a\u5904\u7406\u5927\u5c0f\u7aef\u95ee\u9898 bool ReadPFMFile ( const std :: string & fileName , float * buffer ) { std :: ifstream file ( fileName , std :: ifstream :: binary ); assert ( file . is_open () && \"Attempting to read from a file that is not open.\" ); string bands ; int width , height ; float scalef , fvalue ; file >> bands ; file >> width ; file >> height ; file >> scalef ; assert ( bands == \"Pf\" || bands == \"PF\" ); assert ( width > 0 && height > 0 ); int channel = ( bands == \"Pf\" ? 1 : 3 ); file . seekg ( 1 , file . cur ); file . read ( reinterpret_cast < char *> ( buffer ), width * height * channel * sizeof ( float )); return true ; }; bool processInput ( samplesCommon :: BufferManager & bufferManager ) { size_t width = gParams . pfmDims . d [ 2 ]; size_t height = gParams . pfmDims . d [ 1 ]; size_t channel = gParams . pfmDims . d [ 0 ]; cout << \"processing input...\" << endl ; std :: vector < float > fileData ( channel * width * height ); string path = gParams . pfmIn ; ReadPFMFile ( path , fileData . data ()); auto hostInputBuffer = static_cast < float *> ( bufferManager . getBufferByIndex ( true , 0 )); for ( int c = 0 ; c < channel ; ++ c ) { // The color image to input should be in BGR order for ( unsigned j = 0 , volChl = height * width ; j < volChl ; ++ j ) hostInputBuffer [ c * volChl + j ] = float ( fileData [ j * channel + c ]); } bufferManager . copyInputToDevice (); return true ; } bool IsLittleEndian () { int intval = 1 ; unsigned char * uval = reinterpret_cast < unsigned char *> ( & intval ); return uval [ 0 ] == 1 ; } // TODO: \u672a\u5904\u7406\u5927\u5c0f\u7aef\u95ee\u9898 void WritePfmFile ( const float * const image_data , int width , int height , int channel , std :: string path , float scalef = 1.0f ) { assert ( ! path . empty ()); assert ( width > 0 && height > 0 ); assert ( channel == 1 || channel == 3 ); assert ( image_data ); std :: fstream file ( path . c_str (), std :: ios :: out | std :: ios :: binary ); std :: string bands ; float fvalue ; // scale factor and temp value to hold pixel value bands = ( channel == 1 ? \"Pf\" : \"PF\" ); // grayscale // sign of scalefact indicates endianness, see pfm specs if ( IsLittleEndian ()) scalef = - scalef ; // insert header information file << bands << \" \\n \" ; file << width << \" \" ; file << height << \" \\n \" ; file << scalef << \" \\n \" ; file . write ( reinterpret_cast < const char *> ( image_data ), width * height * channel * sizeof ( float )); } bool DumpPfm ( samplesCommon :: BufferManager & bufferManager ) { string path = gParams . pfmOut ; size_t width = gParams . pfmDims . d [ 2 ], height = gParams . pfmDims . d [ 1 ], channel = gParams . pfmDims . d [ 0 ]; bufferManager . copyOutputToHost (); auto hostOutputBuffer = static_cast < float *> ( bufferManager . getBufferByIndex ( true , 1 )); std :: vector < float > fileData ( channel * width * height ); for ( int c = 0 ; c < channel ; ++ c ) { for ( unsigned j = 0 , volChl = height * width ; j < volChl ; ++ j ) fileData [ j * channel + c ] = hostOutputBuffer [ c * volChl + j ]; } WritePfmFile ( fileData . data (), width , height , channel , path ); return true ; }","title":"\u5b9e\u6d4b\u7ec6\u8282"},{"location":"tensorrt/trt-int8/","text":"TensorRT INT8 TensorRT \u652f\u6301\u8f6c\u6362 int8 \u6a21\u578b\u3001int8 \u63a8\u65ad\u529f\u80fd\u3002TensorRT \u635f\u89c6\u5c11\u91cf\u7cbe\u5ea6\u7684\u60c5\u51b5\u4e0b\u5c06 fp32 \u6a21\u578b\u8f6c\u6362\u4e3a int8\uff0c\u5927\u5e45\u5ea6\u51cf\u5c11\u63a8\u65ad\u65f6\u95f4\uff0c\u51cf\u5c11\u5b58\u50a8\u6d88\u8017\uff0c\u63d0\u5347\u541e\u5410\u91cf\u3002 \u4e0b\u56fe\u4e3a\u8f6c\u6362\u540e\u7684\u7cbe\u5ea6\u5bf9\u6bd4 TensorRT INT8 \u63a8\u65ad\u5177\u4f53\u6b65\u9aa4 \u7a0b\u5e8f\u63d0\u4f9b\u6709\u4ee3\u8868\u6027\u7684\u6570\u636e\u96c6 TensorRT \u5229\u7528\u6570\u636e\u96c6\u751f\u6210\u6821\u51c6\u8868 \u4fdd\u5b58\u6821\u51c6\u8868","title":"TensorRT INT8"},{"location":"tensorrt/trt-int8/#tensorrt-int8","text":"TensorRT \u652f\u6301\u8f6c\u6362 int8 \u6a21\u578b\u3001int8 \u63a8\u65ad\u529f\u80fd\u3002TensorRT \u635f\u89c6\u5c11\u91cf\u7cbe\u5ea6\u7684\u60c5\u51b5\u4e0b\u5c06 fp32 \u6a21\u578b\u8f6c\u6362\u4e3a int8\uff0c\u5927\u5e45\u5ea6\u51cf\u5c11\u63a8\u65ad\u65f6\u95f4\uff0c\u51cf\u5c11\u5b58\u50a8\u6d88\u8017\uff0c\u63d0\u5347\u541e\u5410\u91cf\u3002 \u4e0b\u56fe\u4e3a\u8f6c\u6362\u540e\u7684\u7cbe\u5ea6\u5bf9\u6bd4 TensorRT INT8 \u63a8\u65ad\u5177\u4f53\u6b65\u9aa4 \u7a0b\u5e8f\u63d0\u4f9b\u6709\u4ee3\u8868\u6027\u7684\u6570\u636e\u96c6 TensorRT \u5229\u7528\u6570\u636e\u96c6\u751f\u6210\u6821\u51c6\u8868 \u4fdd\u5b58\u6821\u51c6\u8868","title":"TensorRT INT8"},{"location":"tensorrt/trtexec/","text":"trtexec \u6e90\u7801\u5206\u6790 \u6e90\u7801\u6765\u81ea\u82f1\u4f1f\u8fbe\u5b98\u65b9\u6837\u4f8b\uff0c\u7528\u4e8e benchmark \u6d4b\u8bd5\u3002\u7ed9\u5b9a caffe/onnx/uff \u683c\u5f0f\u6a21\u578b\uff0c\u5728\u968f\u673a\u6570\u636e\u4e0a\u6d4b\u8bd5 Inference \u6548\u7387\uff0c\u6b64\u5916\u53ef\u4ee5\u4f5c\u4e3a\u751f\u6210\u5e8f\u5217\u5316 engine \u7684\u6837\u4f8b\u3002 \u4f7f\u7528\u8bf4\u660e\u5982\u4e0b\uff1a Mandatory params: --deploy=<file> Caffe deploy file OR --uff=<file> UFF file OR --onnx=<file> ONNX Model file OR --loadEngine=<file> Load a saved engine Mandatory params for UFF: --uffInput=<name>,C,H,W Input blob name and its dimensions for UFF parser (can be specified multiple times) --output=<name> Output blob name (can be specified multiple times) Mandatory params for Caffe: --output=<name> Output blob name (can be specified multiple times) Optional params: --model=<file> Caffe model file (default = no model, random weights used) --batch=N Set batch size (default = 1) --device=N Set cuda device to N (default = 0) --iterations=N Run N iterations (default = 10) --avgRuns=N Set avgRuns to N - perf is measured as an average of avgRuns (default=10) --percentile=P For each iteration, report the percentile time at P percentage (0<=P<=100, with 0 representing min, and 100 representing max; default = 99.0%) --workspace=N Set workspace size in megabytes (default = 16) --fp16 Run in fp16 mode (default = false). Permits 16-bit kernels --int8 Run in int8 mode (default = false). Currently no support for ONNX model. --verbose Use verbose logging (default = false) --saveEngine=<file> Save a serialized engine to file. --loadEngine=<file> Load a serialized engine from file. --calib=<file> Read INT8 calibration cache file. Currently no support for ONNX model. --useDLACore=N Specify a DLA engine for layers that support DLA. Value can range from 0 to n-1, where n is the number of DLA engines on the platform. --allowGPUFallback If --useDLACore flag is present and if a layer can't run on DLA, then run on GPU. --useSpinWait Actively wait for work completion. This option may decrease multi-process synchronization time at the cost of additional CPU usage. (default = false) --dumpOutput Dump outputs at end of test. -h, --help Print usage \u4f8b\u5b50\uff1a $ trtexec --deploy = /path/to/mnist.prototxt --model = /path/to/mnist.caffemodel --output = prob main \u65b9\u6cd5 int main ( int argc , char ** argv ) { // create a TensorRT model from the caffe/uff/onnx model and serialize it to a stream auto sampleTest = gLogger . defineTest ( gSampleName , argc , const_cast < const char **> ( argv )); gLogger . reportTestStart ( sampleTest ); if ( ! parseArgs ( argc , argv )) { return gLogger . reportFail ( sampleTest ); } if ( gParams . help ) { printUsage (); return gLogger . reportPass ( sampleTest ); } if ( gParams . verbose ) { setReportableSeverity ( Severity :: kVERBOSE ); } cudaSetDevice ( gParams . device ); initLibNvInferPlugins ( & gLogger . getTRTLogger (), \"\" ); ICudaEngine * engine = createEngine (); if ( ! engine ) { gLogError << \"Engine could not be created\" << std :: endl ; return gLogger . reportFail ( sampleTest ); } if ( gParams . uffFile . empty () && gParams . onnxModelFile . empty ()) { nvcaffeparser1 :: shutdownProtobufLibrary (); } else if ( gParams . deployFile . empty () && gParams . onnxModelFile . empty ()) { nvuffparser :: shutdownProtobufLibrary (); } doInference ( * engine ); engine -> destroy (); return gLogger . reportPass ( sampleTest ); } \u4e3b\u51fd\u6570\u5b8c\u6210\u4ee5\u4e0b\u5de5\u4f5c\uff1a \u89e3\u6790\u53c2\u6570 createEngine doInference \u63a5\u4e0b\u6765\u5177\u4f53\u5206\u6790 createEngine \u548c doInference \u4e24\u4e2a\u51fd\u6570 createEngine static ICudaEngine * createEngine () { ICudaEngine * engine ; // load directly from serialized engine file if deploy not specified if ( ! gParams . loadEngine . empty ()) { std :: vector < char > trtModelStream ; size_t size { 0 }; std :: ifstream file ( gParams . loadEngine , std :: ios :: binary ); if ( file . good ()) { file . seekg ( 0 , file . end ); size = file . tellg (); file . seekg ( 0 , file . beg ); trtModelStream . resize ( size ); file . read ( trtModelStream . data (), size ); file . close (); } IRuntime * infer = createInferRuntime ( gLogger . getTRTLogger ()); if ( gParams . useDLACore >= 0 ) { infer -> setDLACore ( gParams . useDLACore ); } engine = infer -> deserializeCudaEngine ( trtModelStream . data (), size , nullptr ); gLogInfo << gParams . loadEngine << \" has been successfully loaded.\" << std :: endl ; infer -> destroy (); return engine ; } if (( ! gParams . deployFile . empty ()) || ( ! gParams . uffFile . empty ()) || ( ! gParams . onnxModelFile . empty ())) { if ( ! gParams . uffFile . empty ()) { engine = uffToTRTModel (); } else if ( ! gParams . onnxModelFile . empty ()) { engine = onnxToTRTModel (); } else { engine = caffeToTRTModel (); } if ( ! engine ) { gLogError << \"Engine could not be created\" << std :: endl ; return nullptr ; } if ( ! gParams . saveEngine . empty ()) { std :: ofstream p ( gParams . saveEngine , std :: ios :: binary ); if ( ! p ) { gLogError << \"could not open plan output file\" << std :: endl ; return nullptr ; } IHostMemory * ptr = engine -> serialize (); if ( ptr == nullptr ) { gLogError << \"could not serialize engine.\" << std :: endl ; return nullptr ; } p . write ( reinterpret_cast < const char *> ( ptr -> data ()), ptr -> size ()); ptr -> destroy (); gLogInfo << \"Engine has been successfully saved to \" << gParams . saveEngine << std :: endl ; } return engine ; } // complain about empty deploy file gLogError << \"Deploy file not specified\" << std :: endl ; return nullptr ; } \u5c06 caffe/onnx/uff \u6a21\u578b\u8f6c\u6362\u4e3a TensorRT engine \u5e8f\u5217\u5316 engine doInference void doInference ( ICudaEngine & engine ) { IExecutionContext * context = engine . createExecutionContext (); // Use an aliasing shared_ptr since we don't want engine to be deleted when bufferManager goes out of scope. std :: shared_ptr < ICudaEngine > emptyPtr {}; std :: shared_ptr < ICudaEngine > aliasPtr ( emptyPtr , & engine ); samplesCommon :: BufferManager bufferManager ( aliasPtr , gParams . batchSize ); std :: vector < void *> buffers = bufferManager . getDeviceBindings (); cudaStream_t stream ; CHECK ( cudaStreamCreate ( & stream )); cudaEvent_t start , end ; unsigned int cudaEventFlags = gParams . useSpinWait ? cudaEventDefault : cudaEventBlockingSync ; CHECK ( cudaEventCreateWithFlags ( & start , cudaEventFlags )); CHECK ( cudaEventCreateWithFlags ( & end , cudaEventFlags )); std :: vector < float > times ( gParams . avgRuns ); for ( int j = 0 ; j < gParams . iterations ; j ++ ) { float totalGpu { 0 }, totalHost { 0 }; // GPU and Host timers for ( int i = 0 ; i < gParams . avgRuns ; i ++ ) { auto tStart = std :: chrono :: high_resolution_clock :: now (); cudaEventRecord ( start , stream ); context -> enqueue ( gParams . batchSize , & buffers [ 0 ], stream , nullptr ); cudaEventRecord ( end , stream ); cudaEventSynchronize ( end ); auto tEnd = std :: chrono :: high_resolution_clock :: now (); totalHost += std :: chrono :: duration < float , std :: milli > ( tEnd - tStart ). count (); float ms ; cudaEventElapsedTime ( & ms , start , end ); times [ i ] = ms ; totalGpu += ms ; } totalGpu /= gParams . avgRuns ; totalHost /= gParams . avgRuns ; gLogInfo << \"Average over \" << gParams . avgRuns << \" runs is \" << totalGpu << \" ms (host walltime is \" << totalHost << \" ms, \" << static_cast < int > ( gParams . pct ) << \"\\% percentile time is \" << percentile ( gParams . pct , times ) << \").\" << std :: endl ; } if ( gParams . dumpOutput ) { bufferManager . copyOutputToHost (); int nbBindings = engine . getNbBindings (); for ( int i = 0 ; i < nbBindings ; i ++ ) { if ( ! engine . bindingIsInput ( i )) { const char * tensorName = engine . getBindingName ( i ); gLogInfo << \"Dumping output tensor \" << tensorName << \":\" << std :: endl ; bufferManager . dumpBuffer ( gLogInfo , tensorName ); } } } cudaStreamDestroy ( stream ); cudaEventDestroy ( start ); cudaEventDestroy ( end ); context -> destroy (); } \u8fed\u4ee3\u591a\u6b21\uff0c\u5206\u522b\u8ba1\u7b97\u5728 GPU \u4e0a\u8fd0\u7b97\u7684\u65f6\u95f4\uff0c\u4ee5\u53ca\u4ece\u5f00\u59cb\u5230\u5b8c\u6210\u8fdb\u884c\u7684 walltime\uff0c\u5305\u62ec\u5176\u4ed6\u8fdb\u7a0b\u4f7f\u7528\u7684\u65f6\u95f4\u548c\u672c\u8fdb\u7a0b\u8017\u8d39\u5728\u963b\u585e\uff08\u5982\u7b49\u5f85I/O\u64cd\u4f5c\u5b8c\u6210\uff09\u4e0a\u7684\u65f6\u95f4\u3002 \u9500\u6bc1\u8d44\u6e90","title":"trtexec \u6e90\u7801\u5206\u6790"},{"location":"tensorrt/trtexec/#trtexec","text":"\u6e90\u7801\u6765\u81ea\u82f1\u4f1f\u8fbe\u5b98\u65b9\u6837\u4f8b\uff0c\u7528\u4e8e benchmark \u6d4b\u8bd5\u3002\u7ed9\u5b9a caffe/onnx/uff \u683c\u5f0f\u6a21\u578b\uff0c\u5728\u968f\u673a\u6570\u636e\u4e0a\u6d4b\u8bd5 Inference \u6548\u7387\uff0c\u6b64\u5916\u53ef\u4ee5\u4f5c\u4e3a\u751f\u6210\u5e8f\u5217\u5316 engine \u7684\u6837\u4f8b\u3002 \u4f7f\u7528\u8bf4\u660e\u5982\u4e0b\uff1a Mandatory params: --deploy=<file> Caffe deploy file OR --uff=<file> UFF file OR --onnx=<file> ONNX Model file OR --loadEngine=<file> Load a saved engine Mandatory params for UFF: --uffInput=<name>,C,H,W Input blob name and its dimensions for UFF parser (can be specified multiple times) --output=<name> Output blob name (can be specified multiple times) Mandatory params for Caffe: --output=<name> Output blob name (can be specified multiple times) Optional params: --model=<file> Caffe model file (default = no model, random weights used) --batch=N Set batch size (default = 1) --device=N Set cuda device to N (default = 0) --iterations=N Run N iterations (default = 10) --avgRuns=N Set avgRuns to N - perf is measured as an average of avgRuns (default=10) --percentile=P For each iteration, report the percentile time at P percentage (0<=P<=100, with 0 representing min, and 100 representing max; default = 99.0%) --workspace=N Set workspace size in megabytes (default = 16) --fp16 Run in fp16 mode (default = false). Permits 16-bit kernels --int8 Run in int8 mode (default = false). Currently no support for ONNX model. --verbose Use verbose logging (default = false) --saveEngine=<file> Save a serialized engine to file. --loadEngine=<file> Load a serialized engine from file. --calib=<file> Read INT8 calibration cache file. Currently no support for ONNX model. --useDLACore=N Specify a DLA engine for layers that support DLA. Value can range from 0 to n-1, where n is the number of DLA engines on the platform. --allowGPUFallback If --useDLACore flag is present and if a layer can't run on DLA, then run on GPU. --useSpinWait Actively wait for work completion. This option may decrease multi-process synchronization time at the cost of additional CPU usage. (default = false) --dumpOutput Dump outputs at end of test. -h, --help Print usage \u4f8b\u5b50\uff1a $ trtexec --deploy = /path/to/mnist.prototxt --model = /path/to/mnist.caffemodel --output = prob","title":"trtexec \u6e90\u7801\u5206\u6790"},{"location":"tensorrt/trtexec/#main","text":"int main ( int argc , char ** argv ) { // create a TensorRT model from the caffe/uff/onnx model and serialize it to a stream auto sampleTest = gLogger . defineTest ( gSampleName , argc , const_cast < const char **> ( argv )); gLogger . reportTestStart ( sampleTest ); if ( ! parseArgs ( argc , argv )) { return gLogger . reportFail ( sampleTest ); } if ( gParams . help ) { printUsage (); return gLogger . reportPass ( sampleTest ); } if ( gParams . verbose ) { setReportableSeverity ( Severity :: kVERBOSE ); } cudaSetDevice ( gParams . device ); initLibNvInferPlugins ( & gLogger . getTRTLogger (), \"\" ); ICudaEngine * engine = createEngine (); if ( ! engine ) { gLogError << \"Engine could not be created\" << std :: endl ; return gLogger . reportFail ( sampleTest ); } if ( gParams . uffFile . empty () && gParams . onnxModelFile . empty ()) { nvcaffeparser1 :: shutdownProtobufLibrary (); } else if ( gParams . deployFile . empty () && gParams . onnxModelFile . empty ()) { nvuffparser :: shutdownProtobufLibrary (); } doInference ( * engine ); engine -> destroy (); return gLogger . reportPass ( sampleTest ); } \u4e3b\u51fd\u6570\u5b8c\u6210\u4ee5\u4e0b\u5de5\u4f5c\uff1a \u89e3\u6790\u53c2\u6570 createEngine doInference \u63a5\u4e0b\u6765\u5177\u4f53\u5206\u6790 createEngine \u548c doInference \u4e24\u4e2a\u51fd\u6570","title":"main \u65b9\u6cd5"},{"location":"tensorrt/trtexec/#createengine","text":"static ICudaEngine * createEngine () { ICudaEngine * engine ; // load directly from serialized engine file if deploy not specified if ( ! gParams . loadEngine . empty ()) { std :: vector < char > trtModelStream ; size_t size { 0 }; std :: ifstream file ( gParams . loadEngine , std :: ios :: binary ); if ( file . good ()) { file . seekg ( 0 , file . end ); size = file . tellg (); file . seekg ( 0 , file . beg ); trtModelStream . resize ( size ); file . read ( trtModelStream . data (), size ); file . close (); } IRuntime * infer = createInferRuntime ( gLogger . getTRTLogger ()); if ( gParams . useDLACore >= 0 ) { infer -> setDLACore ( gParams . useDLACore ); } engine = infer -> deserializeCudaEngine ( trtModelStream . data (), size , nullptr ); gLogInfo << gParams . loadEngine << \" has been successfully loaded.\" << std :: endl ; infer -> destroy (); return engine ; } if (( ! gParams . deployFile . empty ()) || ( ! gParams . uffFile . empty ()) || ( ! gParams . onnxModelFile . empty ())) { if ( ! gParams . uffFile . empty ()) { engine = uffToTRTModel (); } else if ( ! gParams . onnxModelFile . empty ()) { engine = onnxToTRTModel (); } else { engine = caffeToTRTModel (); } if ( ! engine ) { gLogError << \"Engine could not be created\" << std :: endl ; return nullptr ; } if ( ! gParams . saveEngine . empty ()) { std :: ofstream p ( gParams . saveEngine , std :: ios :: binary ); if ( ! p ) { gLogError << \"could not open plan output file\" << std :: endl ; return nullptr ; } IHostMemory * ptr = engine -> serialize (); if ( ptr == nullptr ) { gLogError << \"could not serialize engine.\" << std :: endl ; return nullptr ; } p . write ( reinterpret_cast < const char *> ( ptr -> data ()), ptr -> size ()); ptr -> destroy (); gLogInfo << \"Engine has been successfully saved to \" << gParams . saveEngine << std :: endl ; } return engine ; } // complain about empty deploy file gLogError << \"Deploy file not specified\" << std :: endl ; return nullptr ; } \u5c06 caffe/onnx/uff \u6a21\u578b\u8f6c\u6362\u4e3a TensorRT engine \u5e8f\u5217\u5316 engine","title":"createEngine"},{"location":"tensorrt/trtexec/#doinference","text":"void doInference ( ICudaEngine & engine ) { IExecutionContext * context = engine . createExecutionContext (); // Use an aliasing shared_ptr since we don't want engine to be deleted when bufferManager goes out of scope. std :: shared_ptr < ICudaEngine > emptyPtr {}; std :: shared_ptr < ICudaEngine > aliasPtr ( emptyPtr , & engine ); samplesCommon :: BufferManager bufferManager ( aliasPtr , gParams . batchSize ); std :: vector < void *> buffers = bufferManager . getDeviceBindings (); cudaStream_t stream ; CHECK ( cudaStreamCreate ( & stream )); cudaEvent_t start , end ; unsigned int cudaEventFlags = gParams . useSpinWait ? cudaEventDefault : cudaEventBlockingSync ; CHECK ( cudaEventCreateWithFlags ( & start , cudaEventFlags )); CHECK ( cudaEventCreateWithFlags ( & end , cudaEventFlags )); std :: vector < float > times ( gParams . avgRuns ); for ( int j = 0 ; j < gParams . iterations ; j ++ ) { float totalGpu { 0 }, totalHost { 0 }; // GPU and Host timers for ( int i = 0 ; i < gParams . avgRuns ; i ++ ) { auto tStart = std :: chrono :: high_resolution_clock :: now (); cudaEventRecord ( start , stream ); context -> enqueue ( gParams . batchSize , & buffers [ 0 ], stream , nullptr ); cudaEventRecord ( end , stream ); cudaEventSynchronize ( end ); auto tEnd = std :: chrono :: high_resolution_clock :: now (); totalHost += std :: chrono :: duration < float , std :: milli > ( tEnd - tStart ). count (); float ms ; cudaEventElapsedTime ( & ms , start , end ); times [ i ] = ms ; totalGpu += ms ; } totalGpu /= gParams . avgRuns ; totalHost /= gParams . avgRuns ; gLogInfo << \"Average over \" << gParams . avgRuns << \" runs is \" << totalGpu << \" ms (host walltime is \" << totalHost << \" ms, \" << static_cast < int > ( gParams . pct ) << \"\\% percentile time is \" << percentile ( gParams . pct , times ) << \").\" << std :: endl ; } if ( gParams . dumpOutput ) { bufferManager . copyOutputToHost (); int nbBindings = engine . getNbBindings (); for ( int i = 0 ; i < nbBindings ; i ++ ) { if ( ! engine . bindingIsInput ( i )) { const char * tensorName = engine . getBindingName ( i ); gLogInfo << \"Dumping output tensor \" << tensorName << \":\" << std :: endl ; bufferManager . dumpBuffer ( gLogInfo , tensorName ); } } } cudaStreamDestroy ( stream ); cudaEventDestroy ( start ); cudaEventDestroy ( end ); context -> destroy (); } \u8fed\u4ee3\u591a\u6b21\uff0c\u5206\u522b\u8ba1\u7b97\u5728 GPU \u4e0a\u8fd0\u7b97\u7684\u65f6\u95f4\uff0c\u4ee5\u53ca\u4ece\u5f00\u59cb\u5230\u5b8c\u6210\u8fdb\u884c\u7684 walltime\uff0c\u5305\u62ec\u5176\u4ed6\u8fdb\u7a0b\u4f7f\u7528\u7684\u65f6\u95f4\u548c\u672c\u8fdb\u7a0b\u8017\u8d39\u5728\u963b\u585e\uff08\u5982\u7b49\u5f85I/O\u64cd\u4f5c\u5b8c\u6210\uff09\u4e0a\u7684\u65f6\u95f4\u3002 \u9500\u6bc1\u8d44\u6e90","title":"doInference"},{"location":"ue4/blueprint/","text":"\u84dd\u56fe \u57fa\u7840\u6982\u5ff5 \u84dd\u56fe\u57fa\u7840\u77e5\u8bc6\u4ecb\u7ecd \u84dd\u56fe\u662f\u4ec0\u4e48\u2014\u2014\u6982\u5ff5\u53ca\u539f\u7406\u3001\u501f\u52a9\u84dd\u56fe\u80fd\u5b9e\u73b0\u4ec0\u4e48 \u521b\u5efa\u84dd\u56fe\u3001\u84dd\u56fe\u7f16\u8f91\u5668\u754c\u9762 \u7ec4\u4ef6\u2014\u2014\u6784\u5efa\u84dd\u56fe \u84dd\u56fe\u56fe\u8868 \u4e0d\u540c\u79cd\u7c7b\u7684\u84dd\u56fe \u84dd\u56fe\u7684\u6ce8\u610f\u4e8b\u9879 \u84dd\u56fe\u662f\u4ec0\u4e48 \u53ef\u89c6\u5316\u811a\u672c \u5f53\u4f7f\u7528\u84dd\u56fe\u65f6\u5019\uff0c\u5176\u5b9e\u5c31\u662f\u5728\u7f16\u7801\uff0c\u53ea\u662f\u91c7\u7528\u53ef\u89c6\u5316\u7684\u65b9\u5f0f \u5141\u8bb8\u6267\u884c\u7684\u6d41\u7a0b\u56fe \u84dd\u56fe\u76f8\u5f53\u4e8e\u5185\u5bb9\u7684\u5bb9\u5668 \u53ef\u4ee5\u6301\u6709\u7ec4\u4ef6 \u6301\u6709\u811a\u672c \u6301\u6709\u6570\u636e \u9762\u5411\u5bf9\u8c61\u7684\u7f16\u8bd1\u578b\u53ef\u89c6\u5316\u811a\u672c\u9884\u7814 \u865a\u5e7b\u5f15\u64ce\u5df2\u7ecf\u521b\u5efa\u4e86\u8bb8\u591a\u9884\u5b9a\u4e49\u7c7b \u5185\u5d4c\u4e8e\u865a\u5e7b\u5f15\u64ce\u4e2d \u5de5\u4f5c\u65b9\u5f0f\uff1a\u5c06\u529f\u80fd\u4e0d\u540c\u7684\u8282\u70b9\u8fde\u63a5\uff0c\u7acb\u5373\u770b\u5230\u6548\u679c \u7c7b\u578b \u5173\u5361\u84dd\u56fe\u2014\u2014\u6bcf\u5173\u4e00\u4e2a \u7c7b\u2014\u2014\u591a\u4e2a C++\u5c31\u662f\u84dd\u56fe\uff0c\u84dd\u56fe\u5c31\u662f C++ \u84dd\u56fe\u6784\u5efa\u5728 C++ \u4e0a \u7f16\u8f91/\u4fee\u6539 C++ \u4ee3\u7801\u6765\u84dd\u56fe \u84dd\u56fe\u3001C++\u80fd\u5f88\u597d\u7684\u517c\u5bb9 \u95e8\u7684\u4f8b\u5b50 \u7ec4\u4ef6\u6784\u6210\uff1a - \u95e8\u7684 Mesh - Trigger \u7f8e\u5de5\u4e0d\u9700\u8981\u7f16\u5199\u811a\u672c\u5b9a\u4e49\u5982\u4f55\u5f00\u542f\u3001\u5173\u95ed\u5149\u6e90\uff0c\u53ea\u9700\u8981\u8c03\u6574\u516c\u5f00\u7684\u53c2\u6570 \u84dd\u56fe\u521b\u5efa\u548c\u7f16\u8f91\u5668 UI \u501f\u52a9\u5185\u5bb9\u6d4f\u89c8\u5668\u521b\u5efa \u9009\u62e9\u7ee7\u627f\u7c7b \u84dd\u56fe\u7f16\u8f91\u5668 \u7ec4\u4ef6\u662f\u84dd\u56fe\u7684\u57fa\u672c\u5355\u5143 \u4e3b\u5de5\u5177\u680f \u7f16\u8bd1\u84dd\u56fe\uff08\u4fee\u6539\u540e\u9700\u8981\u7f16\u8bd1\uff09 \u7c7b\u8bbe\u7f6e \u8c03\u8bd5\u6309\u94ae \u6784\u5efa\u811a\u672c \u84dd\u56fe\u7684\u81ea\u5b9a\u4e49\u53c2\u6570\u3001\u9884\u8bbe \u53ea\u8981\u84dd\u56fe\u5c5e\u6027\u88ab\u4fee\u6539\u5c31\u4f1a\u89e6\u53d1\u6784\u5efa\u3001\u6e38\u620f\u5f00\u59cb\u4e5f\u4f1a\u89e6\u53d1 \u4e8b\u4ef6\u56fe\u8868 \u6e38\u620f\u8fd0\u884c\u65f6\u66f4\u65b0\u84dd\u56fe \u5927\u90e8\u5206\u811a\u672c\u5728\u6b64\u6267\u884c \u51fd\u6570\u3001\u5b8f\u3001\u65f6\u95f4\u8c03\u5ea6\u5668\uff08\u5141\u8bb8\u4e0d\u901a\u84dd\u56fe\u901a\u4fe1\uff09 \u8fd8\u53ef\u4ee5\u5728\u7f16\u8f91\u5668\u4e2d\u751f\u6210\u84dd\u56fe \u84dd\u56fe\u7ec4\u4ef6 \u5728\u54ea\u53ca\u5982\u4f55\u5728\u84dd\u56fe\u6dfb\u52a0\u7ec4\u4ef6\u3001\u8bbf\u95ee\u5c5e\u6027\uff0c\u6709\u54ea\u4e9b\u7c7b\u578b\u7ec4\u4ef6\u53ef\u7528 \u6839\u8282\u70b9\u6307\u5b9a \u5584\u7528\u5185\u5bb9\u6d4f\u89c8\u5668+\u5de6\u7bad\u5934\u6307\u5b9a\u6309\u94ae/\u62d6\u52a8 \u84dd\u56fe\u56fe\u8868 \u84dd\u56fe\u6784\u9020\u811a\u672c\u3001\u4e8b\u4ef6\u56fe\u8868\u5dee\u5f02 \u84dd\u56fe\u56fe\u8868\u4e2d\u6dfb\u52a0\u8282\u70b9 \u51fd\u6570\u3001\u5b8f\u3001\u5408\u5e76\u56fe\u8868\u7684\u5dee\u5f02\uff1a\u51fd\u6570\u6709\u8f93\u5165\u3001\u5b8f\u65e0\u8f93\u5165 \u63a2\u7a76\u4e0d\u540c\u7c7b\u578b\u7684\u84dd\u56fe \u5173\u5361\u84dd\u56fe\u3001Actor\u84dd\u56fe\u3001\u52a8\u753b\u84dd\u56fe\u3001\u63a7\u4ef6\u84dd\u56fe \u84dd\u56fe\u7ee7\u627f\uff0c\u5584\u7528\u5b50\u84dd\u56fe \u4f7f\u7528\u84dd\u56fe\u7684\u8bf4\u660e \u84dd\u56fe\u76f8\u6bd4\u4e8eC++ \u4ea7\u751f\u989d\u5916\u7684\u5f00\u9500\uff0c\u907f\u514d\u5927\u91cf\u6570\u503c\u8fd0\u7b97 C++ \u80fd\u591f\u83b7\u53d6\u7684\u529f\u80fd\u66f4\u5b8c\u5584\uff0c\u5f88\u591a\u5185\u5bb9\u5c1a\u672a\u516c\u5f00\u7ed9\u84dd\u56fe \u84dd\u56fe\u662f\u57fa\u4e8e\u4e8b\u4ef6\u7684 \u84dd\u56fe\u7684\u5f15\u7528\u548c\u8f6c\u6362\uff08\u8282\u70b9\u4e2d\u4f7f\u7528 Casting\uff09 \u907f\u514d\u5faa\u73af\u4f9d\u8d56\uff08\u5982\uff0cA\u84dd\u56fe\u4e2dcastB\uff0cB\u84dd\u56fecastA\uff0c\u84dd\u56fe\u52a0\u8f7d\u8fc7\u7a0b\u76f8\u4e92\u52a0\u8f7d\uff0c\u9677\u5165\u5faa\u73af","title":"\u84dd\u56fe \u57fa\u7840\u6982\u5ff5"},{"location":"ue4/blueprint/#_1","text":"","title":"\u84dd\u56fe \u57fa\u7840\u6982\u5ff5"},{"location":"ue4/blueprint/#_2","text":"\u84dd\u56fe\u662f\u4ec0\u4e48\u2014\u2014\u6982\u5ff5\u53ca\u539f\u7406\u3001\u501f\u52a9\u84dd\u56fe\u80fd\u5b9e\u73b0\u4ec0\u4e48 \u521b\u5efa\u84dd\u56fe\u3001\u84dd\u56fe\u7f16\u8f91\u5668\u754c\u9762 \u7ec4\u4ef6\u2014\u2014\u6784\u5efa\u84dd\u56fe \u84dd\u56fe\u56fe\u8868 \u4e0d\u540c\u79cd\u7c7b\u7684\u84dd\u56fe \u84dd\u56fe\u7684\u6ce8\u610f\u4e8b\u9879","title":"\u84dd\u56fe\u57fa\u7840\u77e5\u8bc6\u4ecb\u7ecd"},{"location":"ue4/blueprint/#_3","text":"\u53ef\u89c6\u5316\u811a\u672c \u5f53\u4f7f\u7528\u84dd\u56fe\u65f6\u5019\uff0c\u5176\u5b9e\u5c31\u662f\u5728\u7f16\u7801\uff0c\u53ea\u662f\u91c7\u7528\u53ef\u89c6\u5316\u7684\u65b9\u5f0f \u5141\u8bb8\u6267\u884c\u7684\u6d41\u7a0b\u56fe \u84dd\u56fe\u76f8\u5f53\u4e8e\u5185\u5bb9\u7684\u5bb9\u5668 \u53ef\u4ee5\u6301\u6709\u7ec4\u4ef6 \u6301\u6709\u811a\u672c \u6301\u6709\u6570\u636e \u9762\u5411\u5bf9\u8c61\u7684\u7f16\u8bd1\u578b\u53ef\u89c6\u5316\u811a\u672c\u9884\u7814 \u865a\u5e7b\u5f15\u64ce\u5df2\u7ecf\u521b\u5efa\u4e86\u8bb8\u591a\u9884\u5b9a\u4e49\u7c7b \u5185\u5d4c\u4e8e\u865a\u5e7b\u5f15\u64ce\u4e2d \u5de5\u4f5c\u65b9\u5f0f\uff1a\u5c06\u529f\u80fd\u4e0d\u540c\u7684\u8282\u70b9\u8fde\u63a5\uff0c\u7acb\u5373\u770b\u5230\u6548\u679c \u7c7b\u578b \u5173\u5361\u84dd\u56fe\u2014\u2014\u6bcf\u5173\u4e00\u4e2a \u7c7b\u2014\u2014\u591a\u4e2a C++\u5c31\u662f\u84dd\u56fe\uff0c\u84dd\u56fe\u5c31\u662f C++ \u84dd\u56fe\u6784\u5efa\u5728 C++ \u4e0a \u7f16\u8f91/\u4fee\u6539 C++ \u4ee3\u7801\u6765\u84dd\u56fe \u84dd\u56fe\u3001C++\u80fd\u5f88\u597d\u7684\u517c\u5bb9","title":"\u84dd\u56fe\u662f\u4ec0\u4e48"},{"location":"ue4/blueprint/#_4","text":"\u7ec4\u4ef6\u6784\u6210\uff1a - \u95e8\u7684 Mesh - Trigger \u7f8e\u5de5\u4e0d\u9700\u8981\u7f16\u5199\u811a\u672c\u5b9a\u4e49\u5982\u4f55\u5f00\u542f\u3001\u5173\u95ed\u5149\u6e90\uff0c\u53ea\u9700\u8981\u8c03\u6574\u516c\u5f00\u7684\u53c2\u6570","title":"\u95e8\u7684\u4f8b\u5b50"},{"location":"ue4/blueprint/#ui","text":"\u501f\u52a9\u5185\u5bb9\u6d4f\u89c8\u5668\u521b\u5efa \u9009\u62e9\u7ee7\u627f\u7c7b \u84dd\u56fe\u7f16\u8f91\u5668 \u7ec4\u4ef6\u662f\u84dd\u56fe\u7684\u57fa\u672c\u5355\u5143 \u4e3b\u5de5\u5177\u680f \u7f16\u8bd1\u84dd\u56fe\uff08\u4fee\u6539\u540e\u9700\u8981\u7f16\u8bd1\uff09 \u7c7b\u8bbe\u7f6e \u8c03\u8bd5\u6309\u94ae \u6784\u5efa\u811a\u672c \u84dd\u56fe\u7684\u81ea\u5b9a\u4e49\u53c2\u6570\u3001\u9884\u8bbe \u53ea\u8981\u84dd\u56fe\u5c5e\u6027\u88ab\u4fee\u6539\u5c31\u4f1a\u89e6\u53d1\u6784\u5efa\u3001\u6e38\u620f\u5f00\u59cb\u4e5f\u4f1a\u89e6\u53d1 \u4e8b\u4ef6\u56fe\u8868 \u6e38\u620f\u8fd0\u884c\u65f6\u66f4\u65b0\u84dd\u56fe \u5927\u90e8\u5206\u811a\u672c\u5728\u6b64\u6267\u884c \u51fd\u6570\u3001\u5b8f\u3001\u65f6\u95f4\u8c03\u5ea6\u5668\uff08\u5141\u8bb8\u4e0d\u901a\u84dd\u56fe\u901a\u4fe1\uff09 \u8fd8\u53ef\u4ee5\u5728\u7f16\u8f91\u5668\u4e2d\u751f\u6210\u84dd\u56fe","title":"\u84dd\u56fe\u521b\u5efa\u548c\u7f16\u8f91\u5668 UI"},{"location":"ue4/blueprint/#_5","text":"\u5728\u54ea\u53ca\u5982\u4f55\u5728\u84dd\u56fe\u6dfb\u52a0\u7ec4\u4ef6\u3001\u8bbf\u95ee\u5c5e\u6027\uff0c\u6709\u54ea\u4e9b\u7c7b\u578b\u7ec4\u4ef6\u53ef\u7528 \u6839\u8282\u70b9\u6307\u5b9a \u5584\u7528\u5185\u5bb9\u6d4f\u89c8\u5668+\u5de6\u7bad\u5934\u6307\u5b9a\u6309\u94ae/\u62d6\u52a8","title":"\u84dd\u56fe\u7ec4\u4ef6"},{"location":"ue4/blueprint/#_6","text":"\u84dd\u56fe\u6784\u9020\u811a\u672c\u3001\u4e8b\u4ef6\u56fe\u8868\u5dee\u5f02 \u84dd\u56fe\u56fe\u8868\u4e2d\u6dfb\u52a0\u8282\u70b9 \u51fd\u6570\u3001\u5b8f\u3001\u5408\u5e76\u56fe\u8868\u7684\u5dee\u5f02\uff1a\u51fd\u6570\u6709\u8f93\u5165\u3001\u5b8f\u65e0\u8f93\u5165","title":"\u84dd\u56fe\u56fe\u8868"},{"location":"ue4/blueprint/#_7","text":"\u5173\u5361\u84dd\u56fe\u3001Actor\u84dd\u56fe\u3001\u52a8\u753b\u84dd\u56fe\u3001\u63a7\u4ef6\u84dd\u56fe \u84dd\u56fe\u7ee7\u627f\uff0c\u5584\u7528\u5b50\u84dd\u56fe","title":"\u63a2\u7a76\u4e0d\u540c\u7c7b\u578b\u7684\u84dd\u56fe"},{"location":"ue4/blueprint/#_8","text":"\u84dd\u56fe\u76f8\u6bd4\u4e8eC++ \u4ea7\u751f\u989d\u5916\u7684\u5f00\u9500\uff0c\u907f\u514d\u5927\u91cf\u6570\u503c\u8fd0\u7b97 C++ \u80fd\u591f\u83b7\u53d6\u7684\u529f\u80fd\u66f4\u5b8c\u5584\uff0c\u5f88\u591a\u5185\u5bb9\u5c1a\u672a\u516c\u5f00\u7ed9\u84dd\u56fe \u84dd\u56fe\u662f\u57fa\u4e8e\u4e8b\u4ef6\u7684 \u84dd\u56fe\u7684\u5f15\u7528\u548c\u8f6c\u6362\uff08\u8282\u70b9\u4e2d\u4f7f\u7528 Casting\uff09 \u907f\u514d\u5faa\u73af\u4f9d\u8d56\uff08\u5982\uff0cA\u84dd\u56fe\u4e2dcastB\uff0cB\u84dd\u56fecastA\uff0c\u84dd\u56fe\u52a0\u8f7d\u8fc7\u7a0b\u76f8\u4e92\u52a0\u8f7d\uff0c\u9677\u5165\u5faa\u73af","title":"\u4f7f\u7528\u84dd\u56fe\u7684\u8bf4\u660e"},{"location":"ue4/code-review/","text":"UE4 \u8fd0\u52a8\u6a21\u7cca\u4ee3\u7801\u89e3\u8bfb float4 MainMotionBlurCommon ( float2 OutputBufferUV , float2 ScreenSpacePos , float2 PixelPos ) { //\u540e\u7eed\u5faa\u73af\u4e2d\uff0c\u6bcf\u4e00\u6b65\u91c7\u6837\u4e24\u6b21\uff0c\u6240\u4ee5\u6b64\u5904 / 2 const uint StepCount = GetStepCountFromQuality () / 2 ; #if !SUPPORT_DIFFERENT_SCENE_COLOR_VIEWPORT float4 SceneColorBufferUVToViewBufferUV = float4 ( 1 , 1 , 0 , 0 ); #endif #if 0 uint2 iPixelPos = PixelPos; float2 PosMod = float2( iPixelPos & 1 ); float Dither = ( PosMod.x * 0.5 - 0.25 ) * ( PosMod.y * 2 - 1 ); float Random = RandFast( iPixelPos ); float Random2 = RandFast( iPixelPos, 5521 ); #else // Random.ush \u4e2d\u5b9a\u4e49\uff0c\u8fd4\u56de 0-1 \u968f\u673a\u503c float Random = InterleavedGradientNoise ( PixelPos , 0 ); float Random2 = InterleavedGradientNoise ( PixelPos , 1 ); #endif // -0.25-0.25 float2 TileJitter = ( float2 ( Random , Random2 ) - 0.5 ) * 0.5 ; float2 ViewBufferUV = OutputBufferUV * SceneColorBufferUVToViewBufferUV . xy + SceneColorBufferUVToViewBufferUV . zw ; float2 NearestBufferSvPosition = floor ( ViewBufferUV * View . BufferSizeAndInvSize . xy ) + 0.5 ; float2 TileUV = (( NearestBufferSvPosition - View . ViewRectMin . xy ) * ( 1.0 / 16.0 ) + TileJitter ) * PostprocessInput3Size . zw ; // Don't need to max TileUV because tiles are top left cornered in the PostprocessInput3. TileUV = min ( TileUV , TileUVMax . xy ); // \u91c7\u6837 Tile \uff08MaxNeighbor Tile\uff09 float4 MinMaxVelocity = PostprocessInput3 . SampleLevel ( PostprocessInput3Sampler , TileUV , 0 ); float2 MinVelocityPixels = MinMaxVelocity . xy * MotionBlurParameters . y ; float2 MaxVelocityPixels = MinMaxVelocity . zw * MotionBlurParameters . y ; float MinVelocityLengthSqrPixels = dot ( MinVelocityPixels , MinVelocityPixels ); float MaxVelocityLengthSqrPixels = dot ( MaxVelocityPixels , MaxVelocityPixels ); // Input buffer 0 as same viewport as output buffer. float4 CenterColor = PostprocessInput0 . SampleLevel ( PostprocessInput0Sampler , OutputBufferUV , 0 ); float2 MinViewportUV = ( float2 ( ViewportRect . xy ) + 0.5 ) * PostprocessInput0Size . zw ; float2 MaxViewportUV = ( float2 ( ViewportRect . zw ) - 0.5 ) * PostprocessInput0Size . zw ; #if 1 // \u5728 Max Veclocity \u7684\u6b63\u8d1f\u4e24\u4fa7\u641c\u7d22 float4 SearchVectorPixels = float4 ( MaxVelocityPixels , - MaxVelocityPixels ); #else // Clip MaxVelocity to screen rect float2 InvVelocityScreen = ScreenPosToPixel . x * rcp ( MaxVelocityPixels + 0.00001f ); float2 MinIntersect = - InvVelocityScreen - ScreenSpacePos * InvVelocityScreen ; float2 MaxIntersect = InvVelocityScreen - ScreenSpacePos * InvVelocityScreen ; float4 FarIntersect = float4 ( max ( MinIntersect , MaxIntersect ), max ( - MinIntersect , - MaxIntersect ) ); float2 Intersect = saturate ( min ( FarIntersect . xz , FarIntersect . yw ) ); // +/- float4 SearchVectorPixels = MaxVelocityPixels . xyxy * float4 ( Intersect . xx , - Intersect . yy ); #endif float4 SearchVector = SearchVectorPixels * PostprocessInput0Size . zwzw ; // converts pixel length to sample steps float PixelToSampleScale = StepCount * rsqrt ( dot ( MaxVelocityPixels , MaxVelocityPixels ) ); // TODO expose cvars bool bSkipPath = MaxVelocityLengthSqrPixels < 0.25 ; bool bFastPath = MinVelocityLengthSqrPixels > 0.4 * MaxVelocityLengthSqrPixels ; // Only use fast path if all threads of the compute shader would. #if COMPILER_SUPPORTS_WAVE_VOTE { bFastPath = WaveAllTrue ( bFastPath ); } #elif COMPUTESHADER { GroupSharedFastPath = 0 ; GroupMemoryBarrierWithGroupSync (); uint IgnoredOut ; InterlockedAdd ( GroupSharedFastPath , bFastPath ? 1 : 0 ); GroupMemoryBarrierWithGroupSync (); bFastPath = ( GroupSharedFastPath == ( THREADGROUP_SIZEX * THREADGROUP_SIZEY )); } #endif BRANCH if ( bSkipPath ) { #if !POST_PROCESS_ALPHA CenterColor . a = 0 ; #endif return CenterColor ; } float4 OutColor = 0 ; // \u5982\u679c Min Max \u5dee\u8ddd\u4e0d\u5927\uff0c\u4f7f\u7528 FastPath\uff08\u76f4\u63a5\u4f7f\u7528 Velocity \u91c7\u6837 Color\uff09 BRANCH if ( bFastPath ) { float4 ColorAccum = 0 ; UNROLL for ( uint i = 0 ; i < StepCount ; i ++ ) { float2 OffsetLength = ( float ) i + 0.5 + float2 ( Random - 0.5 , 0.5 - Random ); float2 OffsetFraction = OffsetLength / StepCount ; float2 SampleUV [ 2 ]; SampleUV [ 0 ] = OutputBufferUV + OffsetFraction . x * SearchVector . xy ; SampleUV [ 1 ] = OutputBufferUV + OffsetFraction . y * SearchVector . zw ; #if CLAMP_UV SampleUV [ 0 ] = clamp ( SampleUV [ 0 ], MinViewportUV , MaxViewportUV ); SampleUV [ 1 ] = clamp ( SampleUV [ 1 ], MinViewportUV , MaxViewportUV ); #endif ColorAccum += PostprocessInput0 . SampleLevel ( PostprocessInput0Sampler , SampleUV [ 0 ], 0 ); ColorAccum += PostprocessInput0 . SampleLevel ( PostprocessInput0Sampler , SampleUV [ 1 ], 0 ); } ColorAccum *= 0.5 / StepCount ; OutColor = ColorAccum ; } else { float3 CenterVelocityDepth = PostprocessInput2 . SampleLevel ( PostprocessInput2Sampler , OutputBufferUV * SceneColorBufferUVToViewBufferUV . xy + SceneColorBufferUVToViewBufferUV . zw , 0 ). xyz ; float CenterDepth = CenterVelocityDepth . z ; float CenterVelocityLength = GetVelocityLengthPixels ( CenterVelocityDepth . xy ); float4 ColorAccum = 0 ; float ColorAccumWeight = 0 ; UNROLL for ( uint i = 0 ; i < StepCount ; i ++ ) { float2 SampleUV [ 2 ]; float4 SampleColor [ 2 ]; float SampleDepth [ 2 ]; float SampleVelocityLength [ 2 ]; float Weight [ 2 ]; float2 OffsetLength = ( float ) i + 0.5 + float2 ( Random - 0.5 , 0.5 - Random ); float2 OffsetFraction = OffsetLength / StepCount ; SampleUV [ 0 ] = OutputBufferUV + OffsetFraction . x * SearchVector . xy ; SampleUV [ 1 ] = OutputBufferUV + OffsetFraction . y * SearchVector . zw ; #if CLAMP_UV SampleUV [ 0 ] = clamp ( SampleUV [ 0 ], MinViewportUV , MaxViewportUV ); SampleUV [ 1 ] = clamp ( SampleUV [ 1 ], MinViewportUV , MaxViewportUV ); #endif // \u6700\u91cd\u8981\u7684\u90e8\u5206 UNROLL for ( uint j = 0 ; j < 2 ; j ++ ) { float3 SampleVelocityDepth = PostprocessInput2 . SampleLevel ( PostprocessInput2Sampler , SampleUV [ j ] * SceneColorBufferUVToViewBufferUV . xy + SceneColorBufferUVToViewBufferUV . zw , 0 ). xyz ; SampleColor [ j ] = PostprocessInput0 . SampleLevel ( PostprocessInput0Sampler , SampleUV [ j ], 0 ); SampleDepth [ j ] = SampleVelocityDepth . z ; // in pixels SampleVelocityLength [ j ] = GetVelocityLengthPixels ( SampleVelocityDepth . xy ); Weight [ j ] = SampleWeight ( CenterDepth , SampleDepth [ j ], OffsetLength . x , CenterVelocityLength , SampleVelocityLength [ j ], PixelToSampleScale , SOFT_Z_EXTENT ); } bool2 Mirror = bool2 ( SampleDepth [ 0 ] > SampleDepth [ 1 ], SampleVelocityLength [ 1 ] > SampleVelocityLength [ 0 ] ); Weight [ 0 ] = all ( Mirror ) ? Weight [ 1 ] : Weight [ 0 ]; Weight [ 1 ] = any ( Mirror ) ? Weight [ 1 ] : Weight [ 0 ]; ColorAccum += Weight [ 0 ] * SampleColor [ 0 ] + Weight [ 1 ] * SampleColor [ 1 ]; ColorAccumWeight += Weight [ 0 ] + Weight [ 1 ]; } ColorAccum *= 0.5 / StepCount ; ColorAccumWeight *= 0.5 / StepCount ; OutColor = ColorAccum + ( 1 - ColorAccumWeight ) * CenterColor ; } #if !POST_PROCESS_ALPHA OutColor . a = 0 ; #endif return OutColor ; } float SampleWeight ( float CenterDepth , float SampleDepth , float OffsetLength , float CenterSpreadLength , float SampleSpreadLength , float PixelToSampleScale , float DepthScale ) { float2 DepthWeights = DepthCmp ( CenterDepth , SampleDepth , DepthScale ); float2 SpreadWeights = SpreadCmp ( OffsetLength , float2 ( CenterSpreadLength , SampleSpreadLength ), PixelToSampleScale ); return dot ( DepthWeights , SpreadWeights ); }","title":"UE4 \u8fd0\u52a8\u6a21\u7cca\u4ee3\u7801\u89e3\u8bfb"},{"location":"ue4/code-review/#ue4","text":"float4 MainMotionBlurCommon ( float2 OutputBufferUV , float2 ScreenSpacePos , float2 PixelPos ) { //\u540e\u7eed\u5faa\u73af\u4e2d\uff0c\u6bcf\u4e00\u6b65\u91c7\u6837\u4e24\u6b21\uff0c\u6240\u4ee5\u6b64\u5904 / 2 const uint StepCount = GetStepCountFromQuality () / 2 ; #if !SUPPORT_DIFFERENT_SCENE_COLOR_VIEWPORT float4 SceneColorBufferUVToViewBufferUV = float4 ( 1 , 1 , 0 , 0 ); #endif #if 0 uint2 iPixelPos = PixelPos; float2 PosMod = float2( iPixelPos & 1 ); float Dither = ( PosMod.x * 0.5 - 0.25 ) * ( PosMod.y * 2 - 1 ); float Random = RandFast( iPixelPos ); float Random2 = RandFast( iPixelPos, 5521 ); #else // Random.ush \u4e2d\u5b9a\u4e49\uff0c\u8fd4\u56de 0-1 \u968f\u673a\u503c float Random = InterleavedGradientNoise ( PixelPos , 0 ); float Random2 = InterleavedGradientNoise ( PixelPos , 1 ); #endif // -0.25-0.25 float2 TileJitter = ( float2 ( Random , Random2 ) - 0.5 ) * 0.5 ; float2 ViewBufferUV = OutputBufferUV * SceneColorBufferUVToViewBufferUV . xy + SceneColorBufferUVToViewBufferUV . zw ; float2 NearestBufferSvPosition = floor ( ViewBufferUV * View . BufferSizeAndInvSize . xy ) + 0.5 ; float2 TileUV = (( NearestBufferSvPosition - View . ViewRectMin . xy ) * ( 1.0 / 16.0 ) + TileJitter ) * PostprocessInput3Size . zw ; // Don't need to max TileUV because tiles are top left cornered in the PostprocessInput3. TileUV = min ( TileUV , TileUVMax . xy ); // \u91c7\u6837 Tile \uff08MaxNeighbor Tile\uff09 float4 MinMaxVelocity = PostprocessInput3 . SampleLevel ( PostprocessInput3Sampler , TileUV , 0 ); float2 MinVelocityPixels = MinMaxVelocity . xy * MotionBlurParameters . y ; float2 MaxVelocityPixels = MinMaxVelocity . zw * MotionBlurParameters . y ; float MinVelocityLengthSqrPixels = dot ( MinVelocityPixels , MinVelocityPixels ); float MaxVelocityLengthSqrPixels = dot ( MaxVelocityPixels , MaxVelocityPixels ); // Input buffer 0 as same viewport as output buffer. float4 CenterColor = PostprocessInput0 . SampleLevel ( PostprocessInput0Sampler , OutputBufferUV , 0 ); float2 MinViewportUV = ( float2 ( ViewportRect . xy ) + 0.5 ) * PostprocessInput0Size . zw ; float2 MaxViewportUV = ( float2 ( ViewportRect . zw ) - 0.5 ) * PostprocessInput0Size . zw ; #if 1 // \u5728 Max Veclocity \u7684\u6b63\u8d1f\u4e24\u4fa7\u641c\u7d22 float4 SearchVectorPixels = float4 ( MaxVelocityPixels , - MaxVelocityPixels ); #else // Clip MaxVelocity to screen rect float2 InvVelocityScreen = ScreenPosToPixel . x * rcp ( MaxVelocityPixels + 0.00001f ); float2 MinIntersect = - InvVelocityScreen - ScreenSpacePos * InvVelocityScreen ; float2 MaxIntersect = InvVelocityScreen - ScreenSpacePos * InvVelocityScreen ; float4 FarIntersect = float4 ( max ( MinIntersect , MaxIntersect ), max ( - MinIntersect , - MaxIntersect ) ); float2 Intersect = saturate ( min ( FarIntersect . xz , FarIntersect . yw ) ); // +/- float4 SearchVectorPixels = MaxVelocityPixels . xyxy * float4 ( Intersect . xx , - Intersect . yy ); #endif float4 SearchVector = SearchVectorPixels * PostprocessInput0Size . zwzw ; // converts pixel length to sample steps float PixelToSampleScale = StepCount * rsqrt ( dot ( MaxVelocityPixels , MaxVelocityPixels ) ); // TODO expose cvars bool bSkipPath = MaxVelocityLengthSqrPixels < 0.25 ; bool bFastPath = MinVelocityLengthSqrPixels > 0.4 * MaxVelocityLengthSqrPixels ; // Only use fast path if all threads of the compute shader would. #if COMPILER_SUPPORTS_WAVE_VOTE { bFastPath = WaveAllTrue ( bFastPath ); } #elif COMPUTESHADER { GroupSharedFastPath = 0 ; GroupMemoryBarrierWithGroupSync (); uint IgnoredOut ; InterlockedAdd ( GroupSharedFastPath , bFastPath ? 1 : 0 ); GroupMemoryBarrierWithGroupSync (); bFastPath = ( GroupSharedFastPath == ( THREADGROUP_SIZEX * THREADGROUP_SIZEY )); } #endif BRANCH if ( bSkipPath ) { #if !POST_PROCESS_ALPHA CenterColor . a = 0 ; #endif return CenterColor ; } float4 OutColor = 0 ; // \u5982\u679c Min Max \u5dee\u8ddd\u4e0d\u5927\uff0c\u4f7f\u7528 FastPath\uff08\u76f4\u63a5\u4f7f\u7528 Velocity \u91c7\u6837 Color\uff09 BRANCH if ( bFastPath ) { float4 ColorAccum = 0 ; UNROLL for ( uint i = 0 ; i < StepCount ; i ++ ) { float2 OffsetLength = ( float ) i + 0.5 + float2 ( Random - 0.5 , 0.5 - Random ); float2 OffsetFraction = OffsetLength / StepCount ; float2 SampleUV [ 2 ]; SampleUV [ 0 ] = OutputBufferUV + OffsetFraction . x * SearchVector . xy ; SampleUV [ 1 ] = OutputBufferUV + OffsetFraction . y * SearchVector . zw ; #if CLAMP_UV SampleUV [ 0 ] = clamp ( SampleUV [ 0 ], MinViewportUV , MaxViewportUV ); SampleUV [ 1 ] = clamp ( SampleUV [ 1 ], MinViewportUV , MaxViewportUV ); #endif ColorAccum += PostprocessInput0 . SampleLevel ( PostprocessInput0Sampler , SampleUV [ 0 ], 0 ); ColorAccum += PostprocessInput0 . SampleLevel ( PostprocessInput0Sampler , SampleUV [ 1 ], 0 ); } ColorAccum *= 0.5 / StepCount ; OutColor = ColorAccum ; } else { float3 CenterVelocityDepth = PostprocessInput2 . SampleLevel ( PostprocessInput2Sampler , OutputBufferUV * SceneColorBufferUVToViewBufferUV . xy + SceneColorBufferUVToViewBufferUV . zw , 0 ). xyz ; float CenterDepth = CenterVelocityDepth . z ; float CenterVelocityLength = GetVelocityLengthPixels ( CenterVelocityDepth . xy ); float4 ColorAccum = 0 ; float ColorAccumWeight = 0 ; UNROLL for ( uint i = 0 ; i < StepCount ; i ++ ) { float2 SampleUV [ 2 ]; float4 SampleColor [ 2 ]; float SampleDepth [ 2 ]; float SampleVelocityLength [ 2 ]; float Weight [ 2 ]; float2 OffsetLength = ( float ) i + 0.5 + float2 ( Random - 0.5 , 0.5 - Random ); float2 OffsetFraction = OffsetLength / StepCount ; SampleUV [ 0 ] = OutputBufferUV + OffsetFraction . x * SearchVector . xy ; SampleUV [ 1 ] = OutputBufferUV + OffsetFraction . y * SearchVector . zw ; #if CLAMP_UV SampleUV [ 0 ] = clamp ( SampleUV [ 0 ], MinViewportUV , MaxViewportUV ); SampleUV [ 1 ] = clamp ( SampleUV [ 1 ], MinViewportUV , MaxViewportUV ); #endif // \u6700\u91cd\u8981\u7684\u90e8\u5206 UNROLL for ( uint j = 0 ; j < 2 ; j ++ ) { float3 SampleVelocityDepth = PostprocessInput2 . SampleLevel ( PostprocessInput2Sampler , SampleUV [ j ] * SceneColorBufferUVToViewBufferUV . xy + SceneColorBufferUVToViewBufferUV . zw , 0 ). xyz ; SampleColor [ j ] = PostprocessInput0 . SampleLevel ( PostprocessInput0Sampler , SampleUV [ j ], 0 ); SampleDepth [ j ] = SampleVelocityDepth . z ; // in pixels SampleVelocityLength [ j ] = GetVelocityLengthPixels ( SampleVelocityDepth . xy ); Weight [ j ] = SampleWeight ( CenterDepth , SampleDepth [ j ], OffsetLength . x , CenterVelocityLength , SampleVelocityLength [ j ], PixelToSampleScale , SOFT_Z_EXTENT ); } bool2 Mirror = bool2 ( SampleDepth [ 0 ] > SampleDepth [ 1 ], SampleVelocityLength [ 1 ] > SampleVelocityLength [ 0 ] ); Weight [ 0 ] = all ( Mirror ) ? Weight [ 1 ] : Weight [ 0 ]; Weight [ 1 ] = any ( Mirror ) ? Weight [ 1 ] : Weight [ 0 ]; ColorAccum += Weight [ 0 ] * SampleColor [ 0 ] + Weight [ 1 ] * SampleColor [ 1 ]; ColorAccumWeight += Weight [ 0 ] + Weight [ 1 ]; } ColorAccum *= 0.5 / StepCount ; ColorAccumWeight *= 0.5 / StepCount ; OutColor = ColorAccum + ( 1 - ColorAccumWeight ) * CenterColor ; } #if !POST_PROCESS_ALPHA OutColor . a = 0 ; #endif return OutColor ; } float SampleWeight ( float CenterDepth , float SampleDepth , float OffsetLength , float CenterSpreadLength , float SampleSpreadLength , float PixelToSampleScale , float DepthScale ) { float2 DepthWeights = DepthCmp ( CenterDepth , SampleDepth , DepthScale ); float2 SpreadWeights = SpreadCmp ( OffsetLength , float2 ( CenterSpreadLength , SampleSpreadLength ), PixelToSampleScale ); return dot ( DepthWeights , SpreadWeights ); }","title":"UE4 \u8fd0\u52a8\u6a21\u7cca\u4ee3\u7801\u89e3\u8bfb"},{"location":"ue4/coordinate/","text":"UE4 \u4e2d\u5982\u4f55\u5904\u7406 D3D \u548c OpenGL \u5750\u6807\u7cfb \u80cc\u666f\uff1a\u9700\u8981\u5728\u5b89\u5353\u7aef ToneMapper \u540e\u6dfb\u52a0 Pass\u3002\u4e0e D3D \u7684\u5dee\u5f02\uff0c\u5bfc\u81f4\u7f16\u7801\u8fc7\u7a0b\u6613\u51fa\u73b0\u95ee\u9898\u3002 RenderDoc \u67e5\u770b MobileBasePass\uff0cVertex Shader \u4ee3\u7801\u4e2d\u51fa\u73b0\u4ee5\u4e0b\u8bed\u53e5 void compiler_internal_AdjustOutputSemantic ( inout vec4 Src ) { #if HLSLCC_DX11ClipSpace Src . y = - Src . y ; Src . z = ( 2.0 * Src . z ) - Src . w ; #endif } Vertex Shader \u4e2d\u690d\u5165\u4ee3\u7801\uff0c\u5c06\u6700\u7ec8\u8f93\u51fa y \u4e0a\u4e0b\u7ffb\u8f6c \u5f15\u64ce\u4e2d\u67e5\u627e HLSLCC_DX11ClipSpace // OpenGLShaderCompiler.cpp StrOutSource . Append ( TEXT ( \"#define HLSLCC_DX11ClipSpace 1 \\n \" ));","title":"UE4 \u4e2d\u5982\u4f55\u5904\u7406 D3D \u548c OpenGL \u5750\u6807\u7cfb"},{"location":"ue4/coordinate/#ue4-d3d-opengl","text":"\u80cc\u666f\uff1a\u9700\u8981\u5728\u5b89\u5353\u7aef ToneMapper \u540e\u6dfb\u52a0 Pass\u3002\u4e0e D3D \u7684\u5dee\u5f02\uff0c\u5bfc\u81f4\u7f16\u7801\u8fc7\u7a0b\u6613\u51fa\u73b0\u95ee\u9898\u3002 RenderDoc \u67e5\u770b MobileBasePass\uff0cVertex Shader \u4ee3\u7801\u4e2d\u51fa\u73b0\u4ee5\u4e0b\u8bed\u53e5 void compiler_internal_AdjustOutputSemantic ( inout vec4 Src ) { #if HLSLCC_DX11ClipSpace Src . y = - Src . y ; Src . z = ( 2.0 * Src . z ) - Src . w ; #endif } Vertex Shader \u4e2d\u690d\u5165\u4ee3\u7801\uff0c\u5c06\u6700\u7ec8\u8f93\u51fa y \u4e0a\u4e0b\u7ffb\u8f6c \u5f15\u64ce\u4e2d\u67e5\u627e HLSLCC_DX11ClipSpace // OpenGLShaderCompiler.cpp StrOutSource . Append ( TEXT ( \"#define HLSLCC_DX11ClipSpace 1 \\n \" ));","title":"UE4 \u4e2d\u5982\u4f55\u5904\u7406 D3D \u548c OpenGL \u5750\u6807\u7cfb"},{"location":"ue4/depth/","text":"\u79fb\u52a8\u7aef BasePass \u7684\u6df1\u5ea6 \u6982\u8ff0 MSAA \u5f00\u542f\u540e \u79fb\u52a8\u7aef\u4e0d Resolve\uff08\u628a MS Buffer \u89e3\u6790\u5230 1X Texture \u4e0a\uff09 \u5bfc\u81f4 PostProcess \u4e2d\u65e0\u6cd5\u4f7f\u7528 DepthTexture\uff0c Decal \u4e4b\u6240\u4ee5\u80fd\u6b63\u5e38\u4f7f\u7528\u7531\u4e8e FrameBufferFetch\uff0c\u6b64\u65f6 RenderPass \u7684 FBO \u9700\u8981 Attach BasePass \u8f93\u51fa\u7684 Depth MS // MobileShadingRenderer.cpp line 934 // MSAA depth can't be sampled or resolved, unless we are on PC (no vulkan) \u7ed3\u8bba Mobile \u4e0a\u65e0\u6cd5 Resolve Depth\uff0cDecal \u4e4b\u6240\u4ee5\u6ca1\u95ee\u9898\uff0c\u662f\u56e0\u4e3a\u548c BasePass \u5171\u7528\u4e00\u4e2a Pass\uff0c\u901a\u8fc7 FrameBufferFetch \u83b7\u53d6\u6df1\u5ea6 Q\uff1aConditional Resolve \u65e0\u6cd5 Resolve \u79fb\u52a8\u7aef MSAA\uff0c\u8fd9\u4e2a\u5b58\u5728\u7684\u610f\u4e49\u662f\u4ec0\u4e48","title":"\u79fb\u52a8\u7aef BasePass \u7684\u6df1\u5ea6"},{"location":"ue4/depth/#basepass","text":"","title":"\u79fb\u52a8\u7aef BasePass \u7684\u6df1\u5ea6"},{"location":"ue4/depth/#_1","text":"MSAA \u5f00\u542f\u540e \u79fb\u52a8\u7aef\u4e0d Resolve\uff08\u628a MS Buffer \u89e3\u6790\u5230 1X Texture \u4e0a\uff09 \u5bfc\u81f4 PostProcess \u4e2d\u65e0\u6cd5\u4f7f\u7528 DepthTexture\uff0c Decal \u4e4b\u6240\u4ee5\u80fd\u6b63\u5e38\u4f7f\u7528\u7531\u4e8e FrameBufferFetch\uff0c\u6b64\u65f6 RenderPass \u7684 FBO \u9700\u8981 Attach BasePass \u8f93\u51fa\u7684 Depth MS // MobileShadingRenderer.cpp line 934 // MSAA depth can't be sampled or resolved, unless we are on PC (no vulkan)","title":"\u6982\u8ff0"},{"location":"ue4/depth/#_2","text":"Mobile \u4e0a\u65e0\u6cd5 Resolve Depth\uff0cDecal \u4e4b\u6240\u4ee5\u6ca1\u95ee\u9898\uff0c\u662f\u56e0\u4e3a\u548c BasePass \u5171\u7528\u4e00\u4e2a Pass\uff0c\u901a\u8fc7 FrameBufferFetch \u83b7\u53d6\u6df1\u5ea6 Q\uff1aConditional Resolve \u65e0\u6cd5 Resolve \u79fb\u52a8\u7aef MSAA\uff0c\u8fd9\u4e2a\u5b58\u5728\u7684\u610f\u4e49\u662f\u4ec0\u4e48","title":"\u7ed3\u8bba"},{"location":"ue4/final-chapter1/","text":"UE4 \u6e32\u67d3\u7cfb\u7edf\u8bbe\u8ba1\u6d45\u6790 - 4.22 Release \u672c\u6587\u65e8\u5728\u5206\u6790 UE4 \u4e2d\u7684\u6e32\u67d3\u7cfb\u7edf\u8bbe\u8ba1\u7406\u5ff5\u3002 \u672c\u6587\u4ec5\u6d89\u53ca\u4e0e\u56fe\u5f62\u6e32\u67d3\u6700\u76f8\u5173\u7684\u7406\u5ff5\u3002 \u8fd8\u672a\u5b8c\u6210...\u5f85\u586b\u5751 \u6211\u4eec\u5c06\u4ece\u4f20\u7edf\u56fe\u5f62\u6e32\u67d3\u6d41\u7a0b\u5f00\u59cb\uff0c\u56de\u987e\u6e32\u67d3\u7684\u57fa\u672c\u6d41\u7a0b\uff1b\u4e4b\u540e\uff0c\u7531\u4e8e\u6e32\u67d3\u7cfb\u7edf\u4e2d\u7684\u4e00\u4e9b\u8bbe\u8ba1\u7406\u5ff5\u4e0e\u73b0\u4ee3\u56fe\u5f62 API \u7684\u5f3a\u5173\u8054\uff0c\u6211\u4eec\u5148\u4ece Vulkan\u3001D3D12 \u65b0\u7279\u6027\u5207\u5165\uff0c\u518d\u8bb2\u8ff0 UE4 \u4e2d\u8bbe\u8ba1\u4e0e\u8fd9\u4e9b\u65b0\u7279\u6027\u7684\u5bf9\u5e94\u5173\u7cfb\uff1b\u800c\u540e\u9488\u5bf9\u6e38\u620f\u5f15\u64ce\uff0c\u63a2\u8ba8\u6e32\u67d3\u7cfb\u7edf\u8fd8\u9700\u8981\u5f15\u5165\u4ec0\u4e48\u8bbe\u8ba1\uff1b\u6700\u7ec8\u6211\u4eec\u5c06\u4e32\u8d77\u8fd9\u4e9b\u6982\u5ff5\uff0c\u603b\u7ed3 UE4 \u6e32\u67d3\u7cfb\u7edf\u8bbe\u8ba1\u52a8\u673a\u53ca\u6a21\u5f0f\u3002 \u73b0\u6709\u7684\u4e0e\u6e32\u67d3\u76f8\u5173\u7684\u4f18\u8d28\u8d44\u6599\u96c6\u4e2d\u5728\u4ee5\u4e0b\u51e0\u4e2a\u65b9\u9762\uff1a \u5982\u4f55\u6dfb\u52a0 RenderPass \u5982\u4f55\u4e3a UE4 \u6dfb\u52a0\u5168\u5c40\u7740\u8272\u5668\uff08Global Shaders\uff09 \u3001 \u7f51\u683c\u4f53\u7ed8\u5236\u7ba1\u9053 | \u865a\u5e7b\u5f15\u64ce\u6587\u6863 \u5982\u4f55\u6dfb\u52a0 Shading Model\uff08\u6ce8\uff1a4.22 \u91cd\u6784\u7f51\u683c\u4f53\u7ed8\u5236\u540e\uff0c\u7cfb\u5217\u4e2d\u5173\u4e8e DrawPolicy \u7684\u63cf\u8ff0\u4e0d\u518d\u6709\u53c2\u8003\u4ef7\u503c\uff09 Unreal Engine 4 Rendering Part 1~6 \u57fa\u672c\u6982\u5ff5\u7684\u9610\u8ff0 \u56fe\u5f62\u7f16\u7a0b | \u865a\u5e7b\u5f15\u64ce\u6587\u6863 RenderPass \u6d41\u7a0b\u5206\u6790 \u6e32\u67d3\u7cfb\u7edf\u6982\u89c8\uff08\u6ce8\uff1a\u4f5c\u8005\u5c06\u6574\u4e2a\u7cfb\u7edf\u4ee3\u7801\u6d41\u7a0b\u6252\u4e0b\u6765\uff0c\u975e\u5e38\u76f4\u89c2\uff0c\u4e0d\u8fc7\u540c\u6837\u9700\u6ce8\u610f 4.22 \u7248\u672c\u91cd\u6784\u5bfc\u81f4\u7684\u53d8\u52a8\uff09 UE4 Render System Sheet\uff08UE4\u6e32\u67d3\u7cfb\u7edf\u6982\u89c8\uff09 \u4ed6\u4eec\u805a\u7126\u4e8e\u5176\u4e2d\u67d0\u4e00\u4e2a\u5b50\u529f\u80fd\uff0c\u5728\u6e32\u67d3\u7cfb\u7edf\u8bbe\u8ba1\u52a8\u673a\u65b9\u9762\u7684\u8ba8\u8bba\u8f83\u5c11\u3002 \u63a5\u4e0b\u6765\u5c06\u4ece\u6e32\u67d3\u7cfb\u7edf\u6f14\u5316\u3001\u6a21\u5f0f\u3001\u8981\u7d20\u63cf\u8ff0\u5f15\u64ce\u6e32\u67d3\u5b50\u7cfb\u7edf\u8bbe\u8ba1\u601d\u60f3\u3002 \u57fa\u672c\u56fe\u5f62\u6e32\u67d3\u6d41\u7a0b \u4ee5\u4e0b\u662f UE4 \u6e32\u67d3\u7cfb\u7edf\u4e2d\u4e0e\u4e0a\u8ff0\u6d41\u7a0b\u5bf9\u5e94\u7684\u6982\u5ff5\uff1a RenderPass\uff1aBasePass\u3001Decal\u3001Transparency\u3001PostProcess... RenderState\uff1aSetDepthStencilState\u3001SetBlendState... Shader\uff1aVertex Shader\u3001Geometry Shader\u3001Pixel Shader... Material\uff1aTexture\u3001Uniform Geometry/Object State\uff1aVertex Buffers\u3001Index Buffers DrawCall\uff1aRHI \u4e0a\u56fe\u662f\u4e00\u6bb5\u6bd4\u8f83\u5178\u578b\u7684\u56fe\u5f62\u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u4e3b\u5faa\u73af\u4f2a\u4ee3\u7801\u3002UE4 \u4f7f\u7528\u7684\u4e5f\u662f\u8fd9\u6837\u7684\u6d41\u7a0b\uff0c\u5982\uff1aUE4 FDeferredShadingSceneRenderer::Render \u4e2d\uff0c\u8c03\u7528\u4e86 RenderBasePass\u3001RenderShadowDepthMaps\u3001RenderVelocities \u7b49 RenderPass\uff1b\u800c BasePass \u6e32\u67d3\u65f6\uff0c\u9996\u5148\u8bbe\u5b9a RenderState\uff1b\u518d\u8bbe\u5b9a BasePassVertexShader\u3001BasePassPixelShader\uff1b\u7136\u540e\u5bf9 Shader \u53c2\u6570\u8fdb\u884c\u7ed1\u5b9a\uff0c\u542b\u5404\u79cd\u6750\u8d28\u3001Uniform \u7684\u7ed1\u5b9a\uff1b\u4e4b\u540e\u901a\u8fc7\u7ed1\u5b9a Index Buffer\u3001Vertex Buffer\uff0c\u8bbe\u5b9a GPU \u6e32\u67d3\u9876\u70b9\u6570\u636e\uff1b\u6700\u7ec8\u901a\u8fc7 RHI \u95f4\u63a5\u8c03\u7528 Vulkan/D3D/OGL\uff0c\u63d0\u4ea4\u7ed8\u5236\u547d\u4ee4\u3002 \u73b0\u4ee3\u56fe\u5f62 API\uff1aUE4 \u6e32\u67d3\u7cfb\u7edf\u8bbe\u8ba1\u6765\u6e90\u4e4b\u4e00 UE4 \u6e32\u67d3\u7cfb\u7edf\u4e00\u65b9\u9762\u4f1a\u968f\u7740\u65b0\u56fe\u5f62 API \u7684\u51fa\u73b0\uff0c\u5728\u7cfb\u7edf\u5e95\u5c42\u5c01\u88c5\u6210\u56fe\u5f62\u63a5\u53e3\u65e0\u5173\u7684 API\uff0c\u53e6\u4e00\u65b9\u9762\u4f1a\u501f\u9274\u73b0\u4ee3\u56fe\u5f62 API \u8bbe\u8ba1\u7406\u5ff5\uff08\u5982\uff0c\u4e3a\u591a\u7ebf\u7a0b\u8bbe\u8ba1\u7684\u7ec4\u4ef6\uff09\uff0c\u5c06\u5176\u878d\u5165\u81ea\u8eab\u7684\u8bbe\u8ba1\u54f2\u5b66\u4e2d\u3002 \u672c\u7ae0\u8282\u6765\u56de\u987e\u73b0\u4ee3\u56fe\u5f62\u5b66 API \u4e2d\u7684\u51e0\u4e2a\u6982\u5ff5\u3002\u8fd9\u4e9b\u6982\u5ff5\u88ab UE4 \u5ef6\u7528\uff0c\u6210\u4e3a\u5e73\u53f0\u65e0\u5173\u7684\u6e32\u67d3\u5b50\u7cfb\u7edf\u7684\u4e00\u90e8\u5206\uff0c\u5bf9\u5b50\u7cfb\u7edf\u5c01\u88c5\u7684\u4f17\u591a API \u63d0\u4f9b\u4e00\u81f4\u7684\u529f\u80fd\uff0c\u7528\u4e8e\u51cf\u8f7b\u6e38\u620f\u5ba2\u6237\u7aef CPU \u8d1f\u62c5\u3002 \u73b0\u4ee3\u56fe\u5f62 API \u4e13\u6ce8\u4e8e CPU \u8d44\u6e90\u5229\u7528\u7387\u4e0a\u7684\u6539\u8fdb \u73b0\u4ee3\u56fe\u5f62 API \u6e32\u67d3\u6d41\u7a0b\u4e0a\u4e0e\u57fa\u672c\u56fe\u5f62\u7ba1\u7ebf\u5e76\u65e0\u4e8c\u81f4\uff0c\u4ecd\u7136\u662f RenderPass\u3001\u8bbe\u7f6e RenderState\u3001\u7740\u8272\u5668\u3001\u7ed1\u5b9a\u6570\u636e\u3001\u8c03\u7528DrawCall\u3002 \u73b0\u4ee3\u56fe\u5f62 API \u8bbe\u8ba1\u6838\u5fc3\u5728\u4e8e\u964d\u4f4e CPU \u5f00\u9500\uff0c\u6700\u5927\u9650\u5ea6\u5229\u7528 CPU \u8d44\u6e90\uff08\u591a\u6838\u5fc3\uff09\uff0c\u53d7\u76ca\u7684\u5e94\u7528\u7c7b\u578b\u4e3a CPU \u7aef\u80fd\u591f\u591a\u7ebf\u7a0b\u5e76\u884c\u5316\u7684\u5e94\u7528\u3002 \u5176\u4e2d\u6700\u91cd\u8981\u7684\u601d\u60f3\u5982\u4e0b\uff1a \u66f4\u4f9d\u8d56\u4e8e\u7a0b\u5e8f\u81ea\u8eab\u7684\u8ba4\u77e5\uff0c\u8ba9\u7a0b\u5e8f\u6709\u66f4\u591a\u7684\u6743\u9650\u548c\u8d23\u4efb\u81ea\u4e3b\u7684\u5904\u7406\u8c03\u5ea6\u548c\u4f18\u5316\uff0c\u800c\u4e0d\u4f9d\u8d56\u4e8e\u9a71\u52a8\u5c1d\u8bd5\u5728\u540e\u53f0\u7684\u4f18\u5316 \u591a\u7ebf\u7a0b\u53cb\u597d\uff0c\u8ba9\u7a0b\u5e8f\u5c3d\u53ef\u80fd\u7684\u5229\u7528\u6240\u6709CPU\u8ba1\u7b97\u8d44\u6e90\u4ece\u800c\u63d0\u9ad8\u6027\u80fd \u5f3a\u8c03\u590d\u7528\uff0c\u4ece\u800c\u51cf\u5c11\u5f00\u9500 UE4 \u6e32\u67d3\u7cfb\u7edf\u4e2d\u5927\u91cf\u91c7\u7528\u73b0\u4ee3\u56fe\u5f62 API \u7406\u5ff5\uff0c\u5728\u540e\u4e00\u7ae0\u8282\u5c06\u4f1a\u63d0\u5230\u7684 UE4 \u4e2d\u7684 CommandList\u3001PSO\u3001PSO Cache \u7b49\u4f17\u591a\u7ec4\u4ef6\u90fd\u6765\u6e90\u4e8e\u6b64\uff0c\u5373 UE4 \u7684 RHI \u62bd\u8c61\u5c42\u7ea7\u66f4\u504f\u5411\u73b0\u4ee3\u56fe\u5f62 API\uff0c\u540c\u65f6\uff0cRHI \u5185\u90e8\u5b8c\u6210\u4e86\u5404\u7c7b\u56fe\u5f62 API \u7684\u9002\u914d\u5de5\u4f5c\u3002 \u6211\u4eec\u5c06\u91cd\u70b9\u63a2\u8ba8 Vulkan \u4e2d\u7684 Command Buffer\u3001PSO\uff0c\u4ed6\u4eec\u5728\u5176\u4ed6\u73b0\u4ee3\u56fe\u5f62 API \u4e2d\u4e5f\u80fd\u627e\u5230\u5bf9\u5e94\u6982\u5ff5\u3002 Command Buffer \u7528\u4e8e\u8bb0\u5f55 Commands Command Buffer \u5305\u542b\u4e86\u4e00\u6b21 Draw \u9700\u8981\u7684\u6240\u6709\u72b6\u6001\uff08State\u3001Binding\u3001Draw\uff09 \u5e94\u7528\u7a0b\u5e8f\u63a7\u5236\u4f18\u5316 \u73b0\u4ee3\u56fe\u5f62 API \u5c06\u5e94\u7528\u540c\u6b65\u63a7\u5236\u6743\u4ea4\u8fd8\u5230\u5f00\u53d1\u8005\u624b\u4e0a\uff0cUE4 \u4e2d\u9ad8\u5c42\u7ea7\u6982\u5ff5 RenderGraph \u4e3a\u56fe\u5f62\u5f00\u53d1\u8005\u81ea\u52a8\u8ba1\u7b97\u4f9d\u8d56\u3001\u63d2\u5165 Fence\u3002 \u5bf9\u4e8e\u4f20\u7edfAPI\uff0cCommand Buffer \u548c Driver \u6982\u5ff5\u7ed1\u5b9a\u5728\u4e00\u8d77\uff0c\u5bf9\u4e8e D3D12\uff0cCommand Buffer \u72ec\u7acb\u4e8e Driver \u5c42\u7ea7\uff0c\u63d0\u4f9b\u7f13\u5b58\u547d\u4ee4\u7684\u529f\u80fd\uff0c\u5b83\u80fd\u591f\u5728\u9002\u5f53\u7684\u65f6\u673a\u5c06\u7f13\u5b58\u7684\u547d\u4ee4\u4e00\u8d77\u53d1\u9001\u7ed9 GPU\uff0c\u7f13\u5b58\u80fd\u51cf\u5c11\u8c03\u7528 Driver \u5e26\u6765\u7684 CPU \u7531\u7528\u6237\u6001\u8f6c\u6362\u5230\u5185\u6838\u6001\u5e26\u6765\u7684\u6027\u80fd\u5f00\u9500 \u611f\u5174\u8da3\u770b[\u6587\u5200\u79cb\u4e8c\u5173\u4e8e Vulkan \u7406\u5ff5]\u7684\u6587\u7ae0\uff0c\u672c\u8282\u662f\u7b80\u77ed\u8f6c\u8ff0\u3002 UE4 \u6e32\u67d3\u5b50\u7cfb\u7edf\u8bbe\u8ba1\u7406\u5ff5 Note \u6e32\u67d3\u7cfb\u7edf\u4ee3\u7801\u4e3b\u8981\u653e\u5728 Source\\Runtime\\RenderCore\u3001Source\\Runtime\\Renderer\u3001Source\\Runtime\\RHI \u6587\u4ef6\u5939\u4e0b\u3002 \u672c\u7ae0\u5c06\u8bb2\u8ff0 UE4 \u6e32\u67d3\u5b50\u7cfb\u7edf\u7684\u8bbe\u8ba1\u7406\u5ff5\u3002\u5176\u4e2d\uff0c\u65e2\u5305\u542b\u4e0a\u4e00\u7ae0\u8282\u4e2d\u63d0\u5230\u7684\u73b0\u4ee3\u56fe\u5f62 API \u7684\u8bbe\u8ba1\uff0c\u4e5f\u5305\u542b\u4e86\u4f5c\u4e3a\u6e38\u620f\u5f15\u64ce\u5b50\u7cfb\u7edf\u9700\u8981\u8003\u8651\u5230\u7684\u8bbe\u8ba1\u3002 \u63a5\u4e0b\u6765\u5206\u522b\u8bb2\u8ff0\u4ee5\u4e0b\u51e0\u4e2a\u6982\u5ff5 \u9996\u5148\u56de\u987e\u6e32\u67d3\u7684\u6574\u4f53\u6d41\u7a0b\uff1a \u9996\u5148\u770b\u57fa\u672c\u6570\u636e\u7ed3\u6784\uff0c\u7f51\u683c\u4f53\u8868\u793a\u3001\u89c6\u89d2\u548c\u6444\u50cf\u673a\u3001\u6750\u8d28\u3001\u6570\u636e\uff08\u51e0\u4f55\u6570\u636e\u3001Uniform \u548c Parameter\uff09 \u8ddf\u8e2a\u7f51\u683c\u4f53\u7ed8\u5236\u6d41\u7a0b \u8ddf\u8e2a Renderer \u5728\u8fd9\u4e9b\u6d41\u7a0b\u80cc\u540e\uff0c\u4f17\u591a\u57fa\u7840\u7c7b\u5171\u540c\u4e3a\u6211\u4eec\u63d0\u4f9b\u7cfb\u7edf\u57fa\u672c\u529f\u80fd\u3002 \u6211\u4eec\u5c06\u5265\u79bb\u6389\u6e38\u620f\u5f15\u64ce\u6e32\u67d3\u5b50\u7cfb\u7edf\uff08\u4e1a\u52a1\u903b\u8f91\uff09\u8fd9\u4e00\u6807\u7b7e\uff0c\u805a\u7126\u4e8e\u6e32\u67d3\u7cfb\u7edf\u5728\u56fe\u5f62\u6e32\u67d3\u65b9\u9762\u8bbe\u8ba1\u52a8\u673a\uff1a \u5bf9\u4e8e\u56fe\u5f62\u6e32\u67d3\u6700\u57fa\u672c\u7684\u662f Pipeline\uff0c\u7c97\u7565\u5bf9\u5e94\u4e0a RenderPass \u6982\u5ff5\uff0cPipeline \u53c8\u5305\u542b\u4e86 Shader\u3001Binding\u3001Vertex\u3001Issue DrawCall \u7b49\u6982\u5ff5\u3002 \u5bf9\u5e94\u73b0\u4ee3\u56fe\u5f62 API \u7684\u8bbe\u8ba1\uff1a 1. CommandList 2. PSO 3. PSO Cache 4. Render Graph \u8ba1\u7b97\u4f9d\u8d56\uff08\u81ea\u4e3b\u63a7\u5236\uff09 \u6e32\u67d3\u7cfb\u7edf\u81ea\u8eab\u7684\u8bbe\u8ba1\uff1a \u5e73\u53f0\u65e0\u5173 \u7f13\u5b58 Permutation \u6d41\u7a0b\u4e00\u89c8 \u6e32\u67d3\u76f8\u5173\u7c7b \u6e32\u67d3\u4e3b\u6d41\u7a0b\u6982\u89c8\uff08\u6ce8\uff1a\u4f5c\u8005\u5c06\u6574\u4e2a\u7cfb\u7edf\u4ee3\u7801\u6d41\u7a0b\u6252\u4e0b\u6765\uff0c\u975e\u5e38\u76f4\u89c2\uff0c\u4e0d\u8fc7\u540c\u6837\u9700\u6ce8\u610f 4.22 \u7248\u672c\u91cd\u6784\u5bfc\u81f4\u7684\u53d8\u52a8\uff09 UE4 Render System Sheet\uff08UE4\u6e32\u67d3\u7cfb\u7edf\u6982\u89c8\uff09 Renderer \u6d41\u7a0b \u6e38\u620f\u7ebf\u7a0b\u3001\u6e32\u67d3\u7ebf\u7a0b \u6e32\u67d3\u7ebf\u7a0b\u4e3b\u8981\u6267\u884c\u5185\u5bb9\u5728 RenderingThreadMain \u4e2d\uff0c\u6e38\u620f\u7ebf\u7a0b\u501f\u52a9 EQUEUE_XX_COMMNAD \u7cfb\u5217\u5b8f\uff0c\u5411\u6e32\u67d3\u7ebf\u7a0b\u6dfb\u52a0\u6e32\u67d3\u4efb\u52a1\uff0c\u6e32\u67d3\u7ebf\u7a0b\u4e0d\u65ad\u63d0\u53d6\u4efb\u52a1\u3002 \u7f51\u683c\u4f53\u7ed8\u5236\u6d41\u7a0b \u540e\u5904\u7406\u6d41\u7a0b Pipeline State Object \u5305\u542b Pipeline \u6240\u9700\u6240\u6709\u72b6\u6001\uff0c\u4e0e CommandList \u914d\u5408\u4f7f\u7528 FRHICommandList \u6d88\u9664\u4e0a\u4e0b\u6587\uff0c\u6bcf\u4e2a CommandList \u5305\u542b\u5b8c\u6574\u7684\u6e32\u67d3\u6240\u9700\u72b6\u6001 RHI Command List definitions for queueing up & executing later. Render Graph \u8d44\u6e90\u63a7\u5236 UE4 4.22 \u7248\u672c\u4e2d\u6dfb\u52a0\u4e86 Render Graph \u63d0\u4f9b\u4e86\u9ad8\u5c42\u62bd\u8c61\uff0c\u7ba1\u7406 Pass\u3002 \u7ed3\u6784\u5316\u6e32\u67d3\u6d41\u7a0b\uff0c\u7528\u6765\u7ba1\u7406 Render Pass GPU Barrier\uff1a\u53ef\u4ee5\u4f7f\u7528 Render Graph \u8fd9\u7c7b\u6280\u672f\u6765\u81ea\u52a8\u53d1\u73b0 Dependency \u5e76\u4e14\u6765\u6700\u5927\u5316\u4f18\u5316 Barriers \u5176\u8bbe\u8ba1\u7406\u5ff5\u53c2\u8003\u5bd2\u971c\u5f15\u64ce\u4e2d\u7684 FrameGraph\u3002 [GDC17] FrameGraph Extensible Rendering Architecture in Frostbite \u73b0\u4ee3\u5316\u7684\u56fe\u5f62\u6e32\u67d3API\u62bd\u8c61\u5c42\u7684\u8bbe\u8ba1 \u901a\u8fc7\u8d44\u6e90\u4e4b\u95f4\u7684\u4f9d\u8d56\u5173\u7cfb\u5c06\u5b83\u4eec\u7ec4\u88c5\u6210Task Graph\u3002\u5728\u7f16\u8bd1Task Graph\u751f\u6210GPU\u6307\u4ee4\u7684\u65f6\u5019\uff0c\u7cfb\u7edf\u81ea\u52a8\u6dfb\u52a0\u6240\u6709\u5fc5\u8981\u7684\u540c\u6b65\u4fe1\u53f7\u3001\u4e34\u754c\u6bb5 Render Graph Reddit Discuss 1 It's a high level pipeline describing the different stages of rendering a frame. Similar to what Frostbite has in Battlefront games. Basically it should enable developers to customize rendering more easily. Render Graph Reddit Discuss 2 The render graph is similar to the FrameGraph in Frostbite engine, and its a way to connect different rendering passes, leaving the render-graph system to figure out the memory dependencies and the framebuffers. Once finished, it will allow for improved customization of the renderer, and even rendering plugins. \u4e3a\u540e\u7eed\u81ea\u5b9a\u4e49\u6e32\u67d3\u5668\u505a\u51c6\u5907\u3002 PostProcessing Graph Scene pass order and dependency system. Hint 2014 \u5e74\u63d0\u95ee \u8de8\u5e73\u53f0\uff0c\u8de8 API \u8c03\u7528 \u7531\u4e8eUE4 \u6e32\u67d3\u7cfb\u7edf\u9762\u5bf9\u7684\u662f\u8de8\u5e73\u53f0\u3001\u5c01\u88c5\u591a\u79cd\u56fe\u5f62 API\uff0c\u6e32\u67d3\u7cfb\u7edf\u5c42\u9762\u4e0a\u96be\u4ee5\u7edf\u4e00\u5b9e\u73b0\u6240\u6709\u7279\u6027\uff08\u96be\u4ee5\u5c06\u73b0\u4ee3\u56fe\u5f62 API \u7279\u6027\u76f4\u63a5\u8d4b\u4e88\u4f20\u7edf\u56fe\u5f62 API\uff09\u3002 \u6e38\u620f\u5f15\u64ce\u6253\u5305\u51fa\u7684\u6e38\u620f\u5e94\u7528\u9700\u8981\u5728\u591a\u5e73\u53f0\uff08PC\uff0c\u79fb\u52a8\u7aef\uff0cPS4\uff0cSwitch\uff0cXBOX\uff09\u4e0b\u4f7f\u7528\u3002 \u4e0d\u540c\u5e73\u53f0\u8ba1\u7b97\u80fd\u529b\u4e0d\u540c\uff0c\u4f7f\u7528\u56fe\u5f62\u63a5\u53e3\u4e0d\u540c\uff0c\u4e8e\u662f\u5206\u5316\u51fa\u4e86 Feature Level\u3001Renderer\u3001RHI \u7b49\u6982\u5ff5\u3002 Feature Level\uff1a\u6839\u636e\u56fe\u5f62 API \u7684\u7279\u6027\u5206\u51fa\u4e86 SM5\u3001SM4\u3001ES3_1\u3001ES_2 \u51e0\u79cd\u7279\u6027\u96c6\u5408 RHI\uff1a\u56fe\u5f62 API \u4e4b\u4e0a\u7684\u4e00\u4e2a\u8584\u5c42 \u4e0ePC\u5e73\u53f0\u4e0d\u540c\uff0c\u79fb\u52a8\u5e73\u53f0\u786c\u4ef6\u67b6\u6784\u4e0d\u540c\u3001\u6563\u70ed\u8981\u6c42\u9ad8\u3001\u8fd0\u7b97\u80fd\u529b\u4f4e\u3001\u652f\u6301\u56fe\u5f62 API \u4e0d\u540c\u3002 RHI \u8ba9\u6211\u4eec\u80fd\u5199\u5e73\u53f0\u65e0\u5173\u7684\u56fe\u5f62\u6e32\u67d3\u4ee3\u7801\uff0cRHI \u4e3a\u6211\u4eec\u81ea\u52a8\u5c06\u5176\u8f6c\u6362\u4e3a\u7279\u5b9a\u5e73\u53f0\u7279\u5b9aAPI\u7684\u4ee3\u7801\u3002\u610f\u5473\u7740RHI\u53caRHI\u4e4b\u4e0a\u7684\u6e32\u67d3\u7ebf\u7a0b\u627f\u62c5\u4e86\u8fd9\u90e8\u5206\u529f\u80fd\uff0c\u5c06\u4ee5\u4e0a\u63d0\u5230\u7684\u591a\u7ebf\u7a0b\u3001\u590d\u7528\u3001\u5e94\u7528\u7a0b\u5e8f\u4f18\u5316\u81ea\u884c\u5b9e\u73b0\u4e00\u904d\u3002 Feature Level \u51b3\u5b9a\u4e86\u4f7f\u7528\u54ea\u79cd Renderer \u8bbe\u5907\u663e\u5361\u652f\u6301\u7684\u56fe\u5f62 API \u51b3\u5b9a\u4e86 Feature Level \u9ad8\u5c42\u7ea7\u56fe\u5f62 API \u53ef\u4ee5\u4f7f\u7528\u4f4e Feature Level \u56fe\u5f62API\u662f\u6240\u6709\u6e38\u620f\u5f15\u64ce\u90fd\u5fc5\u987b\u6253\u4ea4\u9053\u7684\u90e8\u5206\uff0c\u6e38\u620f\u5f15\u64ce\u4f9d\u8d56\u5e73\u53f0\u7684\u56fe\u5f62API\u5b9e\u73b0\u6e38\u620f\u753b\u9762\u7684\u7ed8\u5236\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u6e38\u620f\u5f15\u64ce\u6240\u8fd0\u884c\u7684\u5e73\u53f0\u90fd\u4f1a\u5177\u6709\u72ec\u7acb\u7684\u56fe\u5f62\u5904\u7406\u5355\u5143\uff08GPU\uff09\u548c\u72ec\u7acb\u7684\u663e\u5b58\uff08VDRAM\uff09\uff0c\u8fd9\u90e8\u5206\u8d44\u6e90\u9700\u8981\u4f7f\u7528\u5e73\u53f0\u7279\u5b9a\u7684API\u53bb\u8bbf\u95ee\u3002\u4e0d\u540c\u7684\u5e73\u53f0\u63d0\u4f9b\u4e0d\u540c\u7684\u56fe\u5f62API\uff0c\u5982Windows\u5e73\u53f0\u4e3b\u6d41\u7684\u56fe\u5f62API\u5c31\u5305\u62ecDirect3D 11\u3001Direct3D 12\u3001OpenGL\u3001Vulkan\u7b49\u3001MacOS\u5e73\u53f0\u53ea\u6709Metal\u548cOpenGL\u4e24\u79cd\u3001Linux\u548cAndroid\u5e73\u53f0\u4f7f\u7528OpenGL\u548cVulkan\u3001iOS\u5e73\u53f0\u4f7f\u7528OpenGL\u548cMetal\u3001Nintendo 3DS\u4f7f\u7528OpenGL\u7684\u4e00\u4e2a\u5b50\u96c6\uff0c\u800cPlaystation 4\u3001Nintendo Switch\u7b49\u6e38\u620f\u4e3b\u673a\u5219\u63d0\u4f9b\u81ea\u5df1\u4e13\u6709\u7684\u56fe\u5f62API\u3002\u5f53\u6211\u4eec\u8bbe\u8ba1\u4e00\u6b3e\u8de8\u5e73\u53f0\u6e38\u620f\u5f15\u64ce\u7684\u65f6\u5019\uff0c\u6211\u4eec\u81ea\u7136\u4e0d\u5e0c\u671b\u5728\u6bcf\u4e2a\u5e73\u53f0\u4e0a\u90fd\u7528\u5b83\u63d0\u4f9b\u7684\u4e13\u6709API\u91cd\u65b0\u7f16\u5199\u4e00\u904d\u56fe\u5f62\u76f8\u5173\u7684\u7b97\u6cd5\uff0c\u56e0\u6b64\u6211\u4eec\u4f1a\u8bbe\u8ba1\u56fe\u5f62API\u62bd\u8c61\u5c42\uff0c\u5b83\u63d0\u4f9b\u4e86\u5927\u90e8\u5206\u5e73\u53f0\u5747\u5177\u6709\u7684\u56fe\u5f62\u76f8\u5173\u529f\u80fd\uff0c\u5e76\u4e14\u5728\u4e0d\u540c\u7684\u5e73\u53f0\u4e0a\u6620\u5c04\u5230\u4e0d\u540c\u7684\u4e13\u6709API\u4e0a\uff0c\u5373\u4f7f\u7528\u4e0d\u540c\u7684\u4e13\u6709\u56fe\u5f62API\u5b9e\u73b0\u3002 \u73b0\u4ee3\u5316\u7684\u56fe\u5f62\u6e32\u67d3API\u62bd\u8c61\u5c42\u7684\u8bbe\u8ba1 Name Description ES2 Feature level defined by the core capabilities of OpenGL ES2. ES3_1 Feature level defined by the core capabilities of OpenGL ES3.1 & Metal/Vulkan. SM4 Feature level defined by the capabilities of DX10 Shader Model 4. SM5 Feature level defined by the capabilities of DX11 Shader Model 5. The RHI's feature level indicates what level of support can be relied upon. Note: these are named after graphics API's like ES2 but a feature level can be used with a different API (eg ERHIFeatureLevel::ES2 on D3D11) As long as the graphics API supports all the features of the feature level (eg no ERHIFeatureLevel::SM5 on OpenGL ES2) ERHIFeatureLevel::Type unreal engine 4 \u56fe\u5f62API\u9009\u62e9\u903b\u8f91 Q\uff1aMacOS \u4e0a\u4f7f\u7528\u7684\u662f Metal API\uff0cFeature Level \u4e3a SM5\uff1f \u4ec0\u4e48\u673a\u5236\u51b3\u5b9a\u4e86\u6700\u7ec8\u9009\u5219\uff1f \u6750\u8d28\u3001\u9876\u70b9\u3001Pass \u4ee3\u7801\u89e3\u8026 \u6bcf\u6b21\u5728\u7f16\u8f91\u5668\u4e2d\u4fee\u6539\u3001\u6dfb\u52a0\u6750\u8d28\u7684\u65f6\u5019\uff0c\u6211\u4eec\u4f1a\u770b\u5230\u81f3\u5c11\u4e0a\u767e\u4e2a\u7740\u8272\u5668\u7684\u7f16\u8bd1\u3002\u4e0a\u56fe\u89e3\u91ca\u4e86\u5927\u91cf\u7740\u8272\u5668\u7684\u6765\u6e90\u2014\u2014Material \u591a\u79cd Vertex Factory \u7ec4\u5408\uff0c\u5e76\u4e0e\u7740\u8272\u5668\u4e2d\u4e0d\u540c\u7684\u5b8f\u5b9a\u4e49\u8fdb\u884c\u7ec4\u5408\uff0c\u5bfc\u81f4\u4e00\u6b21 Material \u4fee\u6539\u4ea7\u751f\u6210\u5927\u91cf Shader\uff0c\u7b49\u5f85\u7f16\u8bd1\u3002 \u6211\u4eec\u67e5\u770b UE4 \u6e90\u7801\u4e2d\u7684 Pass \u5bf9\u5e94\u7684 Shader \u6587\u4ef6\uff0c\u5176\u5934\u90e8\u5305\u542b\u4e86 #include \"/Engine/Generated/Material.ush\" #include \"/Engine/Generated/VertexFactory.ush\" \u8fd9\u4f7f\u5f97 RenderPass \u76f8\u5173\u7684\u4ee3\u7801\u4ece\u9876\u70b9\u7c7b\u578b\u3001\u6750\u8d28\u4e2d\u62bd\u79bb\u51fa\u6765\u3002 \u5e76\u4e14\uff0cPass \u7684 usf \u4ee3\u7801\u4e2d\u5305\u542b\u4e86\u4f17\u591a\u5b8f\u5b9a\u4e49\uff0c\u5982\uff1a DIRECTIONAL_LIGHT_CSM \u6bcf\u5f53\u6709\u65b0\u7684\u6750\u8d28\u6dfb\u52a0\u8fdb\u6e38\u620f\u4e2d\u65f6\uff0c\u5982 BasePassPixelShader.usf \u6587\u4ef6\u5c31\u9700\u8981\u5904\u7406 VertexFactory\u3001RenderPass \u53ca\u5176\u4e2d\u5b8f\u5b9a\u4e49\u7684\u7ec4\u5408\uff0c\u4ea7\u751f\u53ef\u7528\u7684 Shader\u3002 \u6bcf\u65b0\u6dfb\u4e00\u79cd\u6750\u8d28\uff0c\u7f16\u8f91\u5668\u8fd0\u884c\u65f6\u4e3a\u6211\u4eec\u81ea\u52a8\u7f16\u8bd1\u6240\u6709\u53ef\u80fd\u7684\u6392\u5217\uff08Permutaiton\uff09\uff0cFShaderCodeLibrary \u4e3a\u6211\u4eec\u63d0\u4f9b\u7f13\u5b58\u529f\u80fd\u3002 ShaderCache \u5728 4.22 \u4e2d\u88ab PSO Cache \u53d6\u4ee3\u3002 \u6765\u6e90\uff1a UE4 for Mobile | Developing High-end Mobile Games \u5229\u7528 PSO Cache \u6539\u5584\u8f7d\u5165\u65f6\u6027\u80fd PSO Cache \u662f 4.21 \u51fa\u73b0\u7684\uff0c\u7528\u4e8e\u66ff\u4ee3\u4ee5\u524d\u7684 FShaderCache\u3002 \u5b9e\u9645\u6e38\u620f\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u5e76\u4e0d\u4f1a\u7528\u5230\u7740\u8272\u5668\u7684\u6240\u6709 Permutation\uff0c\u53ea\u4f1a\u4ece\u4e2d\u6311\u9009\u51fa\u4e00\u4e2a\u5b50\u96c6\uff0cPSO Cache \u6b63\u4e3a\u7f13\u5b58\u4e86\u8fd9\u4e2a\u5b50\u96c6\uff0c\u6e38\u620f\u53d1\u5e03\u65f6\uff0c\u53ea\u9700\u5c06\u5c0f\u90e8\u5206\u7684\u7f13\u5b58\u6253\u5305\u5230\u5ba2\u6237\u7aef\u4e0a\u3002 PSO Cache \u6709\u6548\u51cf\u5c11\u6e38\u620f\u8f7d\u5165\u9636\u6bb5\u7740\u8272\u5668\u7f16\u8bd1\u7684\u65f6\u957f\u3002 \u4f8b\u5982\uff0c\u5728\u79fb\u52a8\u7aef\u5821\u5792\u4e4b\u591c\u4e2d\uff0c28,000 \u4e2a Shader Programs \u4e2d\uff0cProfile \u5230\u5176\u4e2d\u5e38\u7528 4,000 \u4e2a\u5e38\u7528\u9879\u3002 Note \u79fb\u52a8\u7aef\u4f7f\u7528\u8fc7\u7a0b\u4e2d\u4f1a\u9047\u5230 Shader \u5728\u663e\u5b58\u4e2d\u5360\u7528\u8fc7\u5927\uff0c\u89e3\u51b3\u65b9\u6848\u662f\u4f7f\u7528 LRU \u7b56\u7565\u3002 \u590d\u7528 Draw Command \u8d44\u6e90 4.22 \u4e2d\uff0c\u6e32\u67d3\u7cfb\u7edf\u5bf9Mesh\u7ed8\u5236\u90e8\u5206\u8fdb\u884c\u4e86\u5b8c\u5168\u7684\u91cd\u6784\uff0c\u91cd\u6784\u540e\u7684\u6d41\u7a0b\u53ef\u4ee5\u7f13\u5b58 DrawCommand\uff0c\u5176\u6b21 RHI \u53ef\u4ee5\u6839\u636e DrawCommand \u5b9e\u73b0 DrawCall Merge \u4f18\u5316\u3002 \u865a\u5e7b4\u6e32\u67d3\u7f16\u7a0b(Shader\u7bc7)\u3010\u7b2c\u5341\u5377\uff1a\u7ed8\u5236\u7b56\u7565\u3011 \u865a\u5e7b4\u6e32\u67d3\u7f16\u7a0b(Shader\u7bc7)\u3010\u7b2c\u5341\u4e8c\u5377\uff1aMeshDrawPipline\u3011 UE4.22\u6e32\u67d3\u6570\u636e\u7ba1\u7ebf\u91cd\u6784\u548c\u52a8\u6001instancing \u5176\u4ed6\u7279\u6027 RHI \u7ebf\u7a0b \u51cf\u5c11\u6e32\u67d3\u7ebf\u7a0b\u8017\u65f6 \u5408\u5e76 RenderPass \u51cf\u5c11\u79fb\u52a8\u7aef\u5f00\u9500 4.22 \u65b0\u7279\u6027\uff0c\u907f\u514d RenderTarget \u4e0d\u5fc5\u8981\u7684 Load-Store\u3002 \u53c2\u8003 Vulkan - \u9ad8\u6027\u80fd\u6e32\u67d3 Command Buffer\uff0c\u4e0d\u8fc7\u8fd9\u7bc7\u4e0d\u592a\u597d\u7406\u89e3 D3D11,12 \u5bf9\u6bd4 D3D12 \u8bbe\u8ba1\u7406\u5ff5 Unreal Open Day \u6280\u672fPPT for Mobile UE4 \u8d44\u6e90\u5e93\uff0c\u542b OpenDay\u7684\u8d44\u6599 ....","title":"UE4 \u6e32\u67d3\u7cfb\u7edf\u8bbe\u8ba1\u6d45\u6790 - 4.22 Release"},{"location":"ue4/final-chapter1/#ue4-422-release","text":"\u672c\u6587\u65e8\u5728\u5206\u6790 UE4 \u4e2d\u7684\u6e32\u67d3\u7cfb\u7edf\u8bbe\u8ba1\u7406\u5ff5\u3002 \u672c\u6587\u4ec5\u6d89\u53ca\u4e0e\u56fe\u5f62\u6e32\u67d3\u6700\u76f8\u5173\u7684\u7406\u5ff5\u3002 \u8fd8\u672a\u5b8c\u6210...\u5f85\u586b\u5751 \u6211\u4eec\u5c06\u4ece\u4f20\u7edf\u56fe\u5f62\u6e32\u67d3\u6d41\u7a0b\u5f00\u59cb\uff0c\u56de\u987e\u6e32\u67d3\u7684\u57fa\u672c\u6d41\u7a0b\uff1b\u4e4b\u540e\uff0c\u7531\u4e8e\u6e32\u67d3\u7cfb\u7edf\u4e2d\u7684\u4e00\u4e9b\u8bbe\u8ba1\u7406\u5ff5\u4e0e\u73b0\u4ee3\u56fe\u5f62 API \u7684\u5f3a\u5173\u8054\uff0c\u6211\u4eec\u5148\u4ece Vulkan\u3001D3D12 \u65b0\u7279\u6027\u5207\u5165\uff0c\u518d\u8bb2\u8ff0 UE4 \u4e2d\u8bbe\u8ba1\u4e0e\u8fd9\u4e9b\u65b0\u7279\u6027\u7684\u5bf9\u5e94\u5173\u7cfb\uff1b\u800c\u540e\u9488\u5bf9\u6e38\u620f\u5f15\u64ce\uff0c\u63a2\u8ba8\u6e32\u67d3\u7cfb\u7edf\u8fd8\u9700\u8981\u5f15\u5165\u4ec0\u4e48\u8bbe\u8ba1\uff1b\u6700\u7ec8\u6211\u4eec\u5c06\u4e32\u8d77\u8fd9\u4e9b\u6982\u5ff5\uff0c\u603b\u7ed3 UE4 \u6e32\u67d3\u7cfb\u7edf\u8bbe\u8ba1\u52a8\u673a\u53ca\u6a21\u5f0f\u3002 \u73b0\u6709\u7684\u4e0e\u6e32\u67d3\u76f8\u5173\u7684\u4f18\u8d28\u8d44\u6599\u96c6\u4e2d\u5728\u4ee5\u4e0b\u51e0\u4e2a\u65b9\u9762\uff1a \u5982\u4f55\u6dfb\u52a0 RenderPass \u5982\u4f55\u4e3a UE4 \u6dfb\u52a0\u5168\u5c40\u7740\u8272\u5668\uff08Global Shaders\uff09 \u3001 \u7f51\u683c\u4f53\u7ed8\u5236\u7ba1\u9053 | \u865a\u5e7b\u5f15\u64ce\u6587\u6863 \u5982\u4f55\u6dfb\u52a0 Shading Model\uff08\u6ce8\uff1a4.22 \u91cd\u6784\u7f51\u683c\u4f53\u7ed8\u5236\u540e\uff0c\u7cfb\u5217\u4e2d\u5173\u4e8e DrawPolicy \u7684\u63cf\u8ff0\u4e0d\u518d\u6709\u53c2\u8003\u4ef7\u503c\uff09 Unreal Engine 4 Rendering Part 1~6 \u57fa\u672c\u6982\u5ff5\u7684\u9610\u8ff0 \u56fe\u5f62\u7f16\u7a0b | \u865a\u5e7b\u5f15\u64ce\u6587\u6863 RenderPass \u6d41\u7a0b\u5206\u6790 \u6e32\u67d3\u7cfb\u7edf\u6982\u89c8\uff08\u6ce8\uff1a\u4f5c\u8005\u5c06\u6574\u4e2a\u7cfb\u7edf\u4ee3\u7801\u6d41\u7a0b\u6252\u4e0b\u6765\uff0c\u975e\u5e38\u76f4\u89c2\uff0c\u4e0d\u8fc7\u540c\u6837\u9700\u6ce8\u610f 4.22 \u7248\u672c\u91cd\u6784\u5bfc\u81f4\u7684\u53d8\u52a8\uff09 UE4 Render System Sheet\uff08UE4\u6e32\u67d3\u7cfb\u7edf\u6982\u89c8\uff09 \u4ed6\u4eec\u805a\u7126\u4e8e\u5176\u4e2d\u67d0\u4e00\u4e2a\u5b50\u529f\u80fd\uff0c\u5728\u6e32\u67d3\u7cfb\u7edf\u8bbe\u8ba1\u52a8\u673a\u65b9\u9762\u7684\u8ba8\u8bba\u8f83\u5c11\u3002 \u63a5\u4e0b\u6765\u5c06\u4ece\u6e32\u67d3\u7cfb\u7edf\u6f14\u5316\u3001\u6a21\u5f0f\u3001\u8981\u7d20\u63cf\u8ff0\u5f15\u64ce\u6e32\u67d3\u5b50\u7cfb\u7edf\u8bbe\u8ba1\u601d\u60f3\u3002","title":"UE4 \u6e32\u67d3\u7cfb\u7edf\u8bbe\u8ba1\u6d45\u6790 - 4.22 Release"},{"location":"ue4/final-chapter1/#_1","text":"\u4ee5\u4e0b\u662f UE4 \u6e32\u67d3\u7cfb\u7edf\u4e2d\u4e0e\u4e0a\u8ff0\u6d41\u7a0b\u5bf9\u5e94\u7684\u6982\u5ff5\uff1a RenderPass\uff1aBasePass\u3001Decal\u3001Transparency\u3001PostProcess... RenderState\uff1aSetDepthStencilState\u3001SetBlendState... Shader\uff1aVertex Shader\u3001Geometry Shader\u3001Pixel Shader... Material\uff1aTexture\u3001Uniform Geometry/Object State\uff1aVertex Buffers\u3001Index Buffers DrawCall\uff1aRHI \u4e0a\u56fe\u662f\u4e00\u6bb5\u6bd4\u8f83\u5178\u578b\u7684\u56fe\u5f62\u5e94\u7528\u7a0b\u5e8f\u4e2d\u7684\u4e3b\u5faa\u73af\u4f2a\u4ee3\u7801\u3002UE4 \u4f7f\u7528\u7684\u4e5f\u662f\u8fd9\u6837\u7684\u6d41\u7a0b\uff0c\u5982\uff1aUE4 FDeferredShadingSceneRenderer::Render \u4e2d\uff0c\u8c03\u7528\u4e86 RenderBasePass\u3001RenderShadowDepthMaps\u3001RenderVelocities \u7b49 RenderPass\uff1b\u800c BasePass \u6e32\u67d3\u65f6\uff0c\u9996\u5148\u8bbe\u5b9a RenderState\uff1b\u518d\u8bbe\u5b9a BasePassVertexShader\u3001BasePassPixelShader\uff1b\u7136\u540e\u5bf9 Shader \u53c2\u6570\u8fdb\u884c\u7ed1\u5b9a\uff0c\u542b\u5404\u79cd\u6750\u8d28\u3001Uniform \u7684\u7ed1\u5b9a\uff1b\u4e4b\u540e\u901a\u8fc7\u7ed1\u5b9a Index Buffer\u3001Vertex Buffer\uff0c\u8bbe\u5b9a GPU \u6e32\u67d3\u9876\u70b9\u6570\u636e\uff1b\u6700\u7ec8\u901a\u8fc7 RHI \u95f4\u63a5\u8c03\u7528 Vulkan/D3D/OGL\uff0c\u63d0\u4ea4\u7ed8\u5236\u547d\u4ee4\u3002","title":"\u57fa\u672c\u56fe\u5f62\u6e32\u67d3\u6d41\u7a0b"},{"location":"ue4/final-chapter1/#apiue4","text":"UE4 \u6e32\u67d3\u7cfb\u7edf\u4e00\u65b9\u9762\u4f1a\u968f\u7740\u65b0\u56fe\u5f62 API \u7684\u51fa\u73b0\uff0c\u5728\u7cfb\u7edf\u5e95\u5c42\u5c01\u88c5\u6210\u56fe\u5f62\u63a5\u53e3\u65e0\u5173\u7684 API\uff0c\u53e6\u4e00\u65b9\u9762\u4f1a\u501f\u9274\u73b0\u4ee3\u56fe\u5f62 API \u8bbe\u8ba1\u7406\u5ff5\uff08\u5982\uff0c\u4e3a\u591a\u7ebf\u7a0b\u8bbe\u8ba1\u7684\u7ec4\u4ef6\uff09\uff0c\u5c06\u5176\u878d\u5165\u81ea\u8eab\u7684\u8bbe\u8ba1\u54f2\u5b66\u4e2d\u3002 \u672c\u7ae0\u8282\u6765\u56de\u987e\u73b0\u4ee3\u56fe\u5f62\u5b66 API \u4e2d\u7684\u51e0\u4e2a\u6982\u5ff5\u3002\u8fd9\u4e9b\u6982\u5ff5\u88ab UE4 \u5ef6\u7528\uff0c\u6210\u4e3a\u5e73\u53f0\u65e0\u5173\u7684\u6e32\u67d3\u5b50\u7cfb\u7edf\u7684\u4e00\u90e8\u5206\uff0c\u5bf9\u5b50\u7cfb\u7edf\u5c01\u88c5\u7684\u4f17\u591a API \u63d0\u4f9b\u4e00\u81f4\u7684\u529f\u80fd\uff0c\u7528\u4e8e\u51cf\u8f7b\u6e38\u620f\u5ba2\u6237\u7aef CPU \u8d1f\u62c5\u3002","title":"\u73b0\u4ee3\u56fe\u5f62 API\uff1aUE4 \u6e32\u67d3\u7cfb\u7edf\u8bbe\u8ba1\u6765\u6e90\u4e4b\u4e00"},{"location":"ue4/final-chapter1/#api-cpu","text":"\u73b0\u4ee3\u56fe\u5f62 API \u6e32\u67d3\u6d41\u7a0b\u4e0a\u4e0e\u57fa\u672c\u56fe\u5f62\u7ba1\u7ebf\u5e76\u65e0\u4e8c\u81f4\uff0c\u4ecd\u7136\u662f RenderPass\u3001\u8bbe\u7f6e RenderState\u3001\u7740\u8272\u5668\u3001\u7ed1\u5b9a\u6570\u636e\u3001\u8c03\u7528DrawCall\u3002 \u73b0\u4ee3\u56fe\u5f62 API \u8bbe\u8ba1\u6838\u5fc3\u5728\u4e8e\u964d\u4f4e CPU \u5f00\u9500\uff0c\u6700\u5927\u9650\u5ea6\u5229\u7528 CPU \u8d44\u6e90\uff08\u591a\u6838\u5fc3\uff09\uff0c\u53d7\u76ca\u7684\u5e94\u7528\u7c7b\u578b\u4e3a CPU \u7aef\u80fd\u591f\u591a\u7ebf\u7a0b\u5e76\u884c\u5316\u7684\u5e94\u7528\u3002 \u5176\u4e2d\u6700\u91cd\u8981\u7684\u601d\u60f3\u5982\u4e0b\uff1a \u66f4\u4f9d\u8d56\u4e8e\u7a0b\u5e8f\u81ea\u8eab\u7684\u8ba4\u77e5\uff0c\u8ba9\u7a0b\u5e8f\u6709\u66f4\u591a\u7684\u6743\u9650\u548c\u8d23\u4efb\u81ea\u4e3b\u7684\u5904\u7406\u8c03\u5ea6\u548c\u4f18\u5316\uff0c\u800c\u4e0d\u4f9d\u8d56\u4e8e\u9a71\u52a8\u5c1d\u8bd5\u5728\u540e\u53f0\u7684\u4f18\u5316 \u591a\u7ebf\u7a0b\u53cb\u597d\uff0c\u8ba9\u7a0b\u5e8f\u5c3d\u53ef\u80fd\u7684\u5229\u7528\u6240\u6709CPU\u8ba1\u7b97\u8d44\u6e90\u4ece\u800c\u63d0\u9ad8\u6027\u80fd \u5f3a\u8c03\u590d\u7528\uff0c\u4ece\u800c\u51cf\u5c11\u5f00\u9500 UE4 \u6e32\u67d3\u7cfb\u7edf\u4e2d\u5927\u91cf\u91c7\u7528\u73b0\u4ee3\u56fe\u5f62 API \u7406\u5ff5\uff0c\u5728\u540e\u4e00\u7ae0\u8282\u5c06\u4f1a\u63d0\u5230\u7684 UE4 \u4e2d\u7684 CommandList\u3001PSO\u3001PSO Cache \u7b49\u4f17\u591a\u7ec4\u4ef6\u90fd\u6765\u6e90\u4e8e\u6b64\uff0c\u5373 UE4 \u7684 RHI \u62bd\u8c61\u5c42\u7ea7\u66f4\u504f\u5411\u73b0\u4ee3\u56fe\u5f62 API\uff0c\u540c\u65f6\uff0cRHI \u5185\u90e8\u5b8c\u6210\u4e86\u5404\u7c7b\u56fe\u5f62 API \u7684\u9002\u914d\u5de5\u4f5c\u3002 \u6211\u4eec\u5c06\u91cd\u70b9\u63a2\u8ba8 Vulkan \u4e2d\u7684 Command Buffer\u3001PSO\uff0c\u4ed6\u4eec\u5728\u5176\u4ed6\u73b0\u4ee3\u56fe\u5f62 API \u4e2d\u4e5f\u80fd\u627e\u5230\u5bf9\u5e94\u6982\u5ff5\u3002","title":"\u73b0\u4ee3\u56fe\u5f62 API \u4e13\u6ce8\u4e8e CPU \u8d44\u6e90\u5229\u7528\u7387\u4e0a\u7684\u6539\u8fdb"},{"location":"ue4/final-chapter1/#command-buffer-commands","text":"Command Buffer \u5305\u542b\u4e86\u4e00\u6b21 Draw \u9700\u8981\u7684\u6240\u6709\u72b6\u6001\uff08State\u3001Binding\u3001Draw\uff09","title":"Command Buffer \u7528\u4e8e\u8bb0\u5f55 Commands"},{"location":"ue4/final-chapter1/#_2","text":"\u73b0\u4ee3\u56fe\u5f62 API \u5c06\u5e94\u7528\u540c\u6b65\u63a7\u5236\u6743\u4ea4\u8fd8\u5230\u5f00\u53d1\u8005\u624b\u4e0a\uff0cUE4 \u4e2d\u9ad8\u5c42\u7ea7\u6982\u5ff5 RenderGraph \u4e3a\u56fe\u5f62\u5f00\u53d1\u8005\u81ea\u52a8\u8ba1\u7b97\u4f9d\u8d56\u3001\u63d2\u5165 Fence\u3002 \u5bf9\u4e8e\u4f20\u7edfAPI\uff0cCommand Buffer \u548c Driver \u6982\u5ff5\u7ed1\u5b9a\u5728\u4e00\u8d77\uff0c\u5bf9\u4e8e D3D12\uff0cCommand Buffer \u72ec\u7acb\u4e8e Driver \u5c42\u7ea7\uff0c\u63d0\u4f9b\u7f13\u5b58\u547d\u4ee4\u7684\u529f\u80fd\uff0c\u5b83\u80fd\u591f\u5728\u9002\u5f53\u7684\u65f6\u673a\u5c06\u7f13\u5b58\u7684\u547d\u4ee4\u4e00\u8d77\u53d1\u9001\u7ed9 GPU\uff0c\u7f13\u5b58\u80fd\u51cf\u5c11\u8c03\u7528 Driver \u5e26\u6765\u7684 CPU \u7531\u7528\u6237\u6001\u8f6c\u6362\u5230\u5185\u6838\u6001\u5e26\u6765\u7684\u6027\u80fd\u5f00\u9500 \u611f\u5174\u8da3\u770b[\u6587\u5200\u79cb\u4e8c\u5173\u4e8e Vulkan \u7406\u5ff5]\u7684\u6587\u7ae0\uff0c\u672c\u8282\u662f\u7b80\u77ed\u8f6c\u8ff0\u3002","title":"\u5e94\u7528\u7a0b\u5e8f\u63a7\u5236\u4f18\u5316"},{"location":"ue4/final-chapter1/#ue4","text":"Note \u6e32\u67d3\u7cfb\u7edf\u4ee3\u7801\u4e3b\u8981\u653e\u5728 Source\\Runtime\\RenderCore\u3001Source\\Runtime\\Renderer\u3001Source\\Runtime\\RHI \u6587\u4ef6\u5939\u4e0b\u3002 \u672c\u7ae0\u5c06\u8bb2\u8ff0 UE4 \u6e32\u67d3\u5b50\u7cfb\u7edf\u7684\u8bbe\u8ba1\u7406\u5ff5\u3002\u5176\u4e2d\uff0c\u65e2\u5305\u542b\u4e0a\u4e00\u7ae0\u8282\u4e2d\u63d0\u5230\u7684\u73b0\u4ee3\u56fe\u5f62 API \u7684\u8bbe\u8ba1\uff0c\u4e5f\u5305\u542b\u4e86\u4f5c\u4e3a\u6e38\u620f\u5f15\u64ce\u5b50\u7cfb\u7edf\u9700\u8981\u8003\u8651\u5230\u7684\u8bbe\u8ba1\u3002 \u63a5\u4e0b\u6765\u5206\u522b\u8bb2\u8ff0\u4ee5\u4e0b\u51e0\u4e2a\u6982\u5ff5 \u9996\u5148\u56de\u987e\u6e32\u67d3\u7684\u6574\u4f53\u6d41\u7a0b\uff1a \u9996\u5148\u770b\u57fa\u672c\u6570\u636e\u7ed3\u6784\uff0c\u7f51\u683c\u4f53\u8868\u793a\u3001\u89c6\u89d2\u548c\u6444\u50cf\u673a\u3001\u6750\u8d28\u3001\u6570\u636e\uff08\u51e0\u4f55\u6570\u636e\u3001Uniform \u548c Parameter\uff09 \u8ddf\u8e2a\u7f51\u683c\u4f53\u7ed8\u5236\u6d41\u7a0b \u8ddf\u8e2a Renderer \u5728\u8fd9\u4e9b\u6d41\u7a0b\u80cc\u540e\uff0c\u4f17\u591a\u57fa\u7840\u7c7b\u5171\u540c\u4e3a\u6211\u4eec\u63d0\u4f9b\u7cfb\u7edf\u57fa\u672c\u529f\u80fd\u3002 \u6211\u4eec\u5c06\u5265\u79bb\u6389\u6e38\u620f\u5f15\u64ce\u6e32\u67d3\u5b50\u7cfb\u7edf\uff08\u4e1a\u52a1\u903b\u8f91\uff09\u8fd9\u4e00\u6807\u7b7e\uff0c\u805a\u7126\u4e8e\u6e32\u67d3\u7cfb\u7edf\u5728\u56fe\u5f62\u6e32\u67d3\u65b9\u9762\u8bbe\u8ba1\u52a8\u673a\uff1a \u5bf9\u4e8e\u56fe\u5f62\u6e32\u67d3\u6700\u57fa\u672c\u7684\u662f Pipeline\uff0c\u7c97\u7565\u5bf9\u5e94\u4e0a RenderPass \u6982\u5ff5\uff0cPipeline \u53c8\u5305\u542b\u4e86 Shader\u3001Binding\u3001Vertex\u3001Issue DrawCall \u7b49\u6982\u5ff5\u3002 \u5bf9\u5e94\u73b0\u4ee3\u56fe\u5f62 API \u7684\u8bbe\u8ba1\uff1a 1. CommandList 2. PSO 3. PSO Cache 4. Render Graph \u8ba1\u7b97\u4f9d\u8d56\uff08\u81ea\u4e3b\u63a7\u5236\uff09 \u6e32\u67d3\u7cfb\u7edf\u81ea\u8eab\u7684\u8bbe\u8ba1\uff1a \u5e73\u53f0\u65e0\u5173 \u7f13\u5b58 Permutation","title":"UE4 \u6e32\u67d3\u5b50\u7cfb\u7edf\u8bbe\u8ba1\u7406\u5ff5"},{"location":"ue4/final-chapter1/#_3","text":"","title":"\u6d41\u7a0b\u4e00\u89c8"},{"location":"ue4/final-chapter1/#_4","text":"\u6e32\u67d3\u4e3b\u6d41\u7a0b\u6982\u89c8\uff08\u6ce8\uff1a\u4f5c\u8005\u5c06\u6574\u4e2a\u7cfb\u7edf\u4ee3\u7801\u6d41\u7a0b\u6252\u4e0b\u6765\uff0c\u975e\u5e38\u76f4\u89c2\uff0c\u4e0d\u8fc7\u540c\u6837\u9700\u6ce8\u610f 4.22 \u7248\u672c\u91cd\u6784\u5bfc\u81f4\u7684\u53d8\u52a8\uff09 UE4 Render System Sheet\uff08UE4\u6e32\u67d3\u7cfb\u7edf\u6982\u89c8\uff09","title":"\u6e32\u67d3\u76f8\u5173\u7c7b"},{"location":"ue4/final-chapter1/#renderer","text":"","title":"Renderer \u6d41\u7a0b"},{"location":"ue4/final-chapter1/#_5","text":"\u6e32\u67d3\u7ebf\u7a0b\u4e3b\u8981\u6267\u884c\u5185\u5bb9\u5728 RenderingThreadMain \u4e2d\uff0c\u6e38\u620f\u7ebf\u7a0b\u501f\u52a9 EQUEUE_XX_COMMNAD \u7cfb\u5217\u5b8f\uff0c\u5411\u6e32\u67d3\u7ebf\u7a0b\u6dfb\u52a0\u6e32\u67d3\u4efb\u52a1\uff0c\u6e32\u67d3\u7ebf\u7a0b\u4e0d\u65ad\u63d0\u53d6\u4efb\u52a1\u3002","title":"\u6e38\u620f\u7ebf\u7a0b\u3001\u6e32\u67d3\u7ebf\u7a0b"},{"location":"ue4/final-chapter1/#_6","text":"","title":"\u7f51\u683c\u4f53\u7ed8\u5236\u6d41\u7a0b"},{"location":"ue4/final-chapter1/#_7","text":"","title":"\u540e\u5904\u7406\u6d41\u7a0b"},{"location":"ue4/final-chapter1/#pipeline-state-object","text":"\u5305\u542b Pipeline \u6240\u9700\u6240\u6709\u72b6\u6001\uff0c\u4e0e CommandList \u914d\u5408\u4f7f\u7528","title":"Pipeline State Object"},{"location":"ue4/final-chapter1/#frhicommandlist","text":"\u6d88\u9664\u4e0a\u4e0b\u6587\uff0c\u6bcf\u4e2a CommandList \u5305\u542b\u5b8c\u6574\u7684\u6e32\u67d3\u6240\u9700\u72b6\u6001 RHI Command List definitions for queueing up & executing later.","title":"FRHICommandList"},{"location":"ue4/final-chapter1/#render-graph","text":"UE4 4.22 \u7248\u672c\u4e2d\u6dfb\u52a0\u4e86 Render Graph \u63d0\u4f9b\u4e86\u9ad8\u5c42\u62bd\u8c61\uff0c\u7ba1\u7406 Pass\u3002 \u7ed3\u6784\u5316\u6e32\u67d3\u6d41\u7a0b\uff0c\u7528\u6765\u7ba1\u7406 Render Pass GPU Barrier\uff1a\u53ef\u4ee5\u4f7f\u7528 Render Graph \u8fd9\u7c7b\u6280\u672f\u6765\u81ea\u52a8\u53d1\u73b0 Dependency \u5e76\u4e14\u6765\u6700\u5927\u5316\u4f18\u5316 Barriers \u5176\u8bbe\u8ba1\u7406\u5ff5\u53c2\u8003\u5bd2\u971c\u5f15\u64ce\u4e2d\u7684 FrameGraph\u3002 [GDC17] FrameGraph Extensible Rendering Architecture in Frostbite \u73b0\u4ee3\u5316\u7684\u56fe\u5f62\u6e32\u67d3API\u62bd\u8c61\u5c42\u7684\u8bbe\u8ba1 \u901a\u8fc7\u8d44\u6e90\u4e4b\u95f4\u7684\u4f9d\u8d56\u5173\u7cfb\u5c06\u5b83\u4eec\u7ec4\u88c5\u6210Task Graph\u3002\u5728\u7f16\u8bd1Task Graph\u751f\u6210GPU\u6307\u4ee4\u7684\u65f6\u5019\uff0c\u7cfb\u7edf\u81ea\u52a8\u6dfb\u52a0\u6240\u6709\u5fc5\u8981\u7684\u540c\u6b65\u4fe1\u53f7\u3001\u4e34\u754c\u6bb5 Render Graph Reddit Discuss 1 It's a high level pipeline describing the different stages of rendering a frame. Similar to what Frostbite has in Battlefront games. Basically it should enable developers to customize rendering more easily. Render Graph Reddit Discuss 2 The render graph is similar to the FrameGraph in Frostbite engine, and its a way to connect different rendering passes, leaving the render-graph system to figure out the memory dependencies and the framebuffers. Once finished, it will allow for improved customization of the renderer, and even rendering plugins. \u4e3a\u540e\u7eed\u81ea\u5b9a\u4e49\u6e32\u67d3\u5668\u505a\u51c6\u5907\u3002","title":"Render Graph \u8d44\u6e90\u63a7\u5236"},{"location":"ue4/final-chapter1/#postprocessing-graph","text":"Scene pass order and dependency system. Hint 2014 \u5e74\u63d0\u95ee","title":"PostProcessing Graph"},{"location":"ue4/final-chapter1/#api","text":"\u7531\u4e8eUE4 \u6e32\u67d3\u7cfb\u7edf\u9762\u5bf9\u7684\u662f\u8de8\u5e73\u53f0\u3001\u5c01\u88c5\u591a\u79cd\u56fe\u5f62 API\uff0c\u6e32\u67d3\u7cfb\u7edf\u5c42\u9762\u4e0a\u96be\u4ee5\u7edf\u4e00\u5b9e\u73b0\u6240\u6709\u7279\u6027\uff08\u96be\u4ee5\u5c06\u73b0\u4ee3\u56fe\u5f62 API \u7279\u6027\u76f4\u63a5\u8d4b\u4e88\u4f20\u7edf\u56fe\u5f62 API\uff09\u3002 \u6e38\u620f\u5f15\u64ce\u6253\u5305\u51fa\u7684\u6e38\u620f\u5e94\u7528\u9700\u8981\u5728\u591a\u5e73\u53f0\uff08PC\uff0c\u79fb\u52a8\u7aef\uff0cPS4\uff0cSwitch\uff0cXBOX\uff09\u4e0b\u4f7f\u7528\u3002 \u4e0d\u540c\u5e73\u53f0\u8ba1\u7b97\u80fd\u529b\u4e0d\u540c\uff0c\u4f7f\u7528\u56fe\u5f62\u63a5\u53e3\u4e0d\u540c\uff0c\u4e8e\u662f\u5206\u5316\u51fa\u4e86 Feature Level\u3001Renderer\u3001RHI \u7b49\u6982\u5ff5\u3002 Feature Level\uff1a\u6839\u636e\u56fe\u5f62 API \u7684\u7279\u6027\u5206\u51fa\u4e86 SM5\u3001SM4\u3001ES3_1\u3001ES_2 \u51e0\u79cd\u7279\u6027\u96c6\u5408 RHI\uff1a\u56fe\u5f62 API \u4e4b\u4e0a\u7684\u4e00\u4e2a\u8584\u5c42 \u4e0ePC\u5e73\u53f0\u4e0d\u540c\uff0c\u79fb\u52a8\u5e73\u53f0\u786c\u4ef6\u67b6\u6784\u4e0d\u540c\u3001\u6563\u70ed\u8981\u6c42\u9ad8\u3001\u8fd0\u7b97\u80fd\u529b\u4f4e\u3001\u652f\u6301\u56fe\u5f62 API \u4e0d\u540c\u3002 RHI \u8ba9\u6211\u4eec\u80fd\u5199\u5e73\u53f0\u65e0\u5173\u7684\u56fe\u5f62\u6e32\u67d3\u4ee3\u7801\uff0cRHI \u4e3a\u6211\u4eec\u81ea\u52a8\u5c06\u5176\u8f6c\u6362\u4e3a\u7279\u5b9a\u5e73\u53f0\u7279\u5b9aAPI\u7684\u4ee3\u7801\u3002\u610f\u5473\u7740RHI\u53caRHI\u4e4b\u4e0a\u7684\u6e32\u67d3\u7ebf\u7a0b\u627f\u62c5\u4e86\u8fd9\u90e8\u5206\u529f\u80fd\uff0c\u5c06\u4ee5\u4e0a\u63d0\u5230\u7684\u591a\u7ebf\u7a0b\u3001\u590d\u7528\u3001\u5e94\u7528\u7a0b\u5e8f\u4f18\u5316\u81ea\u884c\u5b9e\u73b0\u4e00\u904d\u3002 Feature Level \u51b3\u5b9a\u4e86\u4f7f\u7528\u54ea\u79cd Renderer \u8bbe\u5907\u663e\u5361\u652f\u6301\u7684\u56fe\u5f62 API \u51b3\u5b9a\u4e86 Feature Level \u9ad8\u5c42\u7ea7\u56fe\u5f62 API \u53ef\u4ee5\u4f7f\u7528\u4f4e Feature Level \u56fe\u5f62API\u662f\u6240\u6709\u6e38\u620f\u5f15\u64ce\u90fd\u5fc5\u987b\u6253\u4ea4\u9053\u7684\u90e8\u5206\uff0c\u6e38\u620f\u5f15\u64ce\u4f9d\u8d56\u5e73\u53f0\u7684\u56fe\u5f62API\u5b9e\u73b0\u6e38\u620f\u753b\u9762\u7684\u7ed8\u5236\u3002\u4e00\u822c\u6765\u8bf4\uff0c\u6e38\u620f\u5f15\u64ce\u6240\u8fd0\u884c\u7684\u5e73\u53f0\u90fd\u4f1a\u5177\u6709\u72ec\u7acb\u7684\u56fe\u5f62\u5904\u7406\u5355\u5143\uff08GPU\uff09\u548c\u72ec\u7acb\u7684\u663e\u5b58\uff08VDRAM\uff09\uff0c\u8fd9\u90e8\u5206\u8d44\u6e90\u9700\u8981\u4f7f\u7528\u5e73\u53f0\u7279\u5b9a\u7684API\u53bb\u8bbf\u95ee\u3002\u4e0d\u540c\u7684\u5e73\u53f0\u63d0\u4f9b\u4e0d\u540c\u7684\u56fe\u5f62API\uff0c\u5982Windows\u5e73\u53f0\u4e3b\u6d41\u7684\u56fe\u5f62API\u5c31\u5305\u62ecDirect3D 11\u3001Direct3D 12\u3001OpenGL\u3001Vulkan\u7b49\u3001MacOS\u5e73\u53f0\u53ea\u6709Metal\u548cOpenGL\u4e24\u79cd\u3001Linux\u548cAndroid\u5e73\u53f0\u4f7f\u7528OpenGL\u548cVulkan\u3001iOS\u5e73\u53f0\u4f7f\u7528OpenGL\u548cMetal\u3001Nintendo 3DS\u4f7f\u7528OpenGL\u7684\u4e00\u4e2a\u5b50\u96c6\uff0c\u800cPlaystation 4\u3001Nintendo Switch\u7b49\u6e38\u620f\u4e3b\u673a\u5219\u63d0\u4f9b\u81ea\u5df1\u4e13\u6709\u7684\u56fe\u5f62API\u3002\u5f53\u6211\u4eec\u8bbe\u8ba1\u4e00\u6b3e\u8de8\u5e73\u53f0\u6e38\u620f\u5f15\u64ce\u7684\u65f6\u5019\uff0c\u6211\u4eec\u81ea\u7136\u4e0d\u5e0c\u671b\u5728\u6bcf\u4e2a\u5e73\u53f0\u4e0a\u90fd\u7528\u5b83\u63d0\u4f9b\u7684\u4e13\u6709API\u91cd\u65b0\u7f16\u5199\u4e00\u904d\u56fe\u5f62\u76f8\u5173\u7684\u7b97\u6cd5\uff0c\u56e0\u6b64\u6211\u4eec\u4f1a\u8bbe\u8ba1\u56fe\u5f62API\u62bd\u8c61\u5c42\uff0c\u5b83\u63d0\u4f9b\u4e86\u5927\u90e8\u5206\u5e73\u53f0\u5747\u5177\u6709\u7684\u56fe\u5f62\u76f8\u5173\u529f\u80fd\uff0c\u5e76\u4e14\u5728\u4e0d\u540c\u7684\u5e73\u53f0\u4e0a\u6620\u5c04\u5230\u4e0d\u540c\u7684\u4e13\u6709API\u4e0a\uff0c\u5373\u4f7f\u7528\u4e0d\u540c\u7684\u4e13\u6709\u56fe\u5f62API\u5b9e\u73b0\u3002 \u73b0\u4ee3\u5316\u7684\u56fe\u5f62\u6e32\u67d3API\u62bd\u8c61\u5c42\u7684\u8bbe\u8ba1 Name Description ES2 Feature level defined by the core capabilities of OpenGL ES2. ES3_1 Feature level defined by the core capabilities of OpenGL ES3.1 & Metal/Vulkan. SM4 Feature level defined by the capabilities of DX10 Shader Model 4. SM5 Feature level defined by the capabilities of DX11 Shader Model 5. The RHI's feature level indicates what level of support can be relied upon. Note: these are named after graphics API's like ES2 but a feature level can be used with a different API (eg ERHIFeatureLevel::ES2 on D3D11) As long as the graphics API supports all the features of the feature level (eg no ERHIFeatureLevel::SM5 on OpenGL ES2) ERHIFeatureLevel::Type unreal engine 4 \u56fe\u5f62API\u9009\u62e9\u903b\u8f91 Q\uff1aMacOS \u4e0a\u4f7f\u7528\u7684\u662f Metal API\uff0cFeature Level \u4e3a SM5\uff1f \u4ec0\u4e48\u673a\u5236\u51b3\u5b9a\u4e86\u6700\u7ec8\u9009\u5219\uff1f","title":"\u8de8\u5e73\u53f0\uff0c\u8de8 API \u8c03\u7528"},{"location":"ue4/final-chapter1/#pass","text":"\u6bcf\u6b21\u5728\u7f16\u8f91\u5668\u4e2d\u4fee\u6539\u3001\u6dfb\u52a0\u6750\u8d28\u7684\u65f6\u5019\uff0c\u6211\u4eec\u4f1a\u770b\u5230\u81f3\u5c11\u4e0a\u767e\u4e2a\u7740\u8272\u5668\u7684\u7f16\u8bd1\u3002\u4e0a\u56fe\u89e3\u91ca\u4e86\u5927\u91cf\u7740\u8272\u5668\u7684\u6765\u6e90\u2014\u2014Material \u591a\u79cd Vertex Factory \u7ec4\u5408\uff0c\u5e76\u4e0e\u7740\u8272\u5668\u4e2d\u4e0d\u540c\u7684\u5b8f\u5b9a\u4e49\u8fdb\u884c\u7ec4\u5408\uff0c\u5bfc\u81f4\u4e00\u6b21 Material \u4fee\u6539\u4ea7\u751f\u6210\u5927\u91cf Shader\uff0c\u7b49\u5f85\u7f16\u8bd1\u3002 \u6211\u4eec\u67e5\u770b UE4 \u6e90\u7801\u4e2d\u7684 Pass \u5bf9\u5e94\u7684 Shader \u6587\u4ef6\uff0c\u5176\u5934\u90e8\u5305\u542b\u4e86 #include \"/Engine/Generated/Material.ush\" #include \"/Engine/Generated/VertexFactory.ush\" \u8fd9\u4f7f\u5f97 RenderPass \u76f8\u5173\u7684\u4ee3\u7801\u4ece\u9876\u70b9\u7c7b\u578b\u3001\u6750\u8d28\u4e2d\u62bd\u79bb\u51fa\u6765\u3002 \u5e76\u4e14\uff0cPass \u7684 usf \u4ee3\u7801\u4e2d\u5305\u542b\u4e86\u4f17\u591a\u5b8f\u5b9a\u4e49\uff0c\u5982\uff1a DIRECTIONAL_LIGHT_CSM \u6bcf\u5f53\u6709\u65b0\u7684\u6750\u8d28\u6dfb\u52a0\u8fdb\u6e38\u620f\u4e2d\u65f6\uff0c\u5982 BasePassPixelShader.usf \u6587\u4ef6\u5c31\u9700\u8981\u5904\u7406 VertexFactory\u3001RenderPass \u53ca\u5176\u4e2d\u5b8f\u5b9a\u4e49\u7684\u7ec4\u5408\uff0c\u4ea7\u751f\u53ef\u7528\u7684 Shader\u3002 \u6bcf\u65b0\u6dfb\u4e00\u79cd\u6750\u8d28\uff0c\u7f16\u8f91\u5668\u8fd0\u884c\u65f6\u4e3a\u6211\u4eec\u81ea\u52a8\u7f16\u8bd1\u6240\u6709\u53ef\u80fd\u7684\u6392\u5217\uff08Permutaiton\uff09\uff0cFShaderCodeLibrary \u4e3a\u6211\u4eec\u63d0\u4f9b\u7f13\u5b58\u529f\u80fd\u3002 ShaderCache \u5728 4.22 \u4e2d\u88ab PSO Cache \u53d6\u4ee3\u3002 \u6765\u6e90\uff1a UE4 for Mobile | Developing High-end Mobile Games","title":"\u6750\u8d28\u3001\u9876\u70b9\u3001Pass \u4ee3\u7801\u89e3\u8026"},{"location":"ue4/final-chapter1/#pso-cache","text":"PSO Cache \u662f 4.21 \u51fa\u73b0\u7684\uff0c\u7528\u4e8e\u66ff\u4ee3\u4ee5\u524d\u7684 FShaderCache\u3002 \u5b9e\u9645\u6e38\u620f\u8fc7\u7a0b\u4e2d\uff0c\u6211\u4eec\u5e76\u4e0d\u4f1a\u7528\u5230\u7740\u8272\u5668\u7684\u6240\u6709 Permutation\uff0c\u53ea\u4f1a\u4ece\u4e2d\u6311\u9009\u51fa\u4e00\u4e2a\u5b50\u96c6\uff0cPSO Cache \u6b63\u4e3a\u7f13\u5b58\u4e86\u8fd9\u4e2a\u5b50\u96c6\uff0c\u6e38\u620f\u53d1\u5e03\u65f6\uff0c\u53ea\u9700\u5c06\u5c0f\u90e8\u5206\u7684\u7f13\u5b58\u6253\u5305\u5230\u5ba2\u6237\u7aef\u4e0a\u3002 PSO Cache \u6709\u6548\u51cf\u5c11\u6e38\u620f\u8f7d\u5165\u9636\u6bb5\u7740\u8272\u5668\u7f16\u8bd1\u7684\u65f6\u957f\u3002 \u4f8b\u5982\uff0c\u5728\u79fb\u52a8\u7aef\u5821\u5792\u4e4b\u591c\u4e2d\uff0c28,000 \u4e2a Shader Programs \u4e2d\uff0cProfile \u5230\u5176\u4e2d\u5e38\u7528 4,000 \u4e2a\u5e38\u7528\u9879\u3002 Note \u79fb\u52a8\u7aef\u4f7f\u7528\u8fc7\u7a0b\u4e2d\u4f1a\u9047\u5230 Shader \u5728\u663e\u5b58\u4e2d\u5360\u7528\u8fc7\u5927\uff0c\u89e3\u51b3\u65b9\u6848\u662f\u4f7f\u7528 LRU \u7b56\u7565\u3002","title":"\u5229\u7528 PSO Cache \u6539\u5584\u8f7d\u5165\u65f6\u6027\u80fd"},{"location":"ue4/final-chapter1/#draw-command","text":"4.22 \u4e2d\uff0c\u6e32\u67d3\u7cfb\u7edf\u5bf9Mesh\u7ed8\u5236\u90e8\u5206\u8fdb\u884c\u4e86\u5b8c\u5168\u7684\u91cd\u6784\uff0c\u91cd\u6784\u540e\u7684\u6d41\u7a0b\u53ef\u4ee5\u7f13\u5b58 DrawCommand\uff0c\u5176\u6b21 RHI \u53ef\u4ee5\u6839\u636e DrawCommand \u5b9e\u73b0 DrawCall Merge \u4f18\u5316\u3002 \u865a\u5e7b4\u6e32\u67d3\u7f16\u7a0b(Shader\u7bc7)\u3010\u7b2c\u5341\u5377\uff1a\u7ed8\u5236\u7b56\u7565\u3011 \u865a\u5e7b4\u6e32\u67d3\u7f16\u7a0b(Shader\u7bc7)\u3010\u7b2c\u5341\u4e8c\u5377\uff1aMeshDrawPipline\u3011 UE4.22\u6e32\u67d3\u6570\u636e\u7ba1\u7ebf\u91cd\u6784\u548c\u52a8\u6001instancing","title":"\u590d\u7528 Draw Command \u8d44\u6e90"},{"location":"ue4/final-chapter1/#_8","text":"","title":"\u5176\u4ed6\u7279\u6027"},{"location":"ue4/final-chapter1/#rhi","text":"\u51cf\u5c11\u6e32\u67d3\u7ebf\u7a0b\u8017\u65f6","title":"RHI \u7ebf\u7a0b"},{"location":"ue4/final-chapter1/#renderpass","text":"4.22 \u65b0\u7279\u6027\uff0c\u907f\u514d RenderTarget \u4e0d\u5fc5\u8981\u7684 Load-Store\u3002","title":"\u5408\u5e76 RenderPass \u51cf\u5c11\u79fb\u52a8\u7aef\u5f00\u9500"},{"location":"ue4/final-chapter1/#_9","text":"Vulkan - \u9ad8\u6027\u80fd\u6e32\u67d3 Command Buffer\uff0c\u4e0d\u8fc7\u8fd9\u7bc7\u4e0d\u592a\u597d\u7406\u89e3 D3D11,12 \u5bf9\u6bd4 D3D12 \u8bbe\u8ba1\u7406\u5ff5 Unreal Open Day \u6280\u672fPPT for Mobile UE4 \u8d44\u6e90\u5e93\uff0c\u542b OpenDay\u7684\u8d44\u6599 ....","title":"\u53c2\u8003"},{"location":"ue4/kinomotion/","text":"Unity KinoMotion \u8fd0\u52a8\u6a21\u7cca\u5173\u952e\uff1a\u91c7\u6837\uff0c\u52a0\u6743\u5e73\u5747 \u91cd\u70b9\uff1a\u6837\u672c\u70b9\u4f4d\u7f6e\uff0c\u6837\u672c\u70b9\u6743\u91cd \u5355\u8fb9/\u53cc\u8fb9\u91c7\u6837 \u91c7\u6837\u6570 \u6743\u91cd\u8ba1\u7b97 KinoMotion const half sc = floor(min(StepCount, l_v_max / 2)); StepCount \u6570\u91cf\uff0clvmax\uff1aTileMax\u7684\u957f\u5ea6 \u82e5StepCount\u5927\u4e8eTileMax\u50cf\u7d20\u6570\uff0c\u90a3\u4e48\u53d6TileMax\u50cf\u7d20\u6570\uff08\u5426\u5219\uff0c\u591a\u4e2aStep\u91c7\u6837\u5230\u4e00\u4e2a\u90bb\u57df\u50cf\u7d20\uff0c\u6240\u4ee5StepCount\u53d6\u66f4\u5c0f\u7684\u503c\uff09 \u5047\u5982 4 StepCount const half dt = 1 / sc; half t = 1 - dt / 2; while (t > dt / 4) t = Interval(count, 2) ? t - dt : t; \u91c7\u6837\u6570\uff1a2*StepCount+1 const half t_s = (Interval(count, 2) ? -t : t) + t_offs; \u53cc\u8fb9\u91c7\u6837 \u6743\u91cd\u8ba1\u7b97\uff1a const half w = saturate(l_v - l_t) / l_v * (1.2 - t); (1.2 - t) \u79bb\u5f97\u8fd1\u7684\u6837\u672c\u70b9\uff0cw\u5927 saturate(l_v - l_t) / l_v lt\u662f MaxtileV x t_s lv > lt \u65f6\uff0clt \u56fa\u5b9a\uff0clv\u8d8a\u5927\uff0cw\u8d8a\u5c0f lv \u8d8a\u5927\uff0cfg\u8d8a\u5927\uff0csample \u4e3a\u524d\u666f\u53ef\u80fd\u6027\u8d8a\u9ad8\uff0c\u5bf9\u4e8e\u5f53\u524d\u6a21\u7cca\u7684\u8d21\u732e\u8d8a\u5927 fg\u8ba1\u7b97\u6d89\u53ca\u5230 \u6df1\u5ea6\u5dee\uff0cvd_p\u8d8a\u5927\uff0c\u5f53\u524d\u6837\u672c\u70b9\u8d8a\u662f\u524d\u666f\u70b9","title":"Unity KinoMotion"},{"location":"ue4/kinomotion/#unity-kinomotion","text":"\u8fd0\u52a8\u6a21\u7cca\u5173\u952e\uff1a\u91c7\u6837\uff0c\u52a0\u6743\u5e73\u5747 \u91cd\u70b9\uff1a\u6837\u672c\u70b9\u4f4d\u7f6e\uff0c\u6837\u672c\u70b9\u6743\u91cd \u5355\u8fb9/\u53cc\u8fb9\u91c7\u6837 \u91c7\u6837\u6570 \u6743\u91cd\u8ba1\u7b97","title":"Unity KinoMotion"},{"location":"ue4/kinomotion/#kinomotion","text":"const half sc = floor(min(StepCount, l_v_max / 2)); StepCount \u6570\u91cf\uff0clvmax\uff1aTileMax\u7684\u957f\u5ea6 \u82e5StepCount\u5927\u4e8eTileMax\u50cf\u7d20\u6570\uff0c\u90a3\u4e48\u53d6TileMax\u50cf\u7d20\u6570\uff08\u5426\u5219\uff0c\u591a\u4e2aStep\u91c7\u6837\u5230\u4e00\u4e2a\u90bb\u57df\u50cf\u7d20\uff0c\u6240\u4ee5StepCount\u53d6\u66f4\u5c0f\u7684\u503c\uff09 \u5047\u5982 4 StepCount const half dt = 1 / sc; half t = 1 - dt / 2; while (t > dt / 4) t = Interval(count, 2) ? t - dt : t; \u91c7\u6837\u6570\uff1a2*StepCount+1 const half t_s = (Interval(count, 2) ? -t : t) + t_offs; \u53cc\u8fb9\u91c7\u6837 \u6743\u91cd\u8ba1\u7b97\uff1a const half w = saturate(l_v - l_t) / l_v * (1.2 - t); (1.2 - t) \u79bb\u5f97\u8fd1\u7684\u6837\u672c\u70b9\uff0cw\u5927 saturate(l_v - l_t) / l_v lt\u662f MaxtileV x t_s lv > lt \u65f6\uff0clt \u56fa\u5b9a\uff0clv\u8d8a\u5927\uff0cw\u8d8a\u5c0f lv \u8d8a\u5927\uff0cfg\u8d8a\u5927\uff0csample \u4e3a\u524d\u666f\u53ef\u80fd\u6027\u8d8a\u9ad8\uff0c\u5bf9\u4e8e\u5f53\u524d\u6a21\u7cca\u7684\u8d21\u732e\u8d8a\u5927 fg\u8ba1\u7b97\u6d89\u53ca\u5230 \u6df1\u5ea6\u5dee\uff0cvd_p\u8d8a\u5927\uff0c\u5f53\u524d\u6837\u672c\u70b9\u8d8a\u662f\u524d\u666f\u70b9","title":"KinoMotion"},{"location":"ue4/mesh/","text":"Mesh \u7ed8\u5236 \u57fa\u4e8e\u4fdd\u7559\u6a21\u5f0f\u3001\u79ef\u6781\u7f13\u5b58\u548c\u5408\u5e76\u7ed8\u5236\u8c03\u7528\uff0c\u5145\u5206\u5229\u7528\u9759\u6001\u7f51\u683c\u4f53\u5c5e\u6027\u3002 \u6d41\u7a0b \u201cFMeshBatch\u201d\u5c06\u201cFPrimitiveSceneProxy\u201d\u5b9e\u73b0\uff08\u7528\u6237\u4ee3\u7801\uff09\u4e0e\u7f51\u683c\u4f53\u901a\u9053\uff08\u79c1\u6709\u6e32\u67d3\u5668\u6a21\u5757\uff09\u89e3\u8026\u3002 \u201cFMeshBatch\u201d\u5305\u542b\u4e86\u901a\u9053\u786e\u5b9a\u6700\u7ec8\u7740\u8272\u5668\u7ed1\u5b9a\u548c\u6e32\u67d3\u72b6\u6001\u6240\u9700\u7684\u6240\u6709\u5185\u5bb9\uff0c\u56e0\u6b64\u4ee3\u7406\u6c38\u8fdc\u4e0d\u77e5\u9053\u5c06\u5728\u54ea\u4e9b\u901a\u9053\u4e2d\u6e32\u67d3\u3002 \u201cFMeshDrawCommand\u201d\u662f\u201cFMeshBatch\u201d\u548cRHI\u4e4b\u95f4\u7684\u63a5\u53e3\u3002\u5b83\u662f\u4e00\u4e2a\u5b8c\u5168\u65e0\u72b6\u6001\u7684\u7ed8\u5236\u63cf\u8ff0\uff0c\u5b58\u50a8\u4e86RHI\u9700\u8981\u77e5\u9053\u7684\uff0c\u5173\u4e8e\u7f51\u683c\u4f53\u7ed8\u5236\u7684\u6240\u6709\u4fe1\u606f \u521b\u5efa FMeshPassProcessor\uff0c\u8986\u5199 AddMeshBatch \u65b9\u6cd5 EmeshPass \u679a\u4e3e\u4e2d\u6dfb\u52a0\u6761\u76ee FRelevancePacket::MarkRelevant() ComputeDynamicMeshRelevance FParallelMeshDrawCommandPass::DispatchDraw \u7ed8\u5236 \u5b9e\u6218 Custom Depth FSceneRenderer :: RenderCustomDepthPass () // RenderPassInfo: RenderTarget \u76f8\u5173 BeginRenderingCustomDepth () FinishRenderingCustomDepth () \u7f13\u5b58 Static Mesh \u53ef\u4ee5\u7f13\u5b58 MeshBatch Static Mesh \u4e14 \u4e0d\u9700\u8981 SceneView \u53ef\u4ee5\u7f13\u5b58 DrawCommand \u53c2\u8003 https://docs.unrealengine.com/zh-CN/Programming/Rendering/MeshDrawingPipeline/index.html","title":"Mesh \u7ed8\u5236"},{"location":"ue4/mesh/#mesh","text":"\u57fa\u4e8e\u4fdd\u7559\u6a21\u5f0f\u3001\u79ef\u6781\u7f13\u5b58\u548c\u5408\u5e76\u7ed8\u5236\u8c03\u7528\uff0c\u5145\u5206\u5229\u7528\u9759\u6001\u7f51\u683c\u4f53\u5c5e\u6027\u3002","title":"Mesh \u7ed8\u5236"},{"location":"ue4/mesh/#_1","text":"\u201cFMeshBatch\u201d\u5c06\u201cFPrimitiveSceneProxy\u201d\u5b9e\u73b0\uff08\u7528\u6237\u4ee3\u7801\uff09\u4e0e\u7f51\u683c\u4f53\u901a\u9053\uff08\u79c1\u6709\u6e32\u67d3\u5668\u6a21\u5757\uff09\u89e3\u8026\u3002 \u201cFMeshBatch\u201d\u5305\u542b\u4e86\u901a\u9053\u786e\u5b9a\u6700\u7ec8\u7740\u8272\u5668\u7ed1\u5b9a\u548c\u6e32\u67d3\u72b6\u6001\u6240\u9700\u7684\u6240\u6709\u5185\u5bb9\uff0c\u56e0\u6b64\u4ee3\u7406\u6c38\u8fdc\u4e0d\u77e5\u9053\u5c06\u5728\u54ea\u4e9b\u901a\u9053\u4e2d\u6e32\u67d3\u3002 \u201cFMeshDrawCommand\u201d\u662f\u201cFMeshBatch\u201d\u548cRHI\u4e4b\u95f4\u7684\u63a5\u53e3\u3002\u5b83\u662f\u4e00\u4e2a\u5b8c\u5168\u65e0\u72b6\u6001\u7684\u7ed8\u5236\u63cf\u8ff0\uff0c\u5b58\u50a8\u4e86RHI\u9700\u8981\u77e5\u9053\u7684\uff0c\u5173\u4e8e\u7f51\u683c\u4f53\u7ed8\u5236\u7684\u6240\u6709\u4fe1\u606f \u521b\u5efa FMeshPassProcessor\uff0c\u8986\u5199 AddMeshBatch \u65b9\u6cd5 EmeshPass \u679a\u4e3e\u4e2d\u6dfb\u52a0\u6761\u76ee FRelevancePacket::MarkRelevant() ComputeDynamicMeshRelevance FParallelMeshDrawCommandPass::DispatchDraw \u7ed8\u5236","title":"\u6d41\u7a0b"},{"location":"ue4/mesh/#custom-depth","text":"FSceneRenderer :: RenderCustomDepthPass () // RenderPassInfo: RenderTarget \u76f8\u5173 BeginRenderingCustomDepth () FinishRenderingCustomDepth ()","title":"\u5b9e\u6218 Custom Depth"},{"location":"ue4/mesh/#_2","text":"Static Mesh \u53ef\u4ee5\u7f13\u5b58 MeshBatch Static Mesh \u4e14 \u4e0d\u9700\u8981 SceneView \u53ef\u4ee5\u7f13\u5b58 DrawCommand","title":"\u7f13\u5b58"},{"location":"ue4/mesh/#_3","text":"https://docs.unrealengine.com/zh-CN/Programming/Rendering/MeshDrawingPipeline/index.html","title":"\u53c2\u8003"},{"location":"ue4/motion-blur/","text":"\u79fb\u52a8\u8bbe\u5907\u8fd0\u52a8\u6a21\u7cca-\u865a\u5e7b\u5f15\u64ce \u5b9a\u4f4d\u4fee\u6539\u4f4d\u7f6e MobileShadingRenderer.cpp \u4e2d \u201cFMobileSceneRenderer::Render\u201d \u81ea\u5b9a\u4e49 Shader \u7f16\u5199 \u5982\u4f55\u4e3a UE4 \u6dfb\u52a0\u5168\u5c40\u7740\u8272\u5668 Shader \u5bf9\u5e94\u7684 .cpp \u7ee7\u627f FGlobalShader \u7c7b \u5c06\u8be5 Shader Type \u6ce8\u518c\u5230 UE4 \u7684\u5217\u8868 \u7ee7\u627f TRenderingCompositePassBase\uff0c\u8986\u5199 Process \u7ec4\u5408 Shader \u8bbe\u7f6e State \u7ed8\u5236 \u76ee\u5f55\u7ed3\u6784 Source/Runtime/Renderer/Private/PostProcess \u5b58\u653e Passes PostProcessing.cpp FPostProcessing::ProcessES2 \u5b89\u5353\u8bbe\u5907\u6e32\u67d3\u8c03\u7528 PostProcessMobile.cpp \u542b\u591a\u4e2a\u7ee7\u627f TRenderingCompositePassBase \u7684\u7c7b\uff08ProcessES2 \u4e2d\u4f7f\u7528\uff09 PostProcessMotionBlur.cpp \u539f\u8fd0\u52a8\u6a21\u7cca\u5b9e\u73b0 Source/Runtime/Renderer/Private/ \u5b58\u653e\u4e3b\u6e32\u67d3 Pipeline DeferredShadingRenderer.cpp\uff08PC \u7aef\u6e32\u67d3\u5165\u53e3\uff09 MobileShadingRenderer.cpp \uff08\u79fb\u52a8\u7aef\u6e32\u67d3\u5165\u53e3 FMobileSceneRenderer::Render \u4e2d\u8c03\u7528 FPostProcessing::ProcessES2\uff09 \u8c03\u8bd5\u65b9\u5f0f \u7740\u8272\u5668\u5f00\u53d1 | \u865a\u5e7b\u5f15\u64ce\u6587\u6863 r.ShaderDevelopmentMode \u8bbe\u7f6e\u4e3a 1 ctrl+shift+. \u91cd\u65b0\u7f16\u8bd1\u7740\u8272\u5668 \u5b9e\u8df5 Source/Runtime/Renderer/Private/PostProcess/MobilePostProcessMotionBlur.h .cpp \u5b9e\u73b0\u65b0 Pass\uff0c\u5e76\u8986\u5199 Process \u53c2\u8003 PostProcessing.cpp line-1693 MotionBlur \u5982\u4f55\u5c06 Pass \u653e\u8fdb ::Process \u4e2d\uff08Mobile \u7aef\u662f ProcessES2\uff09\uff0cFPostProcessing::Process \u540e\u7eed\u88ab ::Render \u8c03\u7528 \u521b\u5efa FRenderCompositePass * \u53d8\u91cf FinalOutput = FRenderCompositeOutputRef(Pass) \u4f7f\u7528\u672c \u6559\u7a0b \uff0c\u5c06 RenderMyPass \u6dfb\u52a0\u5230 RenderFog \u4e4b\u540e\uff0c\u8fd0\u884c\u5230 checkSlow(RHICmdList.IsOutsideRenderPass()) \u629b\u51fa\u5f02\u5e38 \u5f15\u8d77\u539f\u56e0\uff1a\u672a\u67e5\u660e \u89e3\u51b3\u65b9\u6848\uff1aSceneContext.BeginRenderingSceneColor \u540e\u672a\u8c03\u7528 SceneContext.FinishRenderingSceneColor \u57fa\u7840\u7248\u672c\u5b8c\u6210\uff0c\u6211\u4eec\u80fd\u52a0\u5165\u81ea\u884c\u7f16\u5199\u7684\u5168\u5c40\u7740\u8272\u5668\u4e86 \u67e5\u627e\u8fd0\u52a8\u6a21\u7cca\u5728 ES2 \u4e2d\u52a0\u5165\u4f4d\u7f6e usf \u5728 PostProcess \u76ee\u5f55\u4e0b SceneView.h \u4e2d\u5b9a\u4e49\u4e86\u4f17\u591a\u5750\u6807\u8f6c\u6362\u5de5\u5177\uff0c\u4f7f\u7528 ClipToPrevClip \u8ba1\u7b97\u5f53\u50cf\u7d20\u5728\u4e0a\u4e00\u5e27\u7684\u4f4d\u7f6e \u5b9e\u73b0 GPU Gem 3 Motion Blur \u5229\u7528\u5f15\u64ce Stencil \u529f\u80fd\u6dfb\u52a0 Mask \u5c06 Sample \u6570\u91cf\u8bbe\u7f6e\u4e3a\u53c2\u6570 \u627e\u51fa\u7f16\u8f91\u5668\u4e0d\u6b63\u786e\u8868\u73b0\u7684\u539f\u56e0\uff1aToneMapping \u540e\u7eb9\u7406\u5927\u5c0f\u4e0e\u5b9e\u9645\u8f93\u51fa\u5927\u5c0f\u4e0d\u4e00\u81f4 \u8fd0\u52a8\u5411\u91cf\u53ef\u89c6\u5316 \u5b89\u5353\u8bbe\u5907\u8c03\u8bd5 \u5173\u95ed MSAA\uff0c\u83b7\u53d6\u6df1\u5ea6 \u4fee\u590d\u5b89\u5353\u56fe\u5f62 API \u517c\u5bb9\u6027(TODO) \u6ce8\u610f\u8fd0\u52a8\u5411\u91cf\u7684\u8ba1\u7b97 \u7a0b\u5e8f\u7a33\u5b9a\u6027(TODO) \u56fe\u5f62 API \u5750\u6807\u7cfb \u80fd\u5426\u83b7\u53d6\u6b63\u786e\u7684\u6df1\u5ea6\u6750\u8d28\uff08\u81f3\u5c1116\u4f4d\u6d6e\u70b9\u6570\uff09 \u80fd\u5426\u83b7\u53d6\u6b63\u786e\u7684 Mask \u6027\u80fd\u6d4b\u8bd5 \u6dfb\u52a0\u9879 \u52a0\u4e00\u4e2a Pass \u5bfc\u51fa Color.a \u76f4\u63a5\u5728 PostProcessing \u91cc\u6dfb\u52a0 \u76f4\u63a5\u8ba1\u7b97 Velocity \u6d4b\u8bd5\u6027\u80fd RenderDoc \u9634\u5f71\u6e32\u67d3\u4e2d\u6709\u4e00\u4e2a PerObject Rendering\uff0c\u6e32\u67d3\u573a\u666f\u4e2d\u7684\u52a8\u6001\u7269\u4f53\uff0cVelocity \u4e2d\u9700\u8981\u6311\u9009\u51fa\u52a8\u6001\u7269\u4f53 Plan\uff1a\u6311\u9009\u52a8\u6001\u7269\u4f53\uff0c\u4f7f\u7528 Velocity Rendering \u6e32\u67d3\u5230\u7eb9\u7406\u4e0a\uff0c\u53c2\u9605\u7f51\u683c\u4f53\u7ed8\u5236\u5b98\u65b9\u6587\u6863 MotionBlur \u524d\u6e32\u67d3 RG16F \u7684 Velocity RenderVelocities \u6dfb\u52a0\u5230 Mobile PC ClearRenderTarget\uff0c\u540e\u7eed\u6ca1\u4e86\uff0c\u539f\u56e0\uff1a\u6ca1\u6709 Register Velocity \u5230 Mobile \u79fb\u52a8\u7aef gl_clear \u540e\u672a\u7ed8\u5236\uff0c\u539f\u56e0\uff1aAddMesh \u5bf9\u7eb9\u7406\u683c\u5f0f\u8fdb\u884c\u5224\u65ad\uff0c\u5931\u8d25\u540e\uff0c\u672a\u6dfb\u52a0 Mesh \u5b8c\u6210\u6b64\u6b65\u9aa4 \u901f\u5ea6\u91cd\u5efa\u6ee4\u6ce2 \u8ba1\u7b97\u5168\u5c4f Velocity \u7b97\u9519\u4e86\uff0cprevious \u8ba1\u7b97\u9519\u8bef E:\\UnrealEngine\\Engine\\Source\\Runtime\\Renderer\\Private\\VelocityRendering.cpp\uff0cGPUSkinCachePreviousPositionBuffer bool SupportsVelocity() const E:\\UnrealEngine\\Engine\\Source\\Runtime\\Engine\\Private\\GPUSkinCache.cpp \u91cd\u5199 VelocityFlatten \u68b3\u7406 \u6536\u5c3e\u5de5\u4f5c MSAA \u5f00\u542f\u540e\uff0c\u4f7f\u7528 FrameBufferFetch \u83b7\u53d6\u6df1\u5ea6 \u4fee\u590d StaticMesh \u901f\u5ea6\u8ba1\u7b97\u9519\u8bef\u95ee\u9898\uff1aRenderDoc \u7684\u95ee\u9898\uff0c\u622a\u53d6\u540e View PrevView \u5b8c\u5168\u4e00\u6837\uff0c\u672a\u627e\u5230\u539f\u56e0 \u4e0d\u7528 RenderDoc \u6293\u53d6\u5c31\u6ca1\u95ee\u9898 \u6548\u7387\u4f18\u5316 Decal \u80fd\u83b7\u53d6\u6b63\u786e\u7684\u6df1\u5ea6 Lookupdevicez SceneTexturesCommon.ush \u56e0\u4e3a\u7528\u4e86 FrameBufferFetch ES2 \u82e5\u652f\u6301 fetch \u5c31 fetch\uff0c\u5426\u5219\u4f7f\u7528 SceneDepthTexture ES31 \u4f7f\u7528 depth fetch\uff0c\u5426\u5219 framebufferfetch color.a \u8ddf\u8e2a SceneDepthTexture \u5982\u4f55\u4e0e Surface \u5173\u8054\u4e0a\u7684 Surface \u662f target texture \u662f texture \u4e00\u79cd\u4e1c\u897f\u7684\u4e24\u79cd\u53eb\u6cd5\uff1f \u5173\u95ed MSAA \u786e\u5b9e\u7ed1\u5b9a\u4e86 Depth Texture \u5f00\u542f MSAA\uff0c\u7ed1\u5b9a\u4e86\u4e00\u5f20\u65e0\u6548\u7684 Texture \u4e0a Render \u5230\u4e86 renderbuffer\uff0c\u662f\u5426\u548c renderbuffer \u53ea\u5199\u6709\u5173 \u5207\u6362 Render Target \u80fd Resolve \uff1f \u5b9e\u9645\u53ea\u6709 Color Resolve Multisampling Considerations Multisampling is supported with the Default Framebuffer (through WGL/GLX_multisample) and/or Framebuffer Objects (through multisampled renderbuffers or textures, where supported). As explained in the article on Multisampling, a multisampled buffer must be resolved into a single sample before it can be displayed. When the default framebuffer uses multisampling, this resolving operation is automatic, occurring during framebuffer swapping (though reading from the framebuffer can cause it to happen anyway). https://community.khronos.org/t/fbo-renderbuffer-vs-texture/65933 RBOs are like a texture with a hint - that you won\u2019t expect some functionality from them. The driver can speedup rendering to them. Yet, on most modern cards, the performance difference is almost zero. Only on mobile hardware they can make any difference, to save battery - if the driver detects you\u2019re properly using glClear on frame-start. Basically use RBs only if you know you\u2019ll never need the data to be used as a texture. https://stackoverflow.com/questions/17699087/multisampling-on-ios-cant-get-depth-texture \u82f9\u679c\u4e0a\u53ea Resolve Color \u7ed3\u675f \u67e5\u770b Deferred Motion Blur \u53c2\u6570\uff0c\u4e3a Gem 3 \u63d0\u4f9b\u601d\u8def \u79fb\u690d Unity Github \u5f00\u6e90\u7248\u672c \u6548\u679c\u4e00\u822c\u822c 14\u5e74 \u5f53\u524d\u5148\u91c7\u53d6\u4e24\u4e2a\u6837\u672c\u65b9\u5411 \u53ef\u662f\u91c7\u6837\u5b9e\u9645\u901f\u5ea6\u53d1\u73b0\uff0c\u5b9e\u9645\u901f\u5ea6\u8fdc\u5927\u4e8eMaxTile\uff1f\uff1f\uff1f\uff1f \u770b\u8d77\u6765\u53ea\u67098\u4e2a\u6837\u672c\u70b9\uff0c\u4e00\u8fb9\u56db\u4e2a \u5b8c\u6210\u51e0\u4e2a\u573a\u666f\u5bf9\u6bd4\uff0c\u8bc1\u660e14Paper\u89e3\u51b3\u7684\u95ee\u9898 \u8f66\u8f6e\u5bf9\u6bd4 ok \u7f29\u8fdb\u5bf9\u6bd4 ok \u539f\u59cb\u989c\u8272\u6743\u91cd\u5927\uff1a\u88ab\u629b\u5f03\u7684\u989c\u8272\u8fc7\u591a\u5bfc\u81f4 wa \u8ba1\u7b97\u7ed3\u679c\u5bfc\u81f4\u5927\u91cf\u6837\u672c\u70b9\u6743\u91cd\u4e3a0\uff0c\u4fee\u590d\u6743\u91cd\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\u7684\u95ee\u9898 \u95ee\u9898\u5217\u8868 List \u63cf\u8ff0 RenderVelocities MSAA \u60c5\u51b5\u4e0b\u65e0\u6cd5 Fetch \u6df1\u5ea6 TODO \u63cf\u8ff0 Gem 3 \u53ef\u7528\u7248\u672c \u5173\u4e8e Stencil \u7684\u7528\u6cd5\uff0c\u51b3\u5b9a\uff1bMax Velocity \u7684\u9650\u5236 Deferred \u53ef\u7528\u7248\u672c \u68c0\u67e5 Velocity Depth Buffer \u7ed1\u5b9a\uff0cFullScreen \u80fd\u5426\u88ab\u4f18\u5316\u6389 \u5f84\u5411\u52a8\u6001\u6a21\u7cca - \u67e5\u770b\u52a8\u6001\u6a21\u7cca\u5df2\u6709\u53c2\u6570 - \u5b8c\u6210\u4e00\u4e2a Demo \u7528\u4e8e\u5c55\u793a\u5b8c\u6210\u7684\u5de5\u4f5c Resolve \u542b\u4e49 MS->1S \u79fb\u52a8\u7aef\u7247\u4e0a\u5185\u5b58\u5185\u5bb9\u5199\u56de \u6027\u80fd \u6d4b\u8bd5\u73af\u5883\uff1a\u5c0f\u7c736 \u5206\u8fa8\u7387\uff1a720p Motion Blur\uff08GPU Gem 3\uff0c\u91c7\u68378bitColor\uff0cStencil 1spp\uff09 1spp 5spp 10spp - 0.6ms 1.3ms 2.1ms Motion Blur\uff08GPU Gem 3\uff0c\u91c7\u68378bitColor\uff0cStencil 1spp\uff09 4spp 6spp 8spp - 1.8ms 2.3ms 2.8ms Motion Blur\uff08GPU Gem 3\uff0c\u91c7\u68378bitColor\uff0cStencil 1spp\uff09 1spp 4spp 6spp 8spp - 0.9ms 1.4ms 1.8ms 2.0ms Motion Blur\uff08GPU Gem 3\uff0c\u91c7\u68378bitColor\uff0cStencil 1spp\uff09 1spp 4spp 6spp 8spp - 0.6ms/1.1ms\uff1f - - - Color.a to Depth Time - 0.6ms Custom Depth\uff08\u4ec5\u8f7d\u5177 ~10w Vertex\uff09 Time - 0.3ms Render Velocities\uff08\u4ec5\u8f7d\u5177 ~10w Vertex\uff09 Time - 0.6ms Flatten Velocity 4 Pass Downsample 16x - 0.8ms Scatter Velocity - - 0.25ms Full Screen Velocity - - 1.3ms Motion Blur\uff08Deferred \u4e2d\u7684\uff0c\u653e\u5728 Tone mapping \u4e4b\u540e\uff09 16spp 8spp 6spp 4spp - 10.4 ms 4.7ms 3.4ms 2.5ms Pass Gem 3 Deferred \u65f6\u95f4\uff08720P\uff09 Mesh Draw Custom Depth \u2714 0.3ms Render Velocity \u2714 0.6ms PostProcessing Copy Depth \u2714 0.6ms Full Screen Velocity \u2714 1.3ms MaxTile/Flatten \u2714 0.8ms NeighborMax \u2714 0.3ms Motion Blur Deferred \u2714 - Motion Blur Gem 3 \u2714 - Totoal 4spp 2.7ms 5.5ms Totoal 6spp 3.3ms 6.4ms Totoal 8spp 3.7ms 7.7ms Profile \u6027\u80fd\u5206\u6790 RenderDoc \u6bcf\u6b21 Profile \u65f6\u95f4\u5dee\u5f02\u8f83\u5927 motion-blur-profile.png TODO \u65b9\u68481\uff1a RenderVelocity\uff08\u8f7d\u5177\uff09->RenderVelocity\uff08\u5168\u5c4f+Depth\uff09->Gather \u8ba8\u8bba\uff1a \u8f93\u5165\u8f93\u51fa\u8ba8\u8bba Input Color RGB\u3001A \u4e3a\u6df1\u5ea6 \u91c7\u6837\u3001\u52a0\u6743\u6df7\u5408 \u4f4d\u7f6e\u8ba8\u8bba ::Process ToneMapping \u4e4b\u540e\uff08\u91c7\u6837\u5e26\u5bbd\u6700\u5c0f\uff09 \u5173\u4e8e\u6df1\u5ea6 Color.a \u5168\u9ed1 LookupDevicZ \u7528\u5230\u7684\u662f \uff1f Android ES2 \u5e95\u5c42\u7528\u5230\u7684\u662f OpenGL API\uff1f \u5173\u4e8e\u9884\u89c8\u6e32\u67d3\u7ea7\u522b SM5\u3001SM4\u3001IOS\u3001Android ES2\u3001HTML5 \u548c\u5e95\u5c42\u4f7f\u7528\u7684 API\uff08D3D\u3001Vulkan\u3001OpenGL\uff09\u6709\u4ec0\u4e48\u5173\u8054\uff1f \u56fe\u5f62 API \u5b9a\u4e49\u4e86\u81ea\u5df1\u7684 Capability \uff0c\u53ef\u4ee5\u5728 D3D \u4e0a\u4f7f\u7528 ES2 \u7ea7\u522b\u7279\u6027 \u5b9a\u4e49 Feature Level \u53ea\u662f\u8ba9 Shader \u8d70\u53e6\u4e00\u5957 \u5750\u6807\u7cfb UE4 \u5750\u6807\u7a7a\u95f4\u672f\u8bed OpenGL \u6df1\u5ea6\u6d4b\u8bd5 OpenGL NDC\u53d8\u6362 \u8f6c\u6362\u4e3a\u4e16\u754c\u5750\u6807 \u5f53\u524d\u5df2\u6709 Z/W\uff0c\u5229\u7528 InvWVProjection + WVP \u6295\u5c04\u56de\u4e0a\u4e00\u5e27 \u56de\u7b97\u51fa World \u5750\u6807 \u83b7\u53d6\u53d8\u6362\u77e9\u9635 ShaderCompiler.cpp line-2675 GenerateInstacedStereoCode MobileBasePassVertexShader.usf line-72 TranslatedWorldToClip SceneView.cpp line-2221 TranslatedWorldToClip ClipToTranslatedWorld line-247 Z=0 \u8fdc\u5e73\u9762/ Z=1 \u8fd1\u5e73\u9762 GenerateInstacedStereoCode \u54c7\uff0c\u81ea\u52a8\u751f\u6210 Shader \u4ee3\u7801 Fatal Error: Shaders Expected a uniform buffer of struct type \u65b9\u6cd5\uff1a\u8ddf\u8e2a Sunmask \u53c2\u6570 Bind \u8fc7\u7a0b \u73b0\u8c61\uff1a\u6bcf\u6b21\u9700\u8981\u6539\u52a8\u4e00\u6b21 Shader \u540e\u624d\u80fd\u542f\u52a8\u6e38\u620f \u539f\u56e0\u627e\u5230\uff1a\u5e8f\u5217\u5316\u4e0d\u6b63\u786e \u6839\u636e Sunmask \u4fee\u6539 Serialize \u51fd\u6570 Shader \u8f7d\u5165\u6b63\u5e38 \u6027\u80fd\u95ee\u9898 Post Process \u548c Framebuffer Fetch \u65e0\u5173 \u67e5\u4e0b UV \u548c NDC \u5750\u6807\u7684\u5173\u7cfb OpenGL UV XY \u671d\u5411\u4e00\u81f4 D3D \u4e0d\u4e00\u81f4 \u5173\u4e8e\u7f16\u8f91\u5668\u4e2d\u91c7\u6837\u4e0d\u6b63\u786e \u7f16\u8f91\u5668\u521d\u59cb\u7eb9\u7406\u521b\u5efa 1920x1040 \u91c7\u6837\u8d85\u51fa\u8fb9\u754c\u65f6\uff0c\u5f97\u5230\u9ed1\u8272\u50cf\u7d20 \u540e\u5904\u7406\u753b\u7684\u662f\u4e09\u89d2\u5f62\uff0cRenderDoc \u67e5\u770b\uff0c\u5229\u7528\u4e86 GPU \u5149\u6805\u5316\u7684\u5254\u9664\u529f\u80fd UV \u975e\u5168\u90e8\u8986\u76d6\u5c4f\u5e55\u7684\u56db\u8fb9\u5f62\uff0c\u53ea\u8986\u76d6\u4e86\u4e00\u90e8\u5206\uff0c\u5bfc\u81f4\u8fd0\u52a8\u5411\u91cf\u4e0d\u6b63\u786e \u5173\u952e\u5728\u4e8e DrawRect .cpp \u6587\u4ef6\u91cc\u7684\u63a7\u5236\u53c2\u6570 \u91c7\u6837\u7684\u95ee\u9898 1 Sample Point\uff0c\u5374\u67092\u79cd\u989c\u8272\uff1f \u7f16\u8f91\u5668\u91cc\u6ca1\u95ee\u9898\uff0c\u64ad\u653e\u90fd\u6709\u95ee\u9898 PostProcessAA \u7684\u95ee\u9898\uff0c\u592a\u6050\u6016\u4e86\u8fd9\u6548\u679c DrawRectangle \u5206\u6790 InPosition \u662f\u4e2a\u4e09\u89d2\u5f62\uff0c\u5b9e\u9645\u4e0a\u9700\u8981\u501f\u52a9 GPU \u8fdb\u884c\u88c1\u526a\uff0c\u6211\u4eec\u4ec5\u4f7f\u7528\u4e09\u89d2\u5f62\u4e2d\u622a\u53d6\u7684\u6b63\u65b9\u5f62\u533a\u57df\uff0c\u8be5\u533a\u57df InPosition \u8303\u56f4\u4e3a [0, 1]\u3002 X\uff0cY \u4e3a Target \u4e0a\u7684\u504f\u79fb\u91cf SizeX\uff0cSizeY \u7406\u89e3\u7ed8\u5236\u533a\u57df\u5927\u5c0f PosScaleBias \u5408\u8d77\u6765\u7406\u89e3\u4e3a\u5728 Target \u4e0a\u6e32\u67d3\u7684\u957f\u65b9\u5f62\u4f4d\u7f6e\u3001\u5927\u5c0f U\uff0cV \u4e3a Texture \u4e0a\u7684\u504f\u79fb\u91cf SizeU\uff0cSizeV \u4e3a Texel \u6570\u91cf UVScaleBias \u5408\u8d77\u6765\u4e3a Texture \u4e0a\u7684\u504f\u79fb\u91cf\u548c\u5927\u5c0f // SceneFilterRendering.cpp // Set up vertex uniform parameters for scaling and biasing the rectangle. // Note: Use DrawRectangle in the vertex shader to calculate the correct vertex position and uv. FDrawRectangleParameters Parameters ; Parameters . PosScaleBias = FVector4 ( SizeX , SizeY , X , Y ); Parameters . UVScaleBias = FVector4 ( SizeU , SizeV , U , V ); Parameters . InvTargetSizeAndTextureSize = FVector4 ( 1.0f / TargetSize . X , 1.0f / TargetSize . Y , 1.0f / TextureSize . X , 1.0f / TextureSize . Y ); // Common.ush /** Used for calculating vertex positions and UVs when drawing with DrawRectangle */ void DrawRectangle ( in float4 InPosition , in float2 InTexCoord , out float4 OutPosition , out float2 OutTexCoord ) { OutPosition = InPosition ; OutPosition . xy = - 1.0f + 2.0f * ( DrawRectangleParameters . PosScaleBias . zw + ( InPosition . xy * DrawRectangleParameters . PosScaleBias . xy )) * DrawRectangleParameters . InvTargetSizeAndTextureSize . xy ; OutPosition . xy *= float2 ( 1 , - 1 ); OutTexCoord . xy = ( DrawRectangleParameters . UVScaleBias . zw + ( InTexCoord . xy * DrawRectangleParameters . UVScaleBias . xy )) * DrawRectangleParameters . InvTargetSizeAndTextureSize . zw ; } \u91c7\u6837\u6d41\u7a0b Position \u91c7\u6837\u4f7f\u7528 ToneMapping UV\uff08\u548c Position \u4e00\u81f4\uff09 UE4-\u5b89\u5353\u8c03\u8bd5\u914d\u7f6e \u5b89\u88c5 Codeworks for Android \u6e38\u620f\u9879\u76ee\u8bbe\u7f6e \u6253\u5305\u5931\u8d25 [INSTALL_FAILED_USER_RESTRICTED: Install canceled by user] \u5141\u8bb8 App \u901a\u8fc7 USB \u5b89\u88c5 \u6027\u80fd\u5206\u6790 UE4 \u6027\u80fd\u4f18\u5316\u65b9\u6cd5(\u5de5\u5177\u7bc7) \u79fb\u52a8\u7aef GPU \u5206\u6790 adreno profiler NVIDIA Tegra Graphics Debugger ImgTec PVRTune and PVRTrace ARM Mali Graphics Debugger RenderDoc \u9760\u76ee\u6d4b stat unit \u4e0a\u8fb9\u90fd\u662f\u9519\u7684\uff0c\u76f4\u63a5\u7528 RenderDoc\uff0c\u81ea\u5e26\u65f6\u95f4\u5206\u6790 \u5c0f\u7c73 6\uff0cRenderDoc \u6d4b\u8bd5 10 \u6837\u672c 2.5 ms GLSL-ES2 Motion \u8868\u73b0\u4e0d\u6b63\u786e \u5173\u95ed MSAA \u5373\u53ef\uff0cMSAA \u5bfc\u81f4 Depth \u83b7\u53d6\u5931\u8d25 API \u9002\u914d Stencil\u3001Depth UV \u4ecd\u662f FlipV \u7684 GLSL_ES2 \u6e32\u67d3 ToneMapping \u65f6\u7eb9\u7406\u53cd\u8f6c\u56de\u6765\u4e86 // PostProcessToneMap.usf #define NEEDTOSWITCHVERTICLEAXIS (ES2_PROFILE && COMPILER_GLSL_ES2) || (ES3_1_PROFILE && COMPILER_GLSL_ES3_1) \u5229\u7528\u4e86\u4ee5\u4e0a\u5b8f\u8fdb\u884c\u5224\u65ad \u76ee\u524d\u5df2\u77e5\u7684\u9700\u8981\u6ce8\u610f\u7684\u95ee\u9898 MSAA \u5bfc\u81f4 Depth Texture \u65e0\u6cd5\u83b7\u53d6 ConditionResolveDepth \u6dfb\u52a0 Pass \u5f3a\u5236\u5199\u5165 Depth Graphics API \u5750\u6807\u7cfb\u5bfc\u81f4\u91c7\u6837\u4e0d\u6b63\u786e ToneMapping \u524d\u91c7\u6837\u5f00\u9500\u5de8\u5927\uff08RGBA16\uff09 Motion \u52a0\u5728 Tonemapper \u524d\uff0cDepth \u4e0d\u6b63\u786e\uff0c\u4f46\u662f\u7528 RenderDoc \u91c7\u6837\u540e\uff0c\u53c8\u8868\u73b0\u6b63\u5e38 \u89e3\u51b3\u65b9\u6848 MSAA \u65e0\u6cd5\u5f97\u5230\u6df1\u5ea6 PostProcess \u6700\u5f00\u59cb\u63d2\u5165\u4e00\u4e2apass \u628acolor.a \u5199\u5165\u4e00\u5f20\u7eb9\u7406 \u6d4b\u8bd5\u4e0b Decal\u3001 \u5f00\u542f MSAA \u662f\u5426\u771f\u7684\u6709\u95ee\u9898 GLSL_ES \u517c\u5bb9\u6027 - bool FMobileSceneRenderer :: RequiresTranslucencyPass ( FRHICommandListImmediate & RHICmdList , const FViewInfo & View ) const \u76f4\u63a5\u4f7f\u7528 Color.a \u5219\u65e0\u95ee\u9898 \u4f7f\u7528 Depth Texture \u6709\u989d\u5916\u5f00\u9500 MSAA \u4e0d\u4f1a Resolve Depth Texture UE4 \u7740\u8272\u5668\u8de8\u5e73\u53f0\u5206\u6790 Nvidia GDC 2014 Frame Buffer \u4e0a\u4e0b\u53cd\u8fc7\u6765\u6e32\u67d3\uff1aUV \u5c31\u80fd\u6b63\u786e\u91c7\u6837\u4e86 \u95ee\u9898\u5728\u4e8e\uff0cToneMapping \u6b63\u8fc7\u6765\u4e86... \u5148\u53c2\u8003\u4e0b SM5 \u4e2d Velocity \u7684\u8ba1\u7b97 Velocity \u8ba1\u7b97\u4e00\u5982\u65e2\u5f80 Last Clip Clip \u91c7\u6837\u7167\u5e38\u91c7\u6837\uff1f \u76f4\u63a5\u8ba1\u7b97 Vehicle \u7684\u901f\u5ea6\u5411\u91cf OpenGL UV \u589e\u52a0\u65b9\u5411\u4e0e \u901f\u5ea6\u4e0d\u6b63\u786e \u5750\u6807\u7cfb\u8f6c\u6362\u53c2\u8003\u4e86 visualize motion \u540e\uff0c\u51d1\u5bf9\u4e86 OpenGL \u6295\u5f71\u77e9\u9635\u4e0e D3D \u4e00\u81f4\uff0cShader \u67d0\u5904\u505a\u4e86\u5904\u7406\uff0c\u67e5\u9605 \u6700\u7ec8\u91c7\u6837\u7ed3\u679c\u4e0d\u6b63\u786e\uff0cVelocity \u6a2a\u5411\u91c7\u6837\uff1f \u8ba1\u7b97 Velocity Buffer Velocity \u6e32\u67d3\u7ed3\u679c\u6709\u7f3a\u5931 \u95ee\u9898\u8868\u73b0\uff1a RenderDoc \u67e5\u770b\u672a\u901a\u8fc7 Depth Test Clear \u524d\u6709\u503c\u7684\u88abClear\u4e14\u901a\u4e0d\u8fc7 Depth Test Clear \u524d\u65e0\u503c\u7684\u901a\u8fc7\u4e86Depth Test Render \u4f4d\u7f6e\u9519\u4e86\uff0c\u4f7f\u7528\u4e86\u4e0a\u4e00\u5e27\u7684 Depth Flatten \u5931\u8d25\uff1a bool SupportsVelocity () const { return GPUSkinCachePreviousPositionBuffer . IsBound () || PrevTransformBuffer . IsBound () || ( PrevTransform0 . IsBound () && PrevTransform1 . IsBound () && PrevTransform2 . IsBound ()) || //@todo MeshCommandPipeline - now that PreviousLocalToWorld is in the primitive uniform buffer, we can't look at whether the shader bound it to cull what gets rendered in velocity pass true ; } \u4e0a\u8fb9\u4ee3\u7801\u6700\u540e\u4e00\u4e2a\u8fd4\u56de true \u7ee7\u7eed\u67e5\u770b float4 PrevTranslatedWorldPosition = VertexFactoryGetPreviousWorldPosition ( Input , VFIntermediates ); float4 VertexFactoryGetPreviousWorldPosition ( FVertexFactoryInput Input , FVertexFactoryIntermediates Intermediates ) float3 SkinPreviousPosition ( FVertexFactoryInput Input , FVertexFactoryIntermediates Intermediates ) FBoneMatrix CalcPreviousBoneMatrix ( FVertexFactoryInput Input ) FBoneMatrix GetPreviousBoneMatrix ( int Index ) OutEnvironment . SetDefine ( TEXT ( \"GPUSKIN_USE_BONES_SRV_BUFFER\" ), SupportsBonesBufferSRV ( Platform ) ? 1 : 0 ); \u4fee\u6539\u51e0\u4e2a\u5730\u65b9\u540e\uff0c\u80fd\u591f\u6e32\u67d3\u51fa\u901f\u5ea6 \u9700\u8981\u6392\u67e5\u5177\u4f53\u90a3\u4e2a\u56e0\u7d20\u5bfc\u81f4\u7684 #define GPUSKIN_USE_BONES_SRV_BUFFER 1 // Use a Buffer<float4> if 1, otherwise a uniform buffer 14 Motion Blur \u7eaf\u4f7f\u7528 Vc \u65f6\uff0c\u6837\u672c\u6743\u91cd\u90fd\u5f88\u5c0f\uff0c\u5bfc\u81f4\u91c7\u6837\u7ed3\u679c\u5f88\u6de1 \u5728\u901f\u5ea6\u975e\u5e38\u5927\u65f6\u4f1a\u51fa\u73b0\u4e0a\u8ff0\u7ed3\u679c \u901f\u5ea6\u6781\u5927\u7684\u65f6\u5019\uff0cMaxTile \u901f\u5ea6\u751a\u81f3\u4e0d\u5982\u5b9e\u9645 Center \u7684\u901f\u5ea6\uff1f \u89e3\u51b3\u4e86\uff0cFlatten \u65f6\u5019\u9650\u5236\u4e86\u6700\u5927\u901f\u5ea6\uff0cMotionBlurParameters.w Sample \u65f6\u5019\u8def\u5f84\u5f88\u957f\uff0c\u4f46\u91c7\u6837\u8def\u5f84\u5f88\u77ed \u5bfc\u5e08 Tips \u76ee\u6807\uff1aUE4 ES2 \u5982\u4f55\u4f7f\u7528 Depth Texture\u3001Depth Texture \u5728\u54ea\u8bbe\u7f6e SunMask \u81ea\u52a8\u67e5\u627e Shader \u4e2d\u7684 Texture \u4f7f\u7528\u60c5\u51b5\u5e76\u8fdb\u884c\u7ed1\u5b9a SceneRenderTargetParameters.h line-132 PostProcessMobile.usf SunMaskPS_ES2 PostProcessMobile.cpp line-905 Bind SceneTextureCommon.ush line-35 CalcSceneDepth \u65b9\u6cd5\u4ece SceneTexturesStruct.SceneDepthTexture \u91c7\u6837 SceneTexturesStruct \u5728 SceneRenderTarget SunMask Pass \u6d41\u7a0b FRCPassPostProcessSunMaskES2::Process \u4e2d\u4f7f\u7528\u4e86 SetShader PostProcessMobile.cpp FRCPassPostProcessSunMaskES2::SetShader \u6839\u636e\u53c2\u6570\u521b\u5efa Shader Process \u4e2d\u6839\u636e GetInputDesc(ePId_Input0) \u6765\u786e\u8ba4\u662f\u5426\u4f7f\u7528 DepthTexture/Color.a\uff08usf \u4e2d\u91c7\u6837 PostProcessInput0) ePId_Input0 \u5728 Render \u521d\u59cb\u5316 TRenderCompositexx \u540e SetInput SceneRenderTarget.cpp line-2362 MobileSceneColorBufferFormat \u53ea\u6709\u4e09\u79cd FloatRGBA FloatR11G11B10 B8G8R8A8\uff0c\u82e5\u8bbe\u5907\u652f\u6301 HDR \u9ed8\u8ba4\u4e3a PF_FloatRGBA PostProcessMobile.cpp line-1075 \u82e5 Input \u6750\u8d28\u4e3a FloatR11G11B10 \u683c\u5f0f\uff0c\u5728\u7740\u8272\u5668\u4e2d\u4f7f\u7528 DepthTexture PostProcessMobile.usf line-107 \u5426\u5219\u4f7f\u7528 Alpha \u901a\u9053\u7684\u6df1\u5ea6\u8868\u793a \u8ffd\u8e2a SceneTexturesStruct \u8bbe\u7f6e/\u4f7f\u7528\u60c5\u51b5 SceneRenderTarget.cpp line-2875 \u51fa\u73b0\u76f8\u5173\u5b8f \u4e0eFSceneTexturesUniformParameters\u5173\u8054 SceneRenderTarget.cpp line-3029 \u51fa\u73b0\u76f8\u5173\u5b8f \u4e0eFMobileSceneTexturesUniformParameters\u5173\u8054 SceneRenderTarget.cpp line-3092 \u53c2\u6570\u7ed1\u5b9a\u65b9\u6cd5 MobileShadingRenderer.cpp line-376 SceneDepth \u5c40\u90e8\u53d8\u91cf \u4e0a\u8ff0 SceneDepth \u6765\u6e90\u4e8e SceneRenderTarget.h/.cpp \u4e2d\u7684 FSceneRenderTargets::SceneDepthZ \u800c SceneDepthZ \u53c8\u4f1a\u5728 Pass \u6784\u9020\u65f6\u5019\uff0cBind \u5230\u5bf9\u5e94\u7684 SceneTexture \u4e0a \u57fa\u7840\u7740\u8272\u65f6\uff0cDepth \u5199\u5165\u60c5\u51b5 MobieBasePassPixelShader.usf Depth \u5199\u5165 Color.a\uff08HDR_LINIAR_64 \u5f00\u542f\u60c5\u51b5\u4e0b\uff09 MobileBasePass.cpp line-25 IsMobileHDR() \u5219\u8bbe\u7f6e HDR_LINIAR_64 \u63a7\u5236\u53f0\u53d8\u91cf r.MobileHDR \u53d8\u91cf\u975e\u5e38\u91cd\u8981 Pass \u653e\u5728 ToneMapping \u4e4b\u540e \u76f4\u63a5\u8bfb\u53d6 Depth Texture \u6df1\u5ea6\u83b7\u53d6 SceneTexturesCommon.usf \u4e2d CalcSceneDepth \u51fd\u6570\u8c03\u7528 line-92 \u5f00\u59cb \u53c2\u8003\u8d44\u6599 https://www.itread01.com/content/1538656694.html https://tech.spaceapegames.com/2018/09/06/motion-blur-for-mobile-devices-in-unity/","title":"\u79fb\u52a8\u8bbe\u5907\u8fd0\u52a8\u6a21\u7cca-\u865a\u5e7b\u5f15\u64ce"},{"location":"ue4/motion-blur/#-","text":"","title":"\u79fb\u52a8\u8bbe\u5907\u8fd0\u52a8\u6a21\u7cca-\u865a\u5e7b\u5f15\u64ce"},{"location":"ue4/motion-blur/#_1","text":"MobileShadingRenderer.cpp \u4e2d \u201cFMobileSceneRenderer::Render\u201d","title":"\u5b9a\u4f4d\u4fee\u6539\u4f4d\u7f6e"},{"location":"ue4/motion-blur/#shader","text":"\u5982\u4f55\u4e3a UE4 \u6dfb\u52a0\u5168\u5c40\u7740\u8272\u5668 Shader \u5bf9\u5e94\u7684 .cpp \u7ee7\u627f FGlobalShader \u7c7b \u5c06\u8be5 Shader Type \u6ce8\u518c\u5230 UE4 \u7684\u5217\u8868 \u7ee7\u627f TRenderingCompositePassBase\uff0c\u8986\u5199 Process \u7ec4\u5408 Shader \u8bbe\u7f6e State \u7ed8\u5236","title":"\u81ea\u5b9a\u4e49 Shader \u7f16\u5199"},{"location":"ue4/motion-blur/#_2","text":"Source/Runtime/Renderer/Private/PostProcess \u5b58\u653e Passes PostProcessing.cpp FPostProcessing::ProcessES2 \u5b89\u5353\u8bbe\u5907\u6e32\u67d3\u8c03\u7528 PostProcessMobile.cpp \u542b\u591a\u4e2a\u7ee7\u627f TRenderingCompositePassBase \u7684\u7c7b\uff08ProcessES2 \u4e2d\u4f7f\u7528\uff09 PostProcessMotionBlur.cpp \u539f\u8fd0\u52a8\u6a21\u7cca\u5b9e\u73b0 Source/Runtime/Renderer/Private/ \u5b58\u653e\u4e3b\u6e32\u67d3 Pipeline DeferredShadingRenderer.cpp\uff08PC \u7aef\u6e32\u67d3\u5165\u53e3\uff09 MobileShadingRenderer.cpp \uff08\u79fb\u52a8\u7aef\u6e32\u67d3\u5165\u53e3 FMobileSceneRenderer::Render \u4e2d\u8c03\u7528 FPostProcessing::ProcessES2\uff09","title":"\u76ee\u5f55\u7ed3\u6784"},{"location":"ue4/motion-blur/#_3","text":"\u7740\u8272\u5668\u5f00\u53d1 | \u865a\u5e7b\u5f15\u64ce\u6587\u6863 r.ShaderDevelopmentMode \u8bbe\u7f6e\u4e3a 1 ctrl+shift+. \u91cd\u65b0\u7f16\u8bd1\u7740\u8272\u5668","title":"\u8c03\u8bd5\u65b9\u5f0f"},{"location":"ue4/motion-blur/#_4","text":"Source/Runtime/Renderer/Private/PostProcess/MobilePostProcessMotionBlur.h .cpp \u5b9e\u73b0\u65b0 Pass\uff0c\u5e76\u8986\u5199 Process \u53c2\u8003 PostProcessing.cpp line-1693 MotionBlur \u5982\u4f55\u5c06 Pass \u653e\u8fdb ::Process \u4e2d\uff08Mobile \u7aef\u662f ProcessES2\uff09\uff0cFPostProcessing::Process \u540e\u7eed\u88ab ::Render \u8c03\u7528 \u521b\u5efa FRenderCompositePass * \u53d8\u91cf FinalOutput = FRenderCompositeOutputRef(Pass) \u4f7f\u7528\u672c \u6559\u7a0b \uff0c\u5c06 RenderMyPass \u6dfb\u52a0\u5230 RenderFog \u4e4b\u540e\uff0c\u8fd0\u884c\u5230 checkSlow(RHICmdList.IsOutsideRenderPass()) \u629b\u51fa\u5f02\u5e38 \u5f15\u8d77\u539f\u56e0\uff1a\u672a\u67e5\u660e \u89e3\u51b3\u65b9\u6848\uff1aSceneContext.BeginRenderingSceneColor \u540e\u672a\u8c03\u7528 SceneContext.FinishRenderingSceneColor \u57fa\u7840\u7248\u672c\u5b8c\u6210\uff0c\u6211\u4eec\u80fd\u52a0\u5165\u81ea\u884c\u7f16\u5199\u7684\u5168\u5c40\u7740\u8272\u5668\u4e86 \u67e5\u627e\u8fd0\u52a8\u6a21\u7cca\u5728 ES2 \u4e2d\u52a0\u5165\u4f4d\u7f6e usf \u5728 PostProcess \u76ee\u5f55\u4e0b SceneView.h \u4e2d\u5b9a\u4e49\u4e86\u4f17\u591a\u5750\u6807\u8f6c\u6362\u5de5\u5177\uff0c\u4f7f\u7528 ClipToPrevClip \u8ba1\u7b97\u5f53\u50cf\u7d20\u5728\u4e0a\u4e00\u5e27\u7684\u4f4d\u7f6e \u5b9e\u73b0 GPU Gem 3 Motion Blur \u5229\u7528\u5f15\u64ce Stencil \u529f\u80fd\u6dfb\u52a0 Mask \u5c06 Sample \u6570\u91cf\u8bbe\u7f6e\u4e3a\u53c2\u6570 \u627e\u51fa\u7f16\u8f91\u5668\u4e0d\u6b63\u786e\u8868\u73b0\u7684\u539f\u56e0\uff1aToneMapping \u540e\u7eb9\u7406\u5927\u5c0f\u4e0e\u5b9e\u9645\u8f93\u51fa\u5927\u5c0f\u4e0d\u4e00\u81f4 \u8fd0\u52a8\u5411\u91cf\u53ef\u89c6\u5316 \u5b89\u5353\u8bbe\u5907\u8c03\u8bd5 \u5173\u95ed MSAA\uff0c\u83b7\u53d6\u6df1\u5ea6 \u4fee\u590d\u5b89\u5353\u56fe\u5f62 API \u517c\u5bb9\u6027(TODO) \u6ce8\u610f\u8fd0\u52a8\u5411\u91cf\u7684\u8ba1\u7b97 \u7a0b\u5e8f\u7a33\u5b9a\u6027(TODO) \u56fe\u5f62 API \u5750\u6807\u7cfb \u80fd\u5426\u83b7\u53d6\u6b63\u786e\u7684\u6df1\u5ea6\u6750\u8d28\uff08\u81f3\u5c1116\u4f4d\u6d6e\u70b9\u6570\uff09 \u80fd\u5426\u83b7\u53d6\u6b63\u786e\u7684 Mask \u6027\u80fd\u6d4b\u8bd5 \u6dfb\u52a0\u9879 \u52a0\u4e00\u4e2a Pass \u5bfc\u51fa Color.a \u76f4\u63a5\u5728 PostProcessing \u91cc\u6dfb\u52a0 \u76f4\u63a5\u8ba1\u7b97 Velocity \u6d4b\u8bd5\u6027\u80fd RenderDoc \u9634\u5f71\u6e32\u67d3\u4e2d\u6709\u4e00\u4e2a PerObject Rendering\uff0c\u6e32\u67d3\u573a\u666f\u4e2d\u7684\u52a8\u6001\u7269\u4f53\uff0cVelocity \u4e2d\u9700\u8981\u6311\u9009\u51fa\u52a8\u6001\u7269\u4f53 Plan\uff1a\u6311\u9009\u52a8\u6001\u7269\u4f53\uff0c\u4f7f\u7528 Velocity Rendering \u6e32\u67d3\u5230\u7eb9\u7406\u4e0a\uff0c\u53c2\u9605\u7f51\u683c\u4f53\u7ed8\u5236\u5b98\u65b9\u6587\u6863 MotionBlur \u524d\u6e32\u67d3 RG16F \u7684 Velocity RenderVelocities \u6dfb\u52a0\u5230 Mobile PC ClearRenderTarget\uff0c\u540e\u7eed\u6ca1\u4e86\uff0c\u539f\u56e0\uff1a\u6ca1\u6709 Register Velocity \u5230 Mobile \u79fb\u52a8\u7aef gl_clear \u540e\u672a\u7ed8\u5236\uff0c\u539f\u56e0\uff1aAddMesh \u5bf9\u7eb9\u7406\u683c\u5f0f\u8fdb\u884c\u5224\u65ad\uff0c\u5931\u8d25\u540e\uff0c\u672a\u6dfb\u52a0 Mesh \u5b8c\u6210\u6b64\u6b65\u9aa4 \u901f\u5ea6\u91cd\u5efa\u6ee4\u6ce2 \u8ba1\u7b97\u5168\u5c4f Velocity \u7b97\u9519\u4e86\uff0cprevious \u8ba1\u7b97\u9519\u8bef E:\\UnrealEngine\\Engine\\Source\\Runtime\\Renderer\\Private\\VelocityRendering.cpp\uff0cGPUSkinCachePreviousPositionBuffer bool SupportsVelocity() const E:\\UnrealEngine\\Engine\\Source\\Runtime\\Engine\\Private\\GPUSkinCache.cpp \u91cd\u5199 VelocityFlatten \u68b3\u7406 \u6536\u5c3e\u5de5\u4f5c MSAA \u5f00\u542f\u540e\uff0c\u4f7f\u7528 FrameBufferFetch \u83b7\u53d6\u6df1\u5ea6 \u4fee\u590d StaticMesh \u901f\u5ea6\u8ba1\u7b97\u9519\u8bef\u95ee\u9898\uff1aRenderDoc \u7684\u95ee\u9898\uff0c\u622a\u53d6\u540e View PrevView \u5b8c\u5168\u4e00\u6837\uff0c\u672a\u627e\u5230\u539f\u56e0 \u4e0d\u7528 RenderDoc \u6293\u53d6\u5c31\u6ca1\u95ee\u9898 \u6548\u7387\u4f18\u5316 Decal \u80fd\u83b7\u53d6\u6b63\u786e\u7684\u6df1\u5ea6 Lookupdevicez SceneTexturesCommon.ush \u56e0\u4e3a\u7528\u4e86 FrameBufferFetch ES2 \u82e5\u652f\u6301 fetch \u5c31 fetch\uff0c\u5426\u5219\u4f7f\u7528 SceneDepthTexture ES31 \u4f7f\u7528 depth fetch\uff0c\u5426\u5219 framebufferfetch color.a \u8ddf\u8e2a SceneDepthTexture \u5982\u4f55\u4e0e Surface \u5173\u8054\u4e0a\u7684 Surface \u662f target texture \u662f texture \u4e00\u79cd\u4e1c\u897f\u7684\u4e24\u79cd\u53eb\u6cd5\uff1f \u5173\u95ed MSAA \u786e\u5b9e\u7ed1\u5b9a\u4e86 Depth Texture \u5f00\u542f MSAA\uff0c\u7ed1\u5b9a\u4e86\u4e00\u5f20\u65e0\u6548\u7684 Texture \u4e0a Render \u5230\u4e86 renderbuffer\uff0c\u662f\u5426\u548c renderbuffer \u53ea\u5199\u6709\u5173 \u5207\u6362 Render Target \u80fd Resolve \uff1f \u5b9e\u9645\u53ea\u6709 Color Resolve Multisampling Considerations Multisampling is supported with the Default Framebuffer (through WGL/GLX_multisample) and/or Framebuffer Objects (through multisampled renderbuffers or textures, where supported). As explained in the article on Multisampling, a multisampled buffer must be resolved into a single sample before it can be displayed. When the default framebuffer uses multisampling, this resolving operation is automatic, occurring during framebuffer swapping (though reading from the framebuffer can cause it to happen anyway). https://community.khronos.org/t/fbo-renderbuffer-vs-texture/65933 RBOs are like a texture with a hint - that you won\u2019t expect some functionality from them. The driver can speedup rendering to them. Yet, on most modern cards, the performance difference is almost zero. Only on mobile hardware they can make any difference, to save battery - if the driver detects you\u2019re properly using glClear on frame-start. Basically use RBs only if you know you\u2019ll never need the data to be used as a texture. https://stackoverflow.com/questions/17699087/multisampling-on-ios-cant-get-depth-texture \u82f9\u679c\u4e0a\u53ea Resolve Color \u7ed3\u675f \u67e5\u770b Deferred Motion Blur \u53c2\u6570\uff0c\u4e3a Gem 3 \u63d0\u4f9b\u601d\u8def \u79fb\u690d Unity Github \u5f00\u6e90\u7248\u672c \u6548\u679c\u4e00\u822c\u822c 14\u5e74 \u5f53\u524d\u5148\u91c7\u53d6\u4e24\u4e2a\u6837\u672c\u65b9\u5411 \u53ef\u662f\u91c7\u6837\u5b9e\u9645\u901f\u5ea6\u53d1\u73b0\uff0c\u5b9e\u9645\u901f\u5ea6\u8fdc\u5927\u4e8eMaxTile\uff1f\uff1f\uff1f\uff1f \u770b\u8d77\u6765\u53ea\u67098\u4e2a\u6837\u672c\u70b9\uff0c\u4e00\u8fb9\u56db\u4e2a \u5b8c\u6210\u51e0\u4e2a\u573a\u666f\u5bf9\u6bd4\uff0c\u8bc1\u660e14Paper\u89e3\u51b3\u7684\u95ee\u9898 \u8f66\u8f6e\u5bf9\u6bd4 ok \u7f29\u8fdb\u5bf9\u6bd4 ok \u539f\u59cb\u989c\u8272\u6743\u91cd\u5927\uff1a\u88ab\u629b\u5f03\u7684\u989c\u8272\u8fc7\u591a\u5bfc\u81f4 wa \u8ba1\u7b97\u7ed3\u679c\u5bfc\u81f4\u5927\u91cf\u6837\u672c\u70b9\u6743\u91cd\u4e3a0\uff0c\u4fee\u590d\u6743\u91cd\u8ba1\u7b97\u8fc7\u7a0b\u4e2d\u7684\u95ee\u9898","title":"\u5b9e\u8df5"},{"location":"ue4/motion-blur/#_5","text":"List \u63cf\u8ff0 RenderVelocities MSAA \u60c5\u51b5\u4e0b\u65e0\u6cd5 Fetch \u6df1\u5ea6 TODO \u63cf\u8ff0 Gem 3 \u53ef\u7528\u7248\u672c \u5173\u4e8e Stencil \u7684\u7528\u6cd5\uff0c\u51b3\u5b9a\uff1bMax Velocity \u7684\u9650\u5236 Deferred \u53ef\u7528\u7248\u672c \u68c0\u67e5 Velocity Depth Buffer \u7ed1\u5b9a\uff0cFullScreen \u80fd\u5426\u88ab\u4f18\u5316\u6389 \u5f84\u5411\u52a8\u6001\u6a21\u7cca - \u67e5\u770b\u52a8\u6001\u6a21\u7cca\u5df2\u6709\u53c2\u6570 - \u5b8c\u6210\u4e00\u4e2a Demo \u7528\u4e8e\u5c55\u793a\u5b8c\u6210\u7684\u5de5\u4f5c","title":"\u95ee\u9898\u5217\u8868"},{"location":"ue4/motion-blur/#resolve","text":"MS->1S \u79fb\u52a8\u7aef\u7247\u4e0a\u5185\u5b58\u5185\u5bb9\u5199\u56de","title":"Resolve \u542b\u4e49"},{"location":"ue4/motion-blur/#_6","text":"\u6d4b\u8bd5\u73af\u5883\uff1a\u5c0f\u7c736 \u5206\u8fa8\u7387\uff1a720p Motion Blur\uff08GPU Gem 3\uff0c\u91c7\u68378bitColor\uff0cStencil 1spp\uff09 1spp 5spp 10spp - 0.6ms 1.3ms 2.1ms Motion Blur\uff08GPU Gem 3\uff0c\u91c7\u68378bitColor\uff0cStencil 1spp\uff09 4spp 6spp 8spp - 1.8ms 2.3ms 2.8ms Motion Blur\uff08GPU Gem 3\uff0c\u91c7\u68378bitColor\uff0cStencil 1spp\uff09 1spp 4spp 6spp 8spp - 0.9ms 1.4ms 1.8ms 2.0ms Motion Blur\uff08GPU Gem 3\uff0c\u91c7\u68378bitColor\uff0cStencil 1spp\uff09 1spp 4spp 6spp 8spp - 0.6ms/1.1ms\uff1f - - - Color.a to Depth Time - 0.6ms Custom Depth\uff08\u4ec5\u8f7d\u5177 ~10w Vertex\uff09 Time - 0.3ms Render Velocities\uff08\u4ec5\u8f7d\u5177 ~10w Vertex\uff09 Time - 0.6ms Flatten Velocity 4 Pass Downsample 16x - 0.8ms Scatter Velocity - - 0.25ms Full Screen Velocity - - 1.3ms Motion Blur\uff08Deferred \u4e2d\u7684\uff0c\u653e\u5728 Tone mapping \u4e4b\u540e\uff09 16spp 8spp 6spp 4spp - 10.4 ms 4.7ms 3.4ms 2.5ms Pass Gem 3 Deferred \u65f6\u95f4\uff08720P\uff09 Mesh Draw Custom Depth \u2714 0.3ms Render Velocity \u2714 0.6ms PostProcessing Copy Depth \u2714 0.6ms Full Screen Velocity \u2714 1.3ms MaxTile/Flatten \u2714 0.8ms NeighborMax \u2714 0.3ms Motion Blur Deferred \u2714 - Motion Blur Gem 3 \u2714 - Totoal 4spp 2.7ms 5.5ms Totoal 6spp 3.3ms 6.4ms Totoal 8spp 3.7ms 7.7ms","title":"\u6027\u80fd"},{"location":"ue4/motion-blur/#profile","text":"RenderDoc \u6bcf\u6b21 Profile \u65f6\u95f4\u5dee\u5f02\u8f83\u5927 motion-blur-profile.png","title":"Profile \u6027\u80fd\u5206\u6790"},{"location":"ue4/motion-blur/#todo","text":"\u65b9\u68481\uff1a RenderVelocity\uff08\u8f7d\u5177\uff09->RenderVelocity\uff08\u5168\u5c4f+Depth\uff09->Gather","title":"TODO"},{"location":"ue4/motion-blur/#_7","text":"\u8f93\u5165\u8f93\u51fa\u8ba8\u8bba Input Color RGB\u3001A \u4e3a\u6df1\u5ea6 \u91c7\u6837\u3001\u52a0\u6743\u6df7\u5408 \u4f4d\u7f6e\u8ba8\u8bba ::Process ToneMapping \u4e4b\u540e\uff08\u91c7\u6837\u5e26\u5bbd\u6700\u5c0f\uff09 \u5173\u4e8e\u6df1\u5ea6 Color.a \u5168\u9ed1 LookupDevicZ \u7528\u5230\u7684\u662f \uff1f Android ES2 \u5e95\u5c42\u7528\u5230\u7684\u662f OpenGL API\uff1f \u5173\u4e8e\u9884\u89c8\u6e32\u67d3\u7ea7\u522b SM5\u3001SM4\u3001IOS\u3001Android ES2\u3001HTML5 \u548c\u5e95\u5c42\u4f7f\u7528\u7684 API\uff08D3D\u3001Vulkan\u3001OpenGL\uff09\u6709\u4ec0\u4e48\u5173\u8054\uff1f \u56fe\u5f62 API \u5b9a\u4e49\u4e86\u81ea\u5df1\u7684 Capability \uff0c\u53ef\u4ee5\u5728 D3D \u4e0a\u4f7f\u7528 ES2 \u7ea7\u522b\u7279\u6027 \u5b9a\u4e49 Feature Level \u53ea\u662f\u8ba9 Shader \u8d70\u53e6\u4e00\u5957 \u5750\u6807\u7cfb UE4 \u5750\u6807\u7a7a\u95f4\u672f\u8bed OpenGL \u6df1\u5ea6\u6d4b\u8bd5 OpenGL NDC\u53d8\u6362 \u8f6c\u6362\u4e3a\u4e16\u754c\u5750\u6807 \u5f53\u524d\u5df2\u6709 Z/W\uff0c\u5229\u7528 InvWVProjection + WVP \u6295\u5c04\u56de\u4e0a\u4e00\u5e27 \u56de\u7b97\u51fa World \u5750\u6807 \u83b7\u53d6\u53d8\u6362\u77e9\u9635 ShaderCompiler.cpp line-2675 GenerateInstacedStereoCode MobileBasePassVertexShader.usf line-72 TranslatedWorldToClip SceneView.cpp line-2221 TranslatedWorldToClip ClipToTranslatedWorld line-247 Z=0 \u8fdc\u5e73\u9762/ Z=1 \u8fd1\u5e73\u9762 GenerateInstacedStereoCode \u54c7\uff0c\u81ea\u52a8\u751f\u6210 Shader \u4ee3\u7801 Fatal Error: Shaders Expected a uniform buffer of struct type \u65b9\u6cd5\uff1a\u8ddf\u8e2a Sunmask \u53c2\u6570 Bind \u8fc7\u7a0b \u73b0\u8c61\uff1a\u6bcf\u6b21\u9700\u8981\u6539\u52a8\u4e00\u6b21 Shader \u540e\u624d\u80fd\u542f\u52a8\u6e38\u620f \u539f\u56e0\u627e\u5230\uff1a\u5e8f\u5217\u5316\u4e0d\u6b63\u786e \u6839\u636e Sunmask \u4fee\u6539 Serialize \u51fd\u6570 Shader \u8f7d\u5165\u6b63\u5e38 \u6027\u80fd\u95ee\u9898 Post Process \u548c Framebuffer Fetch \u65e0\u5173 \u67e5\u4e0b UV \u548c NDC \u5750\u6807\u7684\u5173\u7cfb OpenGL UV XY \u671d\u5411\u4e00\u81f4 D3D \u4e0d\u4e00\u81f4 \u5173\u4e8e\u7f16\u8f91\u5668\u4e2d\u91c7\u6837\u4e0d\u6b63\u786e \u7f16\u8f91\u5668\u521d\u59cb\u7eb9\u7406\u521b\u5efa 1920x1040 \u91c7\u6837\u8d85\u51fa\u8fb9\u754c\u65f6\uff0c\u5f97\u5230\u9ed1\u8272\u50cf\u7d20 \u540e\u5904\u7406\u753b\u7684\u662f\u4e09\u89d2\u5f62\uff0cRenderDoc \u67e5\u770b\uff0c\u5229\u7528\u4e86 GPU \u5149\u6805\u5316\u7684\u5254\u9664\u529f\u80fd UV \u975e\u5168\u90e8\u8986\u76d6\u5c4f\u5e55\u7684\u56db\u8fb9\u5f62\uff0c\u53ea\u8986\u76d6\u4e86\u4e00\u90e8\u5206\uff0c\u5bfc\u81f4\u8fd0\u52a8\u5411\u91cf\u4e0d\u6b63\u786e \u5173\u952e\u5728\u4e8e DrawRect .cpp \u6587\u4ef6\u91cc\u7684\u63a7\u5236\u53c2\u6570 \u91c7\u6837\u7684\u95ee\u9898 1 Sample Point\uff0c\u5374\u67092\u79cd\u989c\u8272\uff1f \u7f16\u8f91\u5668\u91cc\u6ca1\u95ee\u9898\uff0c\u64ad\u653e\u90fd\u6709\u95ee\u9898 PostProcessAA \u7684\u95ee\u9898\uff0c\u592a\u6050\u6016\u4e86\u8fd9\u6548\u679c DrawRectangle \u5206\u6790 InPosition \u662f\u4e2a\u4e09\u89d2\u5f62\uff0c\u5b9e\u9645\u4e0a\u9700\u8981\u501f\u52a9 GPU \u8fdb\u884c\u88c1\u526a\uff0c\u6211\u4eec\u4ec5\u4f7f\u7528\u4e09\u89d2\u5f62\u4e2d\u622a\u53d6\u7684\u6b63\u65b9\u5f62\u533a\u57df\uff0c\u8be5\u533a\u57df InPosition \u8303\u56f4\u4e3a [0, 1]\u3002 X\uff0cY \u4e3a Target \u4e0a\u7684\u504f\u79fb\u91cf SizeX\uff0cSizeY \u7406\u89e3\u7ed8\u5236\u533a\u57df\u5927\u5c0f PosScaleBias \u5408\u8d77\u6765\u7406\u89e3\u4e3a\u5728 Target \u4e0a\u6e32\u67d3\u7684\u957f\u65b9\u5f62\u4f4d\u7f6e\u3001\u5927\u5c0f U\uff0cV \u4e3a Texture \u4e0a\u7684\u504f\u79fb\u91cf SizeU\uff0cSizeV \u4e3a Texel \u6570\u91cf UVScaleBias \u5408\u8d77\u6765\u4e3a Texture \u4e0a\u7684\u504f\u79fb\u91cf\u548c\u5927\u5c0f // SceneFilterRendering.cpp // Set up vertex uniform parameters for scaling and biasing the rectangle. // Note: Use DrawRectangle in the vertex shader to calculate the correct vertex position and uv. FDrawRectangleParameters Parameters ; Parameters . PosScaleBias = FVector4 ( SizeX , SizeY , X , Y ); Parameters . UVScaleBias = FVector4 ( SizeU , SizeV , U , V ); Parameters . InvTargetSizeAndTextureSize = FVector4 ( 1.0f / TargetSize . X , 1.0f / TargetSize . Y , 1.0f / TextureSize . X , 1.0f / TextureSize . Y ); // Common.ush /** Used for calculating vertex positions and UVs when drawing with DrawRectangle */ void DrawRectangle ( in float4 InPosition , in float2 InTexCoord , out float4 OutPosition , out float2 OutTexCoord ) { OutPosition = InPosition ; OutPosition . xy = - 1.0f + 2.0f * ( DrawRectangleParameters . PosScaleBias . zw + ( InPosition . xy * DrawRectangleParameters . PosScaleBias . xy )) * DrawRectangleParameters . InvTargetSizeAndTextureSize . xy ; OutPosition . xy *= float2 ( 1 , - 1 ); OutTexCoord . xy = ( DrawRectangleParameters . UVScaleBias . zw + ( InTexCoord . xy * DrawRectangleParameters . UVScaleBias . xy )) * DrawRectangleParameters . InvTargetSizeAndTextureSize . zw ; } \u91c7\u6837\u6d41\u7a0b Position \u91c7\u6837\u4f7f\u7528 ToneMapping UV\uff08\u548c Position \u4e00\u81f4\uff09 UE4-\u5b89\u5353\u8c03\u8bd5\u914d\u7f6e \u5b89\u88c5 Codeworks for Android \u6e38\u620f\u9879\u76ee\u8bbe\u7f6e \u6253\u5305\u5931\u8d25 [INSTALL_FAILED_USER_RESTRICTED: Install canceled by user] \u5141\u8bb8 App \u901a\u8fc7 USB \u5b89\u88c5 \u6027\u80fd\u5206\u6790 UE4 \u6027\u80fd\u4f18\u5316\u65b9\u6cd5(\u5de5\u5177\u7bc7) \u79fb\u52a8\u7aef GPU \u5206\u6790 adreno profiler NVIDIA Tegra Graphics Debugger ImgTec PVRTune and PVRTrace ARM Mali Graphics Debugger RenderDoc \u9760\u76ee\u6d4b stat unit \u4e0a\u8fb9\u90fd\u662f\u9519\u7684\uff0c\u76f4\u63a5\u7528 RenderDoc\uff0c\u81ea\u5e26\u65f6\u95f4\u5206\u6790 \u5c0f\u7c73 6\uff0cRenderDoc \u6d4b\u8bd5 10 \u6837\u672c 2.5 ms GLSL-ES2 Motion \u8868\u73b0\u4e0d\u6b63\u786e \u5173\u95ed MSAA \u5373\u53ef\uff0cMSAA \u5bfc\u81f4 Depth \u83b7\u53d6\u5931\u8d25 API \u9002\u914d Stencil\u3001Depth UV \u4ecd\u662f FlipV \u7684","title":"\u8ba8\u8bba\uff1a"},{"location":"ue4/motion-blur/#glsl_es2-tonemapping","text":"// PostProcessToneMap.usf #define NEEDTOSWITCHVERTICLEAXIS (ES2_PROFILE && COMPILER_GLSL_ES2) || (ES3_1_PROFILE && COMPILER_GLSL_ES3_1) \u5229\u7528\u4e86\u4ee5\u4e0a\u5b8f\u8fdb\u884c\u5224\u65ad","title":"GLSL_ES2 \u6e32\u67d3 ToneMapping \u65f6\u7eb9\u7406\u53cd\u8f6c\u56de\u6765\u4e86"},{"location":"ue4/motion-blur/#_8","text":"MSAA \u5bfc\u81f4 Depth Texture \u65e0\u6cd5\u83b7\u53d6 ConditionResolveDepth \u6dfb\u52a0 Pass \u5f3a\u5236\u5199\u5165 Depth Graphics API \u5750\u6807\u7cfb\u5bfc\u81f4\u91c7\u6837\u4e0d\u6b63\u786e ToneMapping \u524d\u91c7\u6837\u5f00\u9500\u5de8\u5927\uff08RGBA16\uff09 Motion \u52a0\u5728 Tonemapper \u524d\uff0cDepth \u4e0d\u6b63\u786e\uff0c\u4f46\u662f\u7528 RenderDoc \u91c7\u6837\u540e\uff0c\u53c8\u8868\u73b0\u6b63\u5e38","title":"\u76ee\u524d\u5df2\u77e5\u7684\u9700\u8981\u6ce8\u610f\u7684\u95ee\u9898"},{"location":"ue4/motion-blur/#msaa","text":"PostProcess \u6700\u5f00\u59cb\u63d2\u5165\u4e00\u4e2apass \u628acolor.a \u5199\u5165\u4e00\u5f20\u7eb9\u7406 \u6d4b\u8bd5\u4e0b Decal\u3001 \u5f00\u542f MSAA \u662f\u5426\u771f\u7684\u6709\u95ee\u9898","title":"\u89e3\u51b3\u65b9\u6848 MSAA \u65e0\u6cd5\u5f97\u5230\u6df1\u5ea6"},{"location":"ue4/motion-blur/#glsl_es","text":"- bool FMobileSceneRenderer :: RequiresTranslucencyPass ( FRHICommandListImmediate & RHICmdList , const FViewInfo & View ) const \u76f4\u63a5\u4f7f\u7528 Color.a \u5219\u65e0\u95ee\u9898 \u4f7f\u7528 Depth Texture \u6709\u989d\u5916\u5f00\u9500 MSAA \u4e0d\u4f1a Resolve Depth Texture UE4 \u7740\u8272\u5668\u8de8\u5e73\u53f0\u5206\u6790 Nvidia GDC 2014 Frame Buffer \u4e0a\u4e0b\u53cd\u8fc7\u6765\u6e32\u67d3\uff1aUV \u5c31\u80fd\u6b63\u786e\u91c7\u6837\u4e86 \u95ee\u9898\u5728\u4e8e\uff0cToneMapping \u6b63\u8fc7\u6765\u4e86... \u5148\u53c2\u8003\u4e0b SM5 \u4e2d Velocity \u7684\u8ba1\u7b97 Velocity \u8ba1\u7b97\u4e00\u5982\u65e2\u5f80 Last Clip Clip \u91c7\u6837\u7167\u5e38\u91c7\u6837\uff1f \u76f4\u63a5\u8ba1\u7b97 Vehicle \u7684\u901f\u5ea6\u5411\u91cf OpenGL UV \u589e\u52a0\u65b9\u5411\u4e0e \u901f\u5ea6\u4e0d\u6b63\u786e \u5750\u6807\u7cfb\u8f6c\u6362\u53c2\u8003\u4e86 visualize motion \u540e\uff0c\u51d1\u5bf9\u4e86 OpenGL \u6295\u5f71\u77e9\u9635\u4e0e D3D \u4e00\u81f4\uff0cShader \u67d0\u5904\u505a\u4e86\u5904\u7406\uff0c\u67e5\u9605 \u6700\u7ec8\u91c7\u6837\u7ed3\u679c\u4e0d\u6b63\u786e\uff0cVelocity \u6a2a\u5411\u91c7\u6837\uff1f","title":"GLSL_ES \u517c\u5bb9\u6027"},{"location":"ue4/motion-blur/#velocity-buffer","text":"Velocity \u6e32\u67d3\u7ed3\u679c\u6709\u7f3a\u5931 \u95ee\u9898\u8868\u73b0\uff1a RenderDoc \u67e5\u770b\u672a\u901a\u8fc7 Depth Test Clear \u524d\u6709\u503c\u7684\u88abClear\u4e14\u901a\u4e0d\u8fc7 Depth Test Clear \u524d\u65e0\u503c\u7684\u901a\u8fc7\u4e86Depth Test Render \u4f4d\u7f6e\u9519\u4e86\uff0c\u4f7f\u7528\u4e86\u4e0a\u4e00\u5e27\u7684 Depth Flatten \u5931\u8d25\uff1a bool SupportsVelocity () const { return GPUSkinCachePreviousPositionBuffer . IsBound () || PrevTransformBuffer . IsBound () || ( PrevTransform0 . IsBound () && PrevTransform1 . IsBound () && PrevTransform2 . IsBound ()) || //@todo MeshCommandPipeline - now that PreviousLocalToWorld is in the primitive uniform buffer, we can't look at whether the shader bound it to cull what gets rendered in velocity pass true ; } \u4e0a\u8fb9\u4ee3\u7801\u6700\u540e\u4e00\u4e2a\u8fd4\u56de true \u7ee7\u7eed\u67e5\u770b float4 PrevTranslatedWorldPosition = VertexFactoryGetPreviousWorldPosition ( Input , VFIntermediates ); float4 VertexFactoryGetPreviousWorldPosition ( FVertexFactoryInput Input , FVertexFactoryIntermediates Intermediates ) float3 SkinPreviousPosition ( FVertexFactoryInput Input , FVertexFactoryIntermediates Intermediates ) FBoneMatrix CalcPreviousBoneMatrix ( FVertexFactoryInput Input ) FBoneMatrix GetPreviousBoneMatrix ( int Index ) OutEnvironment . SetDefine ( TEXT ( \"GPUSKIN_USE_BONES_SRV_BUFFER\" ), SupportsBonesBufferSRV ( Platform ) ? 1 : 0 ); \u4fee\u6539\u51e0\u4e2a\u5730\u65b9\u540e\uff0c\u80fd\u591f\u6e32\u67d3\u51fa\u901f\u5ea6 \u9700\u8981\u6392\u67e5\u5177\u4f53\u90a3\u4e2a\u56e0\u7d20\u5bfc\u81f4\u7684 #define GPUSKIN_USE_BONES_SRV_BUFFER 1 // Use a Buffer<float4> if 1, otherwise a uniform buffer","title":"\u8ba1\u7b97 Velocity Buffer"},{"location":"ue4/motion-blur/#14-motion-blur","text":"\u7eaf\u4f7f\u7528 Vc \u65f6\uff0c\u6837\u672c\u6743\u91cd\u90fd\u5f88\u5c0f\uff0c\u5bfc\u81f4\u91c7\u6837\u7ed3\u679c\u5f88\u6de1 \u5728\u901f\u5ea6\u975e\u5e38\u5927\u65f6\u4f1a\u51fa\u73b0\u4e0a\u8ff0\u7ed3\u679c \u901f\u5ea6\u6781\u5927\u7684\u65f6\u5019\uff0cMaxTile \u901f\u5ea6\u751a\u81f3\u4e0d\u5982\u5b9e\u9645 Center \u7684\u901f\u5ea6\uff1f \u89e3\u51b3\u4e86\uff0cFlatten \u65f6\u5019\u9650\u5236\u4e86\u6700\u5927\u901f\u5ea6\uff0cMotionBlurParameters.w Sample \u65f6\u5019\u8def\u5f84\u5f88\u957f\uff0c\u4f46\u91c7\u6837\u8def\u5f84\u5f88\u77ed","title":"14 Motion Blur"},{"location":"ue4/motion-blur/#tips","text":"\u76ee\u6807\uff1aUE4 ES2 \u5982\u4f55\u4f7f\u7528 Depth Texture\u3001Depth Texture \u5728\u54ea\u8bbe\u7f6e SunMask \u81ea\u52a8\u67e5\u627e Shader \u4e2d\u7684 Texture \u4f7f\u7528\u60c5\u51b5\u5e76\u8fdb\u884c\u7ed1\u5b9a SceneRenderTargetParameters.h line-132 PostProcessMobile.usf SunMaskPS_ES2 PostProcessMobile.cpp line-905 Bind SceneTextureCommon.ush line-35 CalcSceneDepth \u65b9\u6cd5\u4ece SceneTexturesStruct.SceneDepthTexture \u91c7\u6837 SceneTexturesStruct \u5728 SceneRenderTarget SunMask Pass \u6d41\u7a0b FRCPassPostProcessSunMaskES2::Process \u4e2d\u4f7f\u7528\u4e86 SetShader PostProcessMobile.cpp FRCPassPostProcessSunMaskES2::SetShader \u6839\u636e\u53c2\u6570\u521b\u5efa Shader Process \u4e2d\u6839\u636e GetInputDesc(ePId_Input0) \u6765\u786e\u8ba4\u662f\u5426\u4f7f\u7528 DepthTexture/Color.a\uff08usf \u4e2d\u91c7\u6837 PostProcessInput0) ePId_Input0 \u5728 Render \u521d\u59cb\u5316 TRenderCompositexx \u540e SetInput SceneRenderTarget.cpp line-2362 MobileSceneColorBufferFormat \u53ea\u6709\u4e09\u79cd FloatRGBA FloatR11G11B10 B8G8R8A8\uff0c\u82e5\u8bbe\u5907\u652f\u6301 HDR \u9ed8\u8ba4\u4e3a PF_FloatRGBA PostProcessMobile.cpp line-1075 \u82e5 Input \u6750\u8d28\u4e3a FloatR11G11B10 \u683c\u5f0f\uff0c\u5728\u7740\u8272\u5668\u4e2d\u4f7f\u7528 DepthTexture PostProcessMobile.usf line-107 \u5426\u5219\u4f7f\u7528 Alpha \u901a\u9053\u7684\u6df1\u5ea6\u8868\u793a \u8ffd\u8e2a SceneTexturesStruct \u8bbe\u7f6e/\u4f7f\u7528\u60c5\u51b5 SceneRenderTarget.cpp line-2875 \u51fa\u73b0\u76f8\u5173\u5b8f \u4e0eFSceneTexturesUniformParameters\u5173\u8054 SceneRenderTarget.cpp line-3029 \u51fa\u73b0\u76f8\u5173\u5b8f \u4e0eFMobileSceneTexturesUniformParameters\u5173\u8054 SceneRenderTarget.cpp line-3092 \u53c2\u6570\u7ed1\u5b9a\u65b9\u6cd5 MobileShadingRenderer.cpp line-376 SceneDepth \u5c40\u90e8\u53d8\u91cf \u4e0a\u8ff0 SceneDepth \u6765\u6e90\u4e8e SceneRenderTarget.h/.cpp \u4e2d\u7684 FSceneRenderTargets::SceneDepthZ \u800c SceneDepthZ \u53c8\u4f1a\u5728 Pass \u6784\u9020\u65f6\u5019\uff0cBind \u5230\u5bf9\u5e94\u7684 SceneTexture \u4e0a \u57fa\u7840\u7740\u8272\u65f6\uff0cDepth \u5199\u5165\u60c5\u51b5 MobieBasePassPixelShader.usf Depth \u5199\u5165 Color.a\uff08HDR_LINIAR_64 \u5f00\u542f\u60c5\u51b5\u4e0b\uff09 MobileBasePass.cpp line-25 IsMobileHDR() \u5219\u8bbe\u7f6e HDR_LINIAR_64 \u63a7\u5236\u53f0\u53d8\u91cf r.MobileHDR \u53d8\u91cf\u975e\u5e38\u91cd\u8981 Pass \u653e\u5728 ToneMapping \u4e4b\u540e \u76f4\u63a5\u8bfb\u53d6 Depth Texture","title":"\u5bfc\u5e08 Tips"},{"location":"ue4/motion-blur/#_9","text":"SceneTexturesCommon.usf \u4e2d CalcSceneDepth \u51fd\u6570\u8c03\u7528 line-92 \u5f00\u59cb","title":"\u6df1\u5ea6\u83b7\u53d6"},{"location":"ue4/motion-blur/#_10","text":"https://www.itread01.com/content/1538656694.html https://tech.spaceapegames.com/2018/09/06/motion-blur-for-mobile-devices-in-unity/","title":"\u53c2\u8003\u8d44\u6599"},{"location":"ue4/msaa_depth/","text":"\u79fb\u52a8\u7aef MSAA\uff0cDepth \u83b7\u53d6 \u5367\u69fd\u7ec8\u4e8e\u660e\u767d\u4e86\uff0cResolve\u610f\u601d\u662f\u4ece\u79fb\u52a8\u8bbe\u5907chip\u4e0a\u5199\u56deframebuffer\u5185\u5b58\u3002Conditional Resolve \u662f\u5728 Pass \u540e\u589e\u52a0\u4e00\u4e2a Pass \u7ed1\u5b9a\u7eb9\u7406\u540e\u5f3a\u5236\u524d\u4e00 Pass \u5199\u56de\u3002 FRHIRenderPassInfo SceneColorRenderPassInfo ( SceneColor , ColorTargetAction , SceneColorResolve , SceneDepth , DepthTargetAction , nullptr , // we never resolve scene depth on mobile FExclusiveDepthStencil :: DepthWrite_StencilWrite ); \u89e3\u60d1\u6587\u7ae0 http://www.klayge.org/2013/10/29/discard-frame-buffer%E7%9A%84%E6%8E%A2%E8%AE%A8/","title":"\u79fb\u52a8\u7aef MSAA\uff0cDepth \u83b7\u53d6"},{"location":"ue4/msaa_depth/#msaadepth","text":"\u5367\u69fd\u7ec8\u4e8e\u660e\u767d\u4e86\uff0cResolve\u610f\u601d\u662f\u4ece\u79fb\u52a8\u8bbe\u5907chip\u4e0a\u5199\u56deframebuffer\u5185\u5b58\u3002Conditional Resolve \u662f\u5728 Pass \u540e\u589e\u52a0\u4e00\u4e2a Pass \u7ed1\u5b9a\u7eb9\u7406\u540e\u5f3a\u5236\u524d\u4e00 Pass \u5199\u56de\u3002 FRHIRenderPassInfo SceneColorRenderPassInfo ( SceneColor , ColorTargetAction , SceneColorResolve , SceneDepth , DepthTargetAction , nullptr , // we never resolve scene depth on mobile FExclusiveDepthStencil :: DepthWrite_StencilWrite );","title":"\u79fb\u52a8\u7aef MSAA\uff0cDepth \u83b7\u53d6"},{"location":"ue4/msaa_depth/#_1","text":"http://www.klayge.org/2013/10/29/discard-frame-buffer%E7%9A%84%E6%8E%A2%E8%AE%A8/","title":"\u89e3\u60d1\u6587\u7ae0"},{"location":"ue4/rendering/","text":"\u5f15\u64ce\u6e32\u67d3\u6a21\u5757\uff08\u79fb\u52a8\u7aef\uff09\u865a\u5e7b 4.22.2 Pre-Z UE4\u4f7f\u7528reverse-Z\u6765\u4fdd\u5b58\u6df1\u5ea6\uff0c\u610f\u5473\u7740\u8fd1\u88c1\u9762\u7684\u6df1\u5ea6\u503c\u4e3a1\uff0c\u8fdc\u88c1\u9762\u7684\u6df1\u5ea6\u503c\u4e3a0\u3002\u8fd9\u4f7f\u5f97\u6df1\u5ea6\u7f13\u51b2\u7684\u7cbe\u5ea6\u66f4\u9ad8 Hi-Z Hierarchy-Z\uff0cDepth Mipmap Custom Depth FMobileSceneRenderer :: Render (); FSceneRenderer :: RenderCustomDepthPass (); // Uniform \u8bbe\u7f6e // SetViewport // Antialiased View . ParallelMeshDrawCommandPasses [ EMeshPass :: CustomDepth ]. DispatchDraw ( nullptr , RHICmdList ); BasePass FMobileSceneRenderer :: Render (); FMobileSceneRenderer :: RenderMobileBasePass (); View . ParallelMeshDrawCommandPasses [ EMeshPass :: BasePass ]. DispatchDraw ( nullptr , RHICmdList ); FRegisterPassProcessorCreateFunction RegisterMobileBasePass (); FMeshPassProcessor * CreateMobileBasePassProcessor (); class FMobileBasePassMeshProcessor ; :: AddMeshBatch (); :: Process (); :: BuildMeshDrawCommands (); \u53c2\u8003 \u8bd1\uff1aUE4\u662f\u5982\u4f55\u6e32\u67d3\u4e00\u5e27\u7684\uff081\uff09 https://zhuanlan.zhihu.com/p/57447319","title":"\u5f15\u64ce\u6e32\u67d3\u6a21\u5757\uff08\u79fb\u52a8\u7aef\uff09\u865a\u5e7b 4.22.2"},{"location":"ue4/rendering/#4222","text":"","title":"\u5f15\u64ce\u6e32\u67d3\u6a21\u5757\uff08\u79fb\u52a8\u7aef\uff09\u865a\u5e7b 4.22.2"},{"location":"ue4/rendering/#pre-z","text":"UE4\u4f7f\u7528reverse-Z\u6765\u4fdd\u5b58\u6df1\u5ea6\uff0c\u610f\u5473\u7740\u8fd1\u88c1\u9762\u7684\u6df1\u5ea6\u503c\u4e3a1\uff0c\u8fdc\u88c1\u9762\u7684\u6df1\u5ea6\u503c\u4e3a0\u3002\u8fd9\u4f7f\u5f97\u6df1\u5ea6\u7f13\u51b2\u7684\u7cbe\u5ea6\u66f4\u9ad8","title":"Pre-Z"},{"location":"ue4/rendering/#hi-z","text":"Hierarchy-Z\uff0cDepth Mipmap","title":"Hi-Z"},{"location":"ue4/rendering/#custom-depth","text":"FMobileSceneRenderer :: Render (); FSceneRenderer :: RenderCustomDepthPass (); // Uniform \u8bbe\u7f6e // SetViewport // Antialiased View . ParallelMeshDrawCommandPasses [ EMeshPass :: CustomDepth ]. DispatchDraw ( nullptr , RHICmdList );","title":"Custom Depth"},{"location":"ue4/rendering/#basepass","text":"FMobileSceneRenderer :: Render (); FMobileSceneRenderer :: RenderMobileBasePass (); View . ParallelMeshDrawCommandPasses [ EMeshPass :: BasePass ]. DispatchDraw ( nullptr , RHICmdList ); FRegisterPassProcessorCreateFunction RegisterMobileBasePass (); FMeshPassProcessor * CreateMobileBasePassProcessor (); class FMobileBasePassMeshProcessor ; :: AddMeshBatch (); :: Process (); :: BuildMeshDrawCommands ();","title":"BasePass"},{"location":"ue4/rendering/#_1","text":"\u8bd1\uff1aUE4\u662f\u5982\u4f55\u6e32\u67d3\u4e00\u5e27\u7684\uff081\uff09 https://zhuanlan.zhihu.com/p/57447319","title":"\u53c2\u8003"},{"location":"ue4/shader/","text":"Shader \u7f16\u5199\u6307\u5357 \u672c\u6587\u7528\u4e8e\u8bb0\u5f55\u865a\u5e7b\u5f15\u64ce\u56fe\u5f62\u5f00\u53d1\u4e2d\u6ce8\u610f\u7684\u4e8b\u9879\uff0c\u6d89\u53ca\u5230 Mesh \u7ed8\u5236\u53ca\u540e\u5904\u7406\u4e24\u90e8\u5206\u3002 \u7f51\u683c\u4f53\u7ed8\u5236 https://docs.unrealengine.com/zh-CN/Programming/Rendering/MeshDrawingPipeline/index.html \u540e\u5904\u7406 Shader \u7f16\u5199\u7c7b\u7ee7\u627f TRenderingCompositePassBase \u8986\u5199\u65b9\u6cd5 class X : public TRenderingCompositePassBase < 1 , 1 > { public : virtual void Process ( FRenderingCompositePassContext & Context ) override ; virtual FPooledRenderTargetDesc ComputeOutputDesc ( EPassOutputId InPassOutputId ) const override ; virtual void Release () override { delete this ; } }; Process \u4e3b\u6d41\u7a0b\uff0c\u8bbe\u7f6e\u89c6\u53e3\u3001\u8bbe\u7f6e\u7740\u8272\u5668\u53c2\u6570\u3001\u6e32\u67d3 ComputeOutputDesc \u8f93\u51fa\u6750\u8d28 Shader \u672c\u8eab\u5bf9\u5e94\u7684\u7c7b","title":"Shader \u7f16\u5199\u6307\u5357"},{"location":"ue4/shader/#shader","text":"\u672c\u6587\u7528\u4e8e\u8bb0\u5f55\u865a\u5e7b\u5f15\u64ce\u56fe\u5f62\u5f00\u53d1\u4e2d\u6ce8\u610f\u7684\u4e8b\u9879\uff0c\u6d89\u53ca\u5230 Mesh \u7ed8\u5236\u53ca\u540e\u5904\u7406\u4e24\u90e8\u5206\u3002","title":"Shader \u7f16\u5199\u6307\u5357"},{"location":"ue4/shader/#_1","text":"https://docs.unrealengine.com/zh-CN/Programming/Rendering/MeshDrawingPipeline/index.html","title":"\u7f51\u683c\u4f53\u7ed8\u5236"},{"location":"ue4/shader/#shader_1","text":"\u7f16\u5199\u7c7b\u7ee7\u627f TRenderingCompositePassBase \u8986\u5199\u65b9\u6cd5 class X : public TRenderingCompositePassBase < 1 , 1 > { public : virtual void Process ( FRenderingCompositePassContext & Context ) override ; virtual FPooledRenderTargetDesc ComputeOutputDesc ( EPassOutputId InPassOutputId ) const override ; virtual void Release () override { delete this ; } }; Process \u4e3b\u6d41\u7a0b\uff0c\u8bbe\u7f6e\u89c6\u53e3\u3001\u8bbe\u7f6e\u7740\u8272\u5668\u53c2\u6570\u3001\u6e32\u67d3 ComputeOutputDesc \u8f93\u51fa\u6750\u8d28 Shader \u672c\u8eab\u5bf9\u5e94\u7684\u7c7b","title":"\u540e\u5904\u7406 Shader"},{"location":"ue4/sk_mesh_render/","text":"\u865a\u5e7b\u5f15\u64ce\u7684\u6e32\u67d3\u7ba1\u7ebf \u6ce8\uff1a4.22 \u4e2d\u5df2\u7ecf\u6ca1\u6709 Policy \u7c7b\uff0c\u540e\u7eed\u66f4\u65b0 Part I \u8c03\u8bd5\u5de5\u5177 RenderDoc HLSL Tools for Visual Studio \u5de5\u5177-\u9009\u9879-\u6587\u672c\u7f16\u8f91\u5668-\u6587\u4ef6\u6269\u5c55\u540d \u5f15\u64ce\u8c03\u8bd5\u53c2\u6570 ConsoleVariables.ini r.ShaderDevelopmentMode=1 \u4e0d\u9700\u8981\u91cd\u542f\u5f15\u64ce r.Shaders.Optimize=0 \u4f4e\u7ea7\u7684\u4f18\u5316\u9009\u9879\u53ef\u4ee5\u964d\u4f4e\u6750\u8d28\u7684\u7f16\u8bd1\u65f6\u95f4 r.Shaders.keepDubugInfo=1 \u8c03\u8bd5\u4fe1\u606f\u80fd\u591f\u65b9\u4fbf\u4e0eRenderDoc\u7684\u8c03\u8bd5 BaseEngine.ini bAllowCompilingThroughWorker=True bAllowAsynchronousShaderCompiling=True \u8c03\u8bd5 c++ \u7aef Rendering Pipeline \u65f6\uff0c\u53ef\u4ee5\u628a\u8fd9\u4e24\u4e2a\u6807\u5fd7\u5173\u95ed \u672f\u8bed RHI: \u56fe\u5f62 API \u4e4b\u4e0a\u7684\u8584\u5c42 Deffred Rendering\uff1a\u9ed8\u8ba4\u6e32\u67d3\u5668 Forward Rendering\uff1a\u79fb\u52a8\u7aef\u6e32\u67d3\u5668 View\uff1a\u4e00\u4e2aWindow\u53ef\u4ee5\u6709\u591a\u4e2aView\uff08\u4f8b\u5982\u5206\u5c4f\uff09 Drawing Policy / Drawing Policy Factory\uff1a\u4e0d\u540c\u7684 Mesh \u6709\u4e0d\u540c\u7684 Policy\uff0c\u4f7f\u7528\u4e0d\u540c\u7684 Shader \u53d8\u91cf Vertex Factory\uff1a\u9876\u70b9\u6570\u636e\uff0cStatic\u3001SkeletalMesh\u3001ProceduralMeshComponent \u5404\u81ea\u62e5\u6709\u81ea\u5df1\u7684\u6570\u636e\u6e90 Part II: Shaders \u548c Vertex Data Shaders \u548c Vertex Factories Vertex Factory \u6765\u63a7\u5236\u5c06\u54ea\u4e9b\u6570\u636e\u4e0a\u4f20\u5230 GPU \u4ee5\u7528\u4e8e\u9876\u70b9\u7740\u8272\u5668 Shaders \u6240\u6709 Shader \u57fa\u7c7b\u4e3a FShader\u3002 FGlobalShader \u7528\u4e8e\u53ea\u5b58\u5728\u4e00\u4e2a\u5b9e\u4f8b\u7684\u60c5\u51b5\uff0c\u5982\u540e\u5904\u7406 FMaterialShader\u3001FMeshMaterialShader \u7528\u4e8e\u4e0e\u6750\u8d28\u76f8\u5173\u7684\u7740\u8272\u5668 FGlobalShader \u4ec5\u5b58\u5728\u4e00\u4e2a\u5168\u5c40\u7740\u8272\u5668\u5b9e\u4f8b FMaterialShader and FMeshMaterialShader FMaterialShader \u901a\u8fc7 SetParameters \u66f4\u6539\u53c2\u6570\u503c FMeshMaterialShader \u5229\u7528 SetMesh \u51fd\u6570\u4fee\u6539 Mesh \u7ed1\u5b9a \u5c06C ++\u7ed1\u5b9a\u5230HLSL IMPLEMENT_MATERIAL_SHADER_TYPE \u5b8f\u8fdb\u884c\u5173\u8054 FShader\u7684\u5b9e\u73b0\u662f\u7740\u8272\u7ba1\u9053\u4e2d\u7684\u7279\u5b9a\u9636\u6bb5\uff0c\u53ef\u4ee5\u5728\u4f7f\u7528\u4e4b\u524d\u4fee\u6539\u5176HLSL\u4ee3\u7801\u4e2d\u7684\u53c2\u6570 Permutation \u7f13\u5b58\u548c\u7f16\u8bd1\u73af\u5883 \u6750\u8d28/\u7740\u8272\u5668/\u9876\u70b9\u5de5\u5382\u5171\u540c\u51b3\u5b9a\u662f\u5426\u7f13\u5b58\u7f16\u8bd1 \u9884\u5904\u7406\u5668\u5b9a\u4e49 FShader\uff1a ModifyCompilationEnvironment\uff08\u901a\u8fc7\u5b8f\u5b9e\u73b0\u7684\u9759\u6001\u51fd\u6570\uff09 FMaterial\uff1a SetupMaterialEnvironment FVertexFactory\uff1a ModifyCompilationEnvironment bool FGPUSkinPassthroughVertexFactory :: ShouldCompilePermutation ( EShaderPlatform Platform , const class FMaterial * Material , const FShaderType * ShaderType ) { // Passthrough is only valid on platforms with Compute Shader support AND for (skeletal meshes or default materials) return IsGPUSkinCacheAvailableAtRuntime(Platform) && IsFeatureLevelSupported(Platform, ERHIFeatureLevel : : SM5 ) && Super :: ShouldCompilePermutation ( Platform , Material , ShaderType ) && ( Material- > IsUsedWithSkeletalMesh () || Material- > IsSpecialEngineMaterial ()); } FVertexFactory \u9759\u6001\u7f51\u683c\uff1aFLocalVertexFactory \u9aa8\u67b6\u7f51\u683c\u4f53\uff1aFGPUBaseSkinVertexFactory FPrimitiveSceneProxy \u7ed8\u5236\u7b56\u7565\u786e\u5b9a\u4e86\u7ed9\u5b9a\u6750\u8d28\u548c\u9876\u70b9\u5de5\u5382\u4f7f\u7528\u54ea\u4e2a\u7279\u5b9a\u7740\u8272\u5668 Part III\uff1aDrawing Policies Part IV \u4e0d\u540c\u7684 VertexFactory \u5728 ush \u4e2d\u5b9a\u4e49\u81ea\u5df1\u7684 GBufferData\u3001VSToPS \u7b49 \u5171\u4eab\u4e00\u4e2a usf BasePassPixelShader","title":"\u865a\u5e7b\u5f15\u64ce\u7684\u6e32\u67d3\u7ba1\u7ebf"},{"location":"ue4/sk_mesh_render/#_1","text":"\u6ce8\uff1a4.22 \u4e2d\u5df2\u7ecf\u6ca1\u6709 Policy \u7c7b\uff0c\u540e\u7eed\u66f4\u65b0","title":"\u865a\u5e7b\u5f15\u64ce\u7684\u6e32\u67d3\u7ba1\u7ebf"},{"location":"ue4/sk_mesh_render/#part-i","text":"","title":"Part I"},{"location":"ue4/sk_mesh_render/#_2","text":"RenderDoc HLSL Tools for Visual Studio \u5de5\u5177-\u9009\u9879-\u6587\u672c\u7f16\u8f91\u5668-\u6587\u4ef6\u6269\u5c55\u540d","title":"\u8c03\u8bd5\u5de5\u5177"},{"location":"ue4/sk_mesh_render/#_3","text":"","title":"\u5f15\u64ce\u8c03\u8bd5\u53c2\u6570"},{"location":"ue4/sk_mesh_render/#consolevariablesini","text":"r.ShaderDevelopmentMode=1 \u4e0d\u9700\u8981\u91cd\u542f\u5f15\u64ce r.Shaders.Optimize=0 \u4f4e\u7ea7\u7684\u4f18\u5316\u9009\u9879\u53ef\u4ee5\u964d\u4f4e\u6750\u8d28\u7684\u7f16\u8bd1\u65f6\u95f4 r.Shaders.keepDubugInfo=1 \u8c03\u8bd5\u4fe1\u606f\u80fd\u591f\u65b9\u4fbf\u4e0eRenderDoc\u7684\u8c03\u8bd5","title":"ConsoleVariables.ini"},{"location":"ue4/sk_mesh_render/#baseengineini","text":"bAllowCompilingThroughWorker=True bAllowAsynchronousShaderCompiling=True \u8c03\u8bd5 c++ \u7aef Rendering Pipeline \u65f6\uff0c\u53ef\u4ee5\u628a\u8fd9\u4e24\u4e2a\u6807\u5fd7\u5173\u95ed","title":"BaseEngine.ini"},{"location":"ue4/sk_mesh_render/#_4","text":"RHI: \u56fe\u5f62 API \u4e4b\u4e0a\u7684\u8584\u5c42 Deffred Rendering\uff1a\u9ed8\u8ba4\u6e32\u67d3\u5668 Forward Rendering\uff1a\u79fb\u52a8\u7aef\u6e32\u67d3\u5668 View\uff1a\u4e00\u4e2aWindow\u53ef\u4ee5\u6709\u591a\u4e2aView\uff08\u4f8b\u5982\u5206\u5c4f\uff09 Drawing Policy / Drawing Policy Factory\uff1a\u4e0d\u540c\u7684 Mesh \u6709\u4e0d\u540c\u7684 Policy\uff0c\u4f7f\u7528\u4e0d\u540c\u7684 Shader \u53d8\u91cf Vertex Factory\uff1a\u9876\u70b9\u6570\u636e\uff0cStatic\u3001SkeletalMesh\u3001ProceduralMeshComponent \u5404\u81ea\u62e5\u6709\u81ea\u5df1\u7684\u6570\u636e\u6e90","title":"\u672f\u8bed"},{"location":"ue4/sk_mesh_render/#part-ii-shaders-vertex-data","text":"","title":"Part II: Shaders \u548c Vertex Data"},{"location":"ue4/sk_mesh_render/#shaders-vertex-factories","text":"Vertex Factory \u6765\u63a7\u5236\u5c06\u54ea\u4e9b\u6570\u636e\u4e0a\u4f20\u5230 GPU \u4ee5\u7528\u4e8e\u9876\u70b9\u7740\u8272\u5668","title":"Shaders \u548c Vertex Factories"},{"location":"ue4/sk_mesh_render/#shaders","text":"\u6240\u6709 Shader \u57fa\u7c7b\u4e3a FShader\u3002 FGlobalShader \u7528\u4e8e\u53ea\u5b58\u5728\u4e00\u4e2a\u5b9e\u4f8b\u7684\u60c5\u51b5\uff0c\u5982\u540e\u5904\u7406 FMaterialShader\u3001FMeshMaterialShader \u7528\u4e8e\u4e0e\u6750\u8d28\u76f8\u5173\u7684\u7740\u8272\u5668","title":"Shaders"},{"location":"ue4/sk_mesh_render/#fglobalshader","text":"\u4ec5\u5b58\u5728\u4e00\u4e2a\u5168\u5c40\u7740\u8272\u5668\u5b9e\u4f8b","title":"FGlobalShader"},{"location":"ue4/sk_mesh_render/#fmaterialshader-and-fmeshmaterialshader","text":"FMaterialShader \u901a\u8fc7 SetParameters \u66f4\u6539\u53c2\u6570\u503c FMeshMaterialShader \u5229\u7528 SetMesh \u51fd\u6570\u4fee\u6539 Mesh \u7ed1\u5b9a","title":"FMaterialShader and FMeshMaterialShader"},{"location":"ue4/sk_mesh_render/#c-hlsl","text":"IMPLEMENT_MATERIAL_SHADER_TYPE \u5b8f\u8fdb\u884c\u5173\u8054 FShader\u7684\u5b9e\u73b0\u662f\u7740\u8272\u7ba1\u9053\u4e2d\u7684\u7279\u5b9a\u9636\u6bb5\uff0c\u53ef\u4ee5\u5728\u4f7f\u7528\u4e4b\u524d\u4fee\u6539\u5176HLSL\u4ee3\u7801\u4e2d\u7684\u53c2\u6570","title":"\u5c06C ++\u7ed1\u5b9a\u5230HLSL"},{"location":"ue4/sk_mesh_render/#permutation","text":"\u6750\u8d28/\u7740\u8272\u5668/\u9876\u70b9\u5de5\u5382\u5171\u540c\u51b3\u5b9a\u662f\u5426\u7f13\u5b58\u7f16\u8bd1 \u9884\u5904\u7406\u5668\u5b9a\u4e49 FShader\uff1a ModifyCompilationEnvironment\uff08\u901a\u8fc7\u5b8f\u5b9e\u73b0\u7684\u9759\u6001\u51fd\u6570\uff09 FMaterial\uff1a SetupMaterialEnvironment FVertexFactory\uff1a ModifyCompilationEnvironment bool FGPUSkinPassthroughVertexFactory :: ShouldCompilePermutation ( EShaderPlatform Platform , const class FMaterial * Material , const FShaderType * ShaderType ) { // Passthrough is only valid on platforms with Compute Shader support AND for (skeletal meshes or default materials) return IsGPUSkinCacheAvailableAtRuntime(Platform) && IsFeatureLevelSupported(Platform, ERHIFeatureLevel : : SM5 ) && Super :: ShouldCompilePermutation ( Platform , Material , ShaderType ) && ( Material- > IsUsedWithSkeletalMesh () || Material- > IsSpecialEngineMaterial ()); }","title":"Permutation \u7f13\u5b58\u548c\u7f16\u8bd1\u73af\u5883"},{"location":"ue4/sk_mesh_render/#fvertexfactory","text":"\u9759\u6001\u7f51\u683c\uff1aFLocalVertexFactory \u9aa8\u67b6\u7f51\u683c\u4f53\uff1aFGPUBaseSkinVertexFactory","title":"FVertexFactory"},{"location":"ue4/sk_mesh_render/#fprimitivesceneproxy","text":"\u7ed8\u5236\u7b56\u7565\u786e\u5b9a\u4e86\u7ed9\u5b9a\u6750\u8d28\u548c\u9876\u70b9\u5de5\u5382\u4f7f\u7528\u54ea\u4e2a\u7279\u5b9a\u7740\u8272\u5668","title":"FPrimitiveSceneProxy"},{"location":"ue4/sk_mesh_render/#part-iiidrawing-policies","text":"","title":"Part III\uff1aDrawing Policies"},{"location":"ue4/sk_mesh_render/#part-iv","text":"\u4e0d\u540c\u7684 VertexFactory \u5728 ush \u4e2d\u5b9a\u4e49\u81ea\u5df1\u7684 GBufferData\u3001VSToPS \u7b49 \u5171\u4eab\u4e00\u4e2a usf BasePassPixelShader","title":"Part IV"},{"location":"ue4/sota-motion-blur/","text":"\u5f15\u64ce\u4e2d\u7684 Motion Blur \u6e90\u4e8e\u300aA Reconstruction Filter for Plausible Motion Blur\u300b \u91cd\u5efa\u7b97\u6cd5 \u5229\u7528 NeighborMaxV \u91c7\u6837 C\uff0cV\u3001D \u5171\u540c\u51b3\u5b9a\u8be5\u6837\u672c\u7684\u6743\u91cd \u6d41\u7a0b\u7b80\u8ff0 https://docs.nvidia.com/gameworks/index.html#gameworkslibrary/graphicssamples/d3d_samples/motionblurd3dadvancedsample.htm \u83b7\u53d6 Color\u3001Velocity\u3001Depth TileMax(V)\uff1a\u5bf9 Velocity \u5206 Tile \u53d6 Max \uff081/K Target\uff09 NeighborMax(TileMax)\uff1a\u5bf9 Tile \u53d6\u90bb\u57df Max Final gathering (reconstruction) pass\uff1a\u5229\u7528\u6cbf\u7740 TileMax \u65b9\u5411\uff0c\u8003\u8651\u8fdb Depth\uff0c\u8fdb\u884c\u91c7\u6837 - \u6b65\u9aa41\uff1aMaxTile In\uff1aVelocity Out\uff1aMaxTile \u6b65\u9aa42\uff1aNeighborhood Gather\uff1a In\uff1aMaxTile Out\uff1aGathered MaxTile Scatter\uff1a In\uff1aMaxTile Out\uff1aScattered MaxTile \u6b65\u9aa43\uff1aMotion Blur: In\uff1aC\u3001V\u3001D\u3001MaxTile Out\uff1a\u91cd\u5efa\u6ee4\u6ce2","title":"\u5f15\u64ce\u4e2d\u7684 Motion Blur"},{"location":"ue4/sota-motion-blur/#motion-blur","text":"\u6e90\u4e8e\u300aA Reconstruction Filter for Plausible Motion Blur\u300b","title":"\u5f15\u64ce\u4e2d\u7684 Motion Blur"},{"location":"ue4/sota-motion-blur/#_1","text":"\u5229\u7528 NeighborMaxV \u91c7\u6837 C\uff0cV\u3001D \u5171\u540c\u51b3\u5b9a\u8be5\u6837\u672c\u7684\u6743\u91cd","title":"\u91cd\u5efa\u7b97\u6cd5"},{"location":"ue4/sota-motion-blur/#_2","text":"https://docs.nvidia.com/gameworks/index.html#gameworkslibrary/graphicssamples/d3d_samples/motionblurd3dadvancedsample.htm \u83b7\u53d6 Color\u3001Velocity\u3001Depth TileMax(V)\uff1a\u5bf9 Velocity \u5206 Tile \u53d6 Max \uff081/K Target\uff09 NeighborMax(TileMax)\uff1a\u5bf9 Tile \u53d6\u90bb\u57df Max Final gathering (reconstruction) pass\uff1a\u5229\u7528\u6cbf\u7740 TileMax \u65b9\u5411\uff0c\u8003\u8651\u8fdb Depth\uff0c\u8fdb\u884c\u91c7\u6837 - \u6b65\u9aa41\uff1aMaxTile In\uff1aVelocity Out\uff1aMaxTile \u6b65\u9aa42\uff1aNeighborhood Gather\uff1a In\uff1aMaxTile Out\uff1aGathered MaxTile Scatter\uff1a In\uff1aMaxTile Out\uff1aScattered MaxTile \u6b65\u9aa43\uff1aMotion Blur: In\uff1aC\u3001V\u3001D\u3001MaxTile Out\uff1a\u91cd\u5efa\u6ee4\u6ce2","title":"\u6d41\u7a0b\u7b80\u8ff0"},{"location":"ue4/tile-based-rendering/","text":"TBR \u53c2\u8003 https://www.zhihu.com/question/49141824","title":"TBR"},{"location":"ue4/tile-based-rendering/#tbr","text":"","title":"TBR"},{"location":"ue4/tile-based-rendering/#_1","text":"https://www.zhihu.com/question/49141824","title":"\u53c2\u8003"},{"location":"ue4/tutor/","text":"\u865a\u5e7b\u5f15\u64ce\u5165\u95e8 \u5b66\u4e60\u7f16\u8f91\u5668\u7684\u57fa\u7840\u77e5\u8bc6 \u7f16\u8f91\u5668\u57fa\u7840\u77e5\u8bc6\u4ecb\u7ecd \u7f16\u8f91\u5668\u5e03\u5c40\u3001\u81ea\u5b9a\u4e49\u5e03\u5c40 \u89c6\u53e3 \u9009\u9879\u3001\u5bfc\u822a \u4e16\u754c\u5927\u7eb2\u8bd5\u56fe \u7ec6\u8282\u9762\u677f \u6a21\u5f0f\u9762\u677f \u90a3\u4e9b\u6a21\u5f0f\u53ef\u7528\uff0c\u653e\u7f6e\u6a21\u5f0f \u5185\u5bb9\u6d4f\u89c8\u5668 \u81ea\u5b9a\u4e49\u4f7f\u5176\u66f4\u7075\u5de7 \u4e3b\u5de5\u5177\u680f \u8bbf\u95ee\u5e38\u7528\u64cd\u4f5c \u7f16\u8f91\u5668\u57fa\u7840\u77e5\u8bc6\u6982\u8ff0 \u6a21\u5f0f\u9762\u677f\uff1a\u5feb\u901f\u6dfb\u52a0\u7269\u54c1/Actor\uff0c\u7f16\u8f91\u5730\u5f62\u3001\u51e0\u4f55\u7269\u4f53\u7f16\u8f91 \u4e3b\u5de5\u5177\u680f\uff1a\u4fdd\u5b58\u3001\u6d4b\u8bd5\u3001\u7f16\u8f91\u6a21\u5f0f \u4e3b\u89c6\u53e3\uff1a\u89c2\u5bdf\u5730\u56fe\u7684\u73e0\u5e02\u53e3\u3001\u7f16\u8f91\u5185\u5bb9 \u5185\u5bb9\u6d4f\u89c8\u5668\uff1a\u5185\u90e8\u8d44\u6e90\u7ba1\u7406\u5668 \u4e16\u754c\u5927\u7eb2\u3001\u5217\u51fa\u5173\u5361\u6240\u6709\u5bf9\u8c61 \u7ec6\u8282\u9762\u677f\uff1a\u663e\u793a\u9009\u4e2d\u5bf9\u8c61\u7684\u5404\u7c7b\u5c5e\u6027\u3001\u53ef\u4ee5\u8c03\u6574 Tips \u6240\u6709\u9762\u677f\u90fd\u662f\u7a97\u53e3\uff0c\u53ef\u4ee5\u81ea\u5b9a\u4e49\u62d6\u52a8\u3001\u7f29\u653e\u3001\u8c03\u6574\u4f4d\u7f6e\u3001\u9690\u85cf\u9009\u9879\u5361\u3001 \u91cd\u7f6e\u4e3a\u9ed8\u8ba4\u5e03\u5c40\uff1a\u7a97\u53e3-\u91cd\u7f6e\u5e03\u5c40 \u53f3\u4e0a\u89d2\u6709\u7248\u672c\u53f7\u3001\u5f15\u64ce\u5206\u652f\uff0c\u4ee5\u53ca\u6559\u7a0b \u89c6\u53e3 \u53ef\u89c6\u5316\u7f16\u8f91 \u5de6\u4e0a\u89d2\u63a7\u5236\u89c6\u53e3\u65b9\u5f0f \u5b9e\u65f6\u3001fps\u3001fov\u3001\u2019\u8fc7\u573a\u52a8\u753b\u2019\u3001\u5168\u5c4f \u8bbe\u7f6e\u4e66\u7b7e\u8df3\u8f6c\u89c6\u89d2 ctrl+num\u8bbe\u7f6e layout\u8c03\u6574\u89c6\u53e3\u5e03\u5c40\uff0c\u6bcf\u4e2a\u90fd\u53ef\u4ee5\u5355\u72ec\u8bbe\u7f6e \u900f\u89c6 Mesh\u3001\u5e26\u5149\u7167 \u4ec5\u7528\u4e8e\u7f16\u8f91\u5668\u663e\u793a\u7684\u529f\u80fd\uff08\u7f51\u683c/\u7981\u7528\u3001\u7981\u7528\u67d0\u4e9b\u6e32\u67d3\u3001\u6e38\u620f\u89c6\u56fe\uff09 \u79fb\u52a8\u3001\u65cb\u8f6c\u3001\u7f29\u653e \u53ef\u4ee5\u7ec4\u5408\u8f74\u79fb\u52a8\u3001\u65cb\u8f6c\u3001\u7f29\u653e \u672c\u5730\u5750\u6807\u7cfb\u3001\u4e16\u754c\u5750\u6807\u7cfb \u5bf9\u9f50\u9009\u9879 \u7f51\u683c\u5bf9\u9f50 \u79fb\u52a8\u3001\u65cb\u8f6c\u3001\u7f29\u653e\u65f6\u504f\u79fb\u5176\u500d\u6570 \u53d6\u6d88\u5219\u4e0d\u8fdb\u884c\u4efb\u4f55\u5bf9\u9f50 \u76f8\u673a\u901f\u5ea6 \u805a\u7126 \u4e16\u754c\u5927\u7eb2\u89c6\u56fe \u5305\u542b\u573a\u666f\u4e2d\u6240\u6709\u5bf9\u8c61\uff0c\u5c42\u7ea7\u7ed3\u6784 \u5584\u7528\u6587\u4ef6\u5939\u7ec4\u7ec7 \u5220\u9664\u6587\u4ef6\u5939 \u5bf9\u8c61\u4f1a\u8fd4\u56de \u521b\u5efa\u7236\u5b50\u5bf9\u8c61 \u5584\u7528\u9876\u7aef\u641c\u7d22\u529f\u80fd\u3001Filter \u53f3\u4e0b\u89d2 \u89c6\u56fe\u9009\u9879 \u4e34\u65f6\u5bf9\u8c61 \u9009\u4e2d\u5bf9\u8c61 \u7ec4\uff0c\u540c\u65f6\u7f16\u8f91\u3001\u79fb\u52a8\u591a\u4e2a\u5bf9\u8c61 \u201c\u7ec6\u8282\u201d\u9762\u677f \u5173\u5361\u4e2d\u5bf9\u8c61\u7684\u7ec6\u8282 \u5bf9\u4e8e\u84dd\u56fe\uff0c\u7ec6\u8282\u9762\u677f\u9ec4\u8272\u8fd4\u56de\u7bad\u5934\uff0c\u8868\u793a\u8fd9\u662f\u66f4\u6539\u8fc7\u7684\u5c5e\u6027 \u5f00\u542f\u591a\u4e2a\u7ec6\u8282\u9762\u677f \u7a97\u53e3-\u7ec6\u8282 \u9501\u5b9a\u7a97\u53e3 \u663e\u793a\u9ad8\u7ea7\u4fe1\u606f \u773c\u7403\u56fe\u6807 \u64ad\u653e\u65f6\u663e\u793a\u9690\u85cf\uff08\u4e8b\u4ef6\u76f8\u5173\u7b49\uff09 \u77e9\u9635\u5c5e\u6027\u561b\uff0c\u773c\u7403\u65c1\u8fb9\uff0c\u7f16\u8f91\u591a\u4e2a\u5bf9\u8c61 \u5171\u6709\u9009\u9879 \u4e00\u6b21\u66f4\u6539 Quiz1 \u6e38\u620f\u65f6\u56fe \u9884\u8bbe\u89d2\u5ea6\u5feb\u901f\u67e5\u770b\uff0c\u4e66\u7b7e \u7ec6\u8282\u9762\u677f \u624b\u52a8\u66f4\u6539\u4f4d\u7f6e\u3001\u65cb\u8f6c\u3001\u7f29\u653e \u201c\u6a21\u5f0f\u201d\u9762\u677f \u653e\u7f6e\u6a21\u5f0f \u6240\u6709\u7c7b\u5305\u542b\u81ea\u5df1\u521b\u5efa\u7684 \u5185\u5bb9\u6d4f\u89c8\u5668 \u5f00\u542f\u591a\u4e2a\u5185\u5bb9\u6d4f\u89c8\u5668 \u4f20\u7edf\u6587\u4ef6\u5939\u89c6\u56fe \u8bbe\u7f6e\u6587\u4ef6\u5939\u989c\u8272 \u8fc7\u6ee4\u529f\u80fd \u89c6\u56fe\u9009\u9879 \u5f00\u53d1\u8005\u7528\u4e8e\u5b58\u653e\u4e34\u65f6\u6587\u4ef6 \u7f29\u7565\u56fe\u7f16\u8f91 \u96c6\u5408 \u5feb\u901f\u8bbf\u95ee \u4e3b\u5de5\u5177\u680f \u5f71\u54cd\u7f16\u8f91\u5668 \u5feb\u901f\u8c03\u6574\u9879\u76ee \u7f16\u8f91\u5668\u57fa\u7840\u77e5\u8bc6\u603b\u7ed3 \u7f16\u8f91\u5668\u6982\u89c8 \u57fa\u7840\u5e03\u5c40 \u81ea\u5b9a\u4e49\u9009\u9879 \u91cd\u7f6e\u64cd\u4f5c \u89c6\u53e3 \u8bbe\u7f6e\u591a\u4e2a\u89c6\u53e3 \u663e\u793a\u7b49\u9009\u9879 \u5bf9\u9f50\u9009\u9879\uff1a\u7f51\u683c\u3001\u65cb\u8f6c\u3001\u7f29\u653e \u4e16\u754c\u5927\u7eb2 \u9879\u76ee\u7684\u5927\u7eb2 \u7ec4\u7ec7\u65b9\u5f0f \u7ec6\u8282 \u5bf9\u8c61\u5c5e\u6027 \u5f00\u542f\u591a\u4e2a\u9762\u677f\u6539\u5584workflow \u6a21\u5f0f \u7f16\u8f91\u5668\u5de5\u4f5c\u65b9\u5f0f \u5feb\u901f\u6dfb\u52a0\u7269\u4f53 \u5185\u5bb9\u6d4f\u89c8\u5668 \u8fc7\u6ee4\u5668 \u9759\u6001\u3001\u52a8\u6001\u8fc7\u6ee4 \u4e3b\u5de5\u5177\u680f \u5feb\u901f\u8bbf\u95ee\u9879\u76ee\u8bbe\u7f6e \u6784\u5efa\u5149\u7167 \u5feb\u901f\u6e38\u620f\u6d4b\u8bd5 Quiz2 \u60f3\u67e5\u770b\u5173\u5361\u5728\u4e0d\u4f7f\u7528\u5149\u7167\u65f6\u7684\u5916\u89c2 \u9009\u62e9\u4e0d\u5e26\u5149\u7167\u7684\u89c6\u56fe\u6a21\u5f0f \u65b9\u4fbf\u7684\u5728\u573a\u666f\u4e2d\u9009\u62e9\u591a\u4e2a Actor \u4e16\u754c\u5927\u7eb2\u89c6\u56fe \u8bbe\u7f6e\u6982\u62ec\u4ecb\u7ecd \u7f16\u8f91\u5668\u504f\u597d\u8bbe\u7f6e \u9879\u76ee\u8bbe\u7f6e \u54ea\u4e9b\u662f\u7ecf\u5e38\u66f4\u6539\u7684 \u4e16\u754c\u8bbe\u7f6e \u4e3a\u4ec0\u4e48\u9700\u8981 \u901a\u5e38\u4f1a\u8986\u5199\u54ea\u4e9b\u5185\u5bb9 \u7f16\u8f91\u5668\u9996\u9009\u9879 \u641c\u7d22 \u53ef\u89c1\u6027\u9009\u62e9 \u9ed8\u8ba4 \u81ea\u52a8\u4fdd\u5b58 \u542f\u52a8\u5173\u5361 \u64ad\u653e\u8bbe\u7f6e \u7f51\u683c\u8bbe\u7f6e \u9879\u76ee\u8bbe\u7f6e \u9ed8\u8ba4\u52a0\u8f7d\u5730\u56fe \u9ed8\u8ba4\u6e38\u620f\u6a21\u5f0f \u8f93\u5165\u8bbe\u7f6e \u6253\u5305\u8bbe\u7f6e \u652f\u6301\u786c\u4ef6 \u5f15\u64ce\u8bbe\u7f6e\uff1a\u4f8b\u5982\u9700\u8981\u7279\u6b8a\u7684\u78b0\u649e\u3001\u5ef6\u8fdf\u6e32\u67d3\u3001\u524d\u5411\u6e32\u67d3\u3001 \u7f16\u8f91\u5668\u8bbe\u7f6e \u5e73\u53f0\u76f8\u5173 Quiz3 \u8986\u76d6\u5f53\u524d\u9879\u76ee\u9ed8\u8ba4\u6e38\u620f\u6a21\u5f0f\u2014\u2014\u9879\u76ee\u8bbe\u7f6e \u4e16\u754c\u573a\u666f\u8bbe\u7f6e \u8c03\u6574\u6216\u8986\u76d6\u5f53\u524d\u5173\u5361\u76f8\u5173\u7684\u8bbe\u7f6e kill-z\uff1aActor\u4f4e\u4e8e\u67d0\u4e2a\u9ad8\u5ea6\u5373\u6b7b\u4ea1 \u8986\u76d6\u9ed8\u8ba4\u6e38\u620f\u6a21\u5f0f Lightmass\u6784\u5efa\u5149\u7167\uff0c\u8986\u76d6\u9ed8\u8ba4\u6539\u5584\u5149\u7167 \u7269\u7406\u91cd\u529b Tick \u65f6\u95f4\u81a8\u80c0 \u8bbe\u7f6e\u6982\u62ec\u603b\u7ed3 \u7f16\u8f91\u5668\u504f\u597d\u8bbe\u7f6e - \u754c\u9762\u5916\u89c2 - \u7f16\u8f91\u5668\u6a21\u5f0f\u3001\u72ec\u7acb\u7a97\u53e3\u9009\u9879 - \u7279\u6b8a\u9009\u9879 \u9879\u76ee\u76f8\u5173 - \u9879\u76ee\u4fe1\u606f - \u5730\u56fe\u3001\u6a21\u5f0f - \u8f93\u5165 - \u6e32\u67d3 \u4e16\u754c\u573a\u666f\u8bbe\u7f6e - \u8986\u76d6\u6e38\u620f\u6a21\u5f0f - \u91cd\u529b - Lightmass Quiz4 \u542f\u52a8\u7f16\u8f91\u5668\u52a0\u8f7d\u8d34\u56fe\u2014\u2014\u9879\u76ee\u8bbe\u7f6e \u6dfb\u52a0\u5e73\u53f0\u2014\u2014\u9879\u76ee\u8bbe\u7f6e","title":"\u865a\u5e7b\u5f15\u64ce\u5165\u95e8"},{"location":"ue4/tutor/#_1","text":"\u5b66\u4e60\u7f16\u8f91\u5668\u7684\u57fa\u7840\u77e5\u8bc6","title":"\u865a\u5e7b\u5f15\u64ce\u5165\u95e8"},{"location":"ue4/tutor/#_2","text":"\u7f16\u8f91\u5668\u5e03\u5c40\u3001\u81ea\u5b9a\u4e49\u5e03\u5c40 \u89c6\u53e3 \u9009\u9879\u3001\u5bfc\u822a \u4e16\u754c\u5927\u7eb2\u8bd5\u56fe \u7ec6\u8282\u9762\u677f \u6a21\u5f0f\u9762\u677f \u90a3\u4e9b\u6a21\u5f0f\u53ef\u7528\uff0c\u653e\u7f6e\u6a21\u5f0f \u5185\u5bb9\u6d4f\u89c8\u5668 \u81ea\u5b9a\u4e49\u4f7f\u5176\u66f4\u7075\u5de7 \u4e3b\u5de5\u5177\u680f \u8bbf\u95ee\u5e38\u7528\u64cd\u4f5c","title":"\u7f16\u8f91\u5668\u57fa\u7840\u77e5\u8bc6\u4ecb\u7ecd"},{"location":"ue4/tutor/#_3","text":"\u6a21\u5f0f\u9762\u677f\uff1a\u5feb\u901f\u6dfb\u52a0\u7269\u54c1/Actor\uff0c\u7f16\u8f91\u5730\u5f62\u3001\u51e0\u4f55\u7269\u4f53\u7f16\u8f91 \u4e3b\u5de5\u5177\u680f\uff1a\u4fdd\u5b58\u3001\u6d4b\u8bd5\u3001\u7f16\u8f91\u6a21\u5f0f \u4e3b\u89c6\u53e3\uff1a\u89c2\u5bdf\u5730\u56fe\u7684\u73e0\u5e02\u53e3\u3001\u7f16\u8f91\u5185\u5bb9 \u5185\u5bb9\u6d4f\u89c8\u5668\uff1a\u5185\u90e8\u8d44\u6e90\u7ba1\u7406\u5668 \u4e16\u754c\u5927\u7eb2\u3001\u5217\u51fa\u5173\u5361\u6240\u6709\u5bf9\u8c61 \u7ec6\u8282\u9762\u677f\uff1a\u663e\u793a\u9009\u4e2d\u5bf9\u8c61\u7684\u5404\u7c7b\u5c5e\u6027\u3001\u53ef\u4ee5\u8c03\u6574 Tips \u6240\u6709\u9762\u677f\u90fd\u662f\u7a97\u53e3\uff0c\u53ef\u4ee5\u81ea\u5b9a\u4e49\u62d6\u52a8\u3001\u7f29\u653e\u3001\u8c03\u6574\u4f4d\u7f6e\u3001\u9690\u85cf\u9009\u9879\u5361\u3001 \u91cd\u7f6e\u4e3a\u9ed8\u8ba4\u5e03\u5c40\uff1a\u7a97\u53e3-\u91cd\u7f6e\u5e03\u5c40 \u53f3\u4e0a\u89d2\u6709\u7248\u672c\u53f7\u3001\u5f15\u64ce\u5206\u652f\uff0c\u4ee5\u53ca\u6559\u7a0b","title":"\u7f16\u8f91\u5668\u57fa\u7840\u77e5\u8bc6\u6982\u8ff0"},{"location":"ue4/tutor/#_4","text":"\u53ef\u89c6\u5316\u7f16\u8f91 \u5de6\u4e0a\u89d2\u63a7\u5236\u89c6\u53e3\u65b9\u5f0f \u5b9e\u65f6\u3001fps\u3001fov\u3001\u2019\u8fc7\u573a\u52a8\u753b\u2019\u3001\u5168\u5c4f \u8bbe\u7f6e\u4e66\u7b7e\u8df3\u8f6c\u89c6\u89d2 ctrl+num\u8bbe\u7f6e layout\u8c03\u6574\u89c6\u53e3\u5e03\u5c40\uff0c\u6bcf\u4e2a\u90fd\u53ef\u4ee5\u5355\u72ec\u8bbe\u7f6e \u900f\u89c6 Mesh\u3001\u5e26\u5149\u7167 \u4ec5\u7528\u4e8e\u7f16\u8f91\u5668\u663e\u793a\u7684\u529f\u80fd\uff08\u7f51\u683c/\u7981\u7528\u3001\u7981\u7528\u67d0\u4e9b\u6e32\u67d3\u3001\u6e38\u620f\u89c6\u56fe\uff09 \u79fb\u52a8\u3001\u65cb\u8f6c\u3001\u7f29\u653e \u53ef\u4ee5\u7ec4\u5408\u8f74\u79fb\u52a8\u3001\u65cb\u8f6c\u3001\u7f29\u653e \u672c\u5730\u5750\u6807\u7cfb\u3001\u4e16\u754c\u5750\u6807\u7cfb \u5bf9\u9f50\u9009\u9879 \u7f51\u683c\u5bf9\u9f50 \u79fb\u52a8\u3001\u65cb\u8f6c\u3001\u7f29\u653e\u65f6\u504f\u79fb\u5176\u500d\u6570 \u53d6\u6d88\u5219\u4e0d\u8fdb\u884c\u4efb\u4f55\u5bf9\u9f50 \u76f8\u673a\u901f\u5ea6 \u805a\u7126","title":"\u89c6\u53e3"},{"location":"ue4/tutor/#_5","text":"\u5305\u542b\u573a\u666f\u4e2d\u6240\u6709\u5bf9\u8c61\uff0c\u5c42\u7ea7\u7ed3\u6784 \u5584\u7528\u6587\u4ef6\u5939\u7ec4\u7ec7 \u5220\u9664\u6587\u4ef6\u5939 \u5bf9\u8c61\u4f1a\u8fd4\u56de \u521b\u5efa\u7236\u5b50\u5bf9\u8c61 \u5584\u7528\u9876\u7aef\u641c\u7d22\u529f\u80fd\u3001Filter \u53f3\u4e0b\u89d2 \u89c6\u56fe\u9009\u9879 \u4e34\u65f6\u5bf9\u8c61 \u9009\u4e2d\u5bf9\u8c61 \u7ec4\uff0c\u540c\u65f6\u7f16\u8f91\u3001\u79fb\u52a8\u591a\u4e2a\u5bf9\u8c61","title":"\u4e16\u754c\u5927\u7eb2\u89c6\u56fe"},{"location":"ue4/tutor/#_6","text":"\u5173\u5361\u4e2d\u5bf9\u8c61\u7684\u7ec6\u8282 \u5bf9\u4e8e\u84dd\u56fe\uff0c\u7ec6\u8282\u9762\u677f\u9ec4\u8272\u8fd4\u56de\u7bad\u5934\uff0c\u8868\u793a\u8fd9\u662f\u66f4\u6539\u8fc7\u7684\u5c5e\u6027 \u5f00\u542f\u591a\u4e2a\u7ec6\u8282\u9762\u677f \u7a97\u53e3-\u7ec6\u8282 \u9501\u5b9a\u7a97\u53e3 \u663e\u793a\u9ad8\u7ea7\u4fe1\u606f \u773c\u7403\u56fe\u6807 \u64ad\u653e\u65f6\u663e\u793a\u9690\u85cf\uff08\u4e8b\u4ef6\u76f8\u5173\u7b49\uff09 \u77e9\u9635\u5c5e\u6027\u561b\uff0c\u773c\u7403\u65c1\u8fb9\uff0c\u7f16\u8f91\u591a\u4e2a\u5bf9\u8c61 \u5171\u6709\u9009\u9879 \u4e00\u6b21\u66f4\u6539","title":"\u201c\u7ec6\u8282\u201d\u9762\u677f"},{"location":"ue4/tutor/#quiz1","text":"\u6e38\u620f\u65f6\u56fe \u9884\u8bbe\u89d2\u5ea6\u5feb\u901f\u67e5\u770b\uff0c\u4e66\u7b7e \u7ec6\u8282\u9762\u677f \u624b\u52a8\u66f4\u6539\u4f4d\u7f6e\u3001\u65cb\u8f6c\u3001\u7f29\u653e","title":"Quiz1"},{"location":"ue4/tutor/#_7","text":"\u653e\u7f6e\u6a21\u5f0f \u6240\u6709\u7c7b\u5305\u542b\u81ea\u5df1\u521b\u5efa\u7684","title":"\u201c\u6a21\u5f0f\u201d\u9762\u677f"},{"location":"ue4/tutor/#_8","text":"\u5f00\u542f\u591a\u4e2a\u5185\u5bb9\u6d4f\u89c8\u5668 \u4f20\u7edf\u6587\u4ef6\u5939\u89c6\u56fe \u8bbe\u7f6e\u6587\u4ef6\u5939\u989c\u8272 \u8fc7\u6ee4\u529f\u80fd \u89c6\u56fe\u9009\u9879 \u5f00\u53d1\u8005\u7528\u4e8e\u5b58\u653e\u4e34\u65f6\u6587\u4ef6 \u7f29\u7565\u56fe\u7f16\u8f91 \u96c6\u5408 \u5feb\u901f\u8bbf\u95ee","title":"\u5185\u5bb9\u6d4f\u89c8\u5668"},{"location":"ue4/tutor/#_9","text":"\u5f71\u54cd\u7f16\u8f91\u5668 \u5feb\u901f\u8c03\u6574\u9879\u76ee","title":"\u4e3b\u5de5\u5177\u680f"},{"location":"ue4/tutor/#_10","text":"\u7f16\u8f91\u5668\u6982\u89c8 \u57fa\u7840\u5e03\u5c40 \u81ea\u5b9a\u4e49\u9009\u9879 \u91cd\u7f6e\u64cd\u4f5c \u89c6\u53e3 \u8bbe\u7f6e\u591a\u4e2a\u89c6\u53e3 \u663e\u793a\u7b49\u9009\u9879 \u5bf9\u9f50\u9009\u9879\uff1a\u7f51\u683c\u3001\u65cb\u8f6c\u3001\u7f29\u653e \u4e16\u754c\u5927\u7eb2 \u9879\u76ee\u7684\u5927\u7eb2 \u7ec4\u7ec7\u65b9\u5f0f \u7ec6\u8282 \u5bf9\u8c61\u5c5e\u6027 \u5f00\u542f\u591a\u4e2a\u9762\u677f\u6539\u5584workflow \u6a21\u5f0f \u7f16\u8f91\u5668\u5de5\u4f5c\u65b9\u5f0f \u5feb\u901f\u6dfb\u52a0\u7269\u4f53 \u5185\u5bb9\u6d4f\u89c8\u5668 \u8fc7\u6ee4\u5668 \u9759\u6001\u3001\u52a8\u6001\u8fc7\u6ee4 \u4e3b\u5de5\u5177\u680f \u5feb\u901f\u8bbf\u95ee\u9879\u76ee\u8bbe\u7f6e \u6784\u5efa\u5149\u7167 \u5feb\u901f\u6e38\u620f\u6d4b\u8bd5","title":"\u7f16\u8f91\u5668\u57fa\u7840\u77e5\u8bc6\u603b\u7ed3"},{"location":"ue4/tutor/#quiz2","text":"\u60f3\u67e5\u770b\u5173\u5361\u5728\u4e0d\u4f7f\u7528\u5149\u7167\u65f6\u7684\u5916\u89c2 \u9009\u62e9\u4e0d\u5e26\u5149\u7167\u7684\u89c6\u56fe\u6a21\u5f0f \u65b9\u4fbf\u7684\u5728\u573a\u666f\u4e2d\u9009\u62e9\u591a\u4e2a Actor \u4e16\u754c\u5927\u7eb2\u89c6\u56fe","title":"Quiz2"},{"location":"ue4/tutor/#_11","text":"\u7f16\u8f91\u5668\u504f\u597d\u8bbe\u7f6e \u9879\u76ee\u8bbe\u7f6e \u54ea\u4e9b\u662f\u7ecf\u5e38\u66f4\u6539\u7684 \u4e16\u754c\u8bbe\u7f6e \u4e3a\u4ec0\u4e48\u9700\u8981 \u901a\u5e38\u4f1a\u8986\u5199\u54ea\u4e9b\u5185\u5bb9","title":"\u8bbe\u7f6e\u6982\u62ec\u4ecb\u7ecd"},{"location":"ue4/tutor/#_12","text":"\u641c\u7d22 \u53ef\u89c1\u6027\u9009\u62e9 \u9ed8\u8ba4 \u81ea\u52a8\u4fdd\u5b58 \u542f\u52a8\u5173\u5361 \u64ad\u653e\u8bbe\u7f6e \u7f51\u683c\u8bbe\u7f6e","title":"\u7f16\u8f91\u5668\u9996\u9009\u9879"},{"location":"ue4/tutor/#_13","text":"\u9ed8\u8ba4\u52a0\u8f7d\u5730\u56fe \u9ed8\u8ba4\u6e38\u620f\u6a21\u5f0f \u8f93\u5165\u8bbe\u7f6e \u6253\u5305\u8bbe\u7f6e \u652f\u6301\u786c\u4ef6 \u5f15\u64ce\u8bbe\u7f6e\uff1a\u4f8b\u5982\u9700\u8981\u7279\u6b8a\u7684\u78b0\u649e\u3001\u5ef6\u8fdf\u6e32\u67d3\u3001\u524d\u5411\u6e32\u67d3\u3001 \u7f16\u8f91\u5668\u8bbe\u7f6e \u5e73\u53f0\u76f8\u5173","title":"\u9879\u76ee\u8bbe\u7f6e"},{"location":"ue4/tutor/#quiz3","text":"\u8986\u76d6\u5f53\u524d\u9879\u76ee\u9ed8\u8ba4\u6e38\u620f\u6a21\u5f0f\u2014\u2014\u9879\u76ee\u8bbe\u7f6e","title":"Quiz3"},{"location":"ue4/tutor/#_14","text":"\u8c03\u6574\u6216\u8986\u76d6\u5f53\u524d\u5173\u5361\u76f8\u5173\u7684\u8bbe\u7f6e kill-z\uff1aActor\u4f4e\u4e8e\u67d0\u4e2a\u9ad8\u5ea6\u5373\u6b7b\u4ea1 \u8986\u76d6\u9ed8\u8ba4\u6e38\u620f\u6a21\u5f0f Lightmass\u6784\u5efa\u5149\u7167\uff0c\u8986\u76d6\u9ed8\u8ba4\u6539\u5584\u5149\u7167 \u7269\u7406\u91cd\u529b Tick \u65f6\u95f4\u81a8\u80c0","title":"\u4e16\u754c\u573a\u666f\u8bbe\u7f6e"},{"location":"ue4/tutor/#_15","text":"\u7f16\u8f91\u5668\u504f\u597d\u8bbe\u7f6e - \u754c\u9762\u5916\u89c2 - \u7f16\u8f91\u5668\u6a21\u5f0f\u3001\u72ec\u7acb\u7a97\u53e3\u9009\u9879 - \u7279\u6b8a\u9009\u9879 \u9879\u76ee\u76f8\u5173 - \u9879\u76ee\u4fe1\u606f - \u5730\u56fe\u3001\u6a21\u5f0f - \u8f93\u5165 - \u6e32\u67d3 \u4e16\u754c\u573a\u666f\u8bbe\u7f6e - \u8986\u76d6\u6e38\u620f\u6a21\u5f0f - \u91cd\u529b - Lightmass","title":"\u8bbe\u7f6e\u6982\u62ec\u603b\u7ed3"},{"location":"ue4/tutor/#quiz4","text":"\u542f\u52a8\u7f16\u8f91\u5668\u52a0\u8f7d\u8d34\u56fe\u2014\u2014\u9879\u76ee\u8bbe\u7f6e \u6dfb\u52a0\u5e73\u53f0\u2014\u2014\u9879\u76ee\u8bbe\u7f6e","title":"Quiz4"},{"location":"ue4/ue4-note/","text":"UE4 \u7b14\u8bb0 UE4 \u5165\u95e8 \u6e90\u7801\u5b89\u88c5 \u60a8\u53ef\u4ee5\u8bbf\u95eeEpic\u5de5\u7a0b\u5e08\u6bcf\u5929\u5f00\u53d1\u7684\u6700\u65b0\u529f\u80fd\u548c\u9519\u8bef\u4fee\u6b63\uff0c\u83b7\u5f97\u771f\u6b63\u610f\u4e49\u4e0a\u7684\u6700\u65b0\u7248\u672c\u865a\u5e7b\u5f15\u64ce\u3002 \u5982\u679c\u60a8\u53d1\u73b0\u4e86\u6211\u4eec\u5c1a\u672a\u4fee\u6b63\u7684\u9519\u8bef\uff0c\u800c\u5b83\u5bf9\u60a8\u7684\u9879\u76ee\u5f71\u54cd\u53c8\u5f88\u5927\uff0c\u60a8\u53ef\u4ee5\u5728\u81ea\u5df1\u7684\u6e90\u4ee3\u7801\u7248\u672c\u4e2d\u4fee\u6b63\u5b83\uff0c\u5e76\u91cd\u65b0\u7f16\u8bd1\u81ea\u5df1\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u4ece\u800c\u907f\u514d\u803d\u8bef\u9879\u76ee\u8fdb\u5ea6\u3002 \u60a8\u53ef\u4ee5\u5c06\u81ea\u5df1\u7684\u9519\u8bef\u4fee\u6b63\u548c\u81ea\u5236\u529f\u80fd\u63d0\u4ea4\u7ed9Epic\uff0c\u4ee5\u6539\u8fdb\u5f15\u64ce\u5e76\u5e2e\u52a9\u6574\u4e2a\u865a\u5e7b\u793e\u533a\u3002 \u672f\u8bed Project Object\uff1a\u57fa\u7c7b\uff0c\u63d0\u4f9b\u5e8f\u5217\u5316\u3001\u5783\u573e\u56de\u6536\u7b49\u529f\u80fd Class Actor\uff1a\u53ef\u653e\u5165\u5173\u5361\u4e2d\u7684\u5bf9\u8c61\u90fd\u662f Actor\uff0c\u662f\u652f\u6301\u4e09\u7ef4\u8f6c\u6362\uff08\u5982\u5e73\u79fb\u3001\u65cb\u8f6c\u548c\u7f29\u653e\uff09\u7684\u6cdb\u578b\u7c7b Component\uff1a\u4e0d\u53ef\u72ec\u7acb\u5b58\u5728\uff0c\u4f9d\u6258\u4e8e Actor Pawn \u4eba\u5f62\u4f53\uff1aActor\u7684\u5b50\u7c7b\uff0c\u53ef\u88ab\u63a7\u5236 Character \u89d2\u8272\uff1aPawn \u7684\u5b50\u7c7b\uff0c\u73a9\u5bb6\u89d2\u8272 PlayerController \u73a9\u5bb6\u63a7\u5236\u5668\uff1a\u5c06\u8f93\u5165\u8f6c\u6362\u4e3a\u4ea4\u4e92\uff0c\u62e5\u6709 Pawn/Character AIController \u4eba\u5de5\u667a\u80fd\u63a7\u5236\u5668\uff1a\u4e0e PlayerController \u4e00\u6837\u7528\u4e8e\u63a7\u5236\uff0c\u62e5\u6709 Pawn/Character Brush \u753b\u5237\uff1a\u4e00\u79cd Actor\uff0c\u7528\u4e8e\u5236\u4f5c\u5173\u5361\uff0c\u53ef\u4ee5\u9644\u52a0\u591a\u79cd\u6548\u679c\uff0c\u5982\u89e6\u53d1\u4f53\u79ef\u3001\u963b\u585e\u4f53\u79ef\u3001\u4f24\u5bb3\u4f53\u79ef\u7b49 Level \u5173\u5361\uff1a\u6e38\u620f\u533a\u57df\uff0c\u7528\u4e8e\u653e\u7f6e\u3001\u7f16\u8f91 Actor\uff0c\u88ab\u5355\u72ec\u4fdd\u5b58\u4e3a .umap \u6587\u4ef6 World \u4e16\u754c\uff1a\u5173\u5361\u5217\u8868 GameMode \u6e38\u620f\u6a21\u5f0f\uff1a\u8d1f\u8d23\u8bbe\u7f6e\u6e38\u620f\u89c4\u5219 GameState \u6e38\u620f\u72b6\u6001\uff1a\u6e38\u620f\u5206\u6570\u3001\u73a9\u5bb6\u4eba\u6570\u3001\u5176\u4ed6\u5fc5\u8981\u7684\u6e38\u620f\u4fe1\u606f PlayerState \u73a9\u5bb6\u72b6\u6001\uff1a\u73a9\u5bb6\u751f\u547d\u503c\u3001\u7b49\u7ea7\u7b49 \u5de5\u5177\u548c\u7f16\u8f91\u5668 \u5173\u5361\u7f16\u8f91\u5668\uff1a\u4e0e\u4e0a\u8ff0\u201cLevel \u5173\u5361\u201d\u6982\u5ff5\u5bf9\u5e94 \u6750\u8d28\u7f16\u8f91\u5668\uff1a\u5e94\u7528\u4e8e\u4e00\u4e2a\u6a21\u578b\u6765\u63a7\u5236\u6a21\u578b\u7684\u53ef\u89c1\u5916\u89c2 \u84dd\u56fe\u7f16\u8f91\u5668\uff1a\u53ef\u88ab\u5f53\u4f5c Actor \u521b\u5efa\uff0c\u7528\u811a\u672c\u54cd\u5e94\u5173\u5361\u4e8b\u4ef6 \u884c\u4e3a\u6811\u7f16\u8f91\u5668\uff1a\u53ef\u89c6\u5316\u7684\u57fa\u4e8e\u8282\u70b9\u7684\u811a\u672c\uff0c\u63a7\u5236 AI \u884c\u4e3a Persona \u7f16\u8f91\u5668\uff1a\u52a8\u753b\u7f16\u8f91\u5668 \u7ea7\u8054\u7c92\u5b50\u7f16\u8f91\u5668\uff1a\u7c92\u5b50\u6548\u679c\u67e5\u770b\u3001\u7f16\u8f91 UMG \u754c\u9762\u7f16\u8f91\u5668\uff1a\u521b\u5efa UI \u754c\u9762 Matinee \u7f16\u8f91\u5668\uff1a\u8fc7\u573a\u52a8\u753b\u7b49 Sound Cue \u7f16\u8f91\u5668\uff1a\u58f0\u97f3\u7f16\u8f91 Paper2D \u56fe\u7247\u7f16\u8f91\u5668\uff1a2D \u56fe\u7247\u663e\u793a Paper2D Flipbook \u7f16\u8f91\u5668\uff1a\u624b\u7ed8\u98ce 2D \u52a8\u753b Physics Asset \u5de5\u5177\u7f16\u8f91\u5668\uff1a\u4e3a \u9aa8\u67b6\u7f51\u683c\u4f53 \u521b\u5efa\u7269\u7406\u7ea6\u675f \u9759\u6001\u7f51\u683c\u4f53\u7f16\u8f91\u5668\uff1a\u5bf9\u6a21\u578b\u5916\u89c2\u3001\u78b0\u649e\u3001UV \u9884\u89c8 \u5a92\u4f53\u64ad\u653e\u7f16\u8f91\u5668\uff1a\u7f16\u8f91\u5a92\u4f53\u6587\u4ef6 \u865a\u5e7b\u7f16\u8f91\u5668\u624b\u518c \u5173\u5361\u8bbe\u8ba1\u5e08\u5feb\u901f\u5165\u95e8 \u5bfc\u822a\u89c6\u53e3 \u900f\u89c6\uff1a\u9f20\u6807+\u62d6\u52a8 = \u524d\u540e\u5de6\u53f3\u4e0a\u4e0b \u6b63\u4ea4\uff1a\u9f20\u6807+\u62d6\u52a8 = \u9009\u4e2d/\u5e73\u79fb/\u653e\u5927\u7f29\u5c0f \u900f\u89c6\uff1aR\u9f20\u6807+WSAD/EQ/ZC = \u524d\u540e\u5de6\u53f3/\u4e0a\u4e0b/\u7f29\u5c0f\u653e\u5927FOV Maya \u98ce\u683c - Alt+\u9f20\u6807\u5de6\u4e2d\u53f3+\u62d6\u52a8 \u521b\u5efa\u65b0\u5173\u5361 \u653e\u7f6e Actor \u5f80\u573a\u666f\u4e2d\u653e\u7f6e\u7269\u4f53\u3001\u5149\u6e90\u3001\u5927\u6c14\u96fe\u7b49 \u7f16\u8f91\u653e\u7f6e\u7684Actor \u7f29\u653e\u3001\u6750\u8d28 \u8fd0\u884c\u6784\u5efa\u8fc7\u7a0b \u9884\u8ba1\u7b97\u5149\u7167 \u865a\u5e7b\u7f16\u8f91\u5668\u754c\u9762 \u5173\u5361\u7f16\u8f91\u5668 \u9009\u5361\u680f \u5f53\u524d\u5173\u5361 \u83dc\u5355\u680f \u7ec4\u4ef6 \u7f16\u8f91\u5668\u811a\u672c\u4e0e\u81ea\u52a8\u5316 \u84dd\u56fe\u53ef\u4ee5\u7528\u4e8e\u7f16\u8f91\u5668\uff0c\u4e0e\u9879\u76ee\u5185\u5bb9\u4ea4\u4e92 \u5f15\u64ce\u7684\u5404\u4e2a\u529f\u80fd \u56fe\u5f62\u548c\u6e32\u67d3 \u5ef6\u8fdf\u7740\u8272 \u5149\u7167\u8def\u5f84 \u5e26\u5149\u7167\u7684\u534a\u900f\u660e\u7269\u4f53 \u5b50\u8868\u9762\u7740\u8272 \u540e\u671f\u7279\u6548 \u73af\u5883\u906e\u6321 \u73af\u5883\u7acb\u65b9\u4f53\u8d34\u56fe\uff08Ambient Cubemaps\uff09 \u5149\u6ea2\u51fa \u5149\u6ea2\u51fa Dirt Mask \u4eba\u773c\u9002\u5e94 \u955c\u5934\u7729\u5149 \u8272\u8c03\u6620\u5c04 \u84dd\u56fe-\u53ef\u89c6\u5316\u811a\u672c \u84dd\u56fe\u6700\u9002\u5408\u521b\u5efa\u4e8b\u4ef6\u9a71\u52a8\u7684\u529f\u80fd\uff0c\u5982\u5904\u7406\u4f24\u5bb3\u63a5\u6536\u3001\u63a7\u5236\uff0c\u6216\u5176\u4ed6\u975e\u6bcf\u5e27\u8c03\u7528\u7684\u64cd\u4f5c \u793a\u4f8b\u4e0e\u6559\u5b66 \u5f15\u64ce\u7279\u6027\u793a\u4f8b","title":"UE4 \u7b14\u8bb0"},{"location":"ue4/ue4-note/#ue4","text":"","title":"UE4 \u7b14\u8bb0"},{"location":"ue4/ue4-note/#ue4_1","text":"","title":"UE4 \u5165\u95e8"},{"location":"ue4/ue4-note/#_1","text":"\u60a8\u53ef\u4ee5\u8bbf\u95eeEpic\u5de5\u7a0b\u5e08\u6bcf\u5929\u5f00\u53d1\u7684\u6700\u65b0\u529f\u80fd\u548c\u9519\u8bef\u4fee\u6b63\uff0c\u83b7\u5f97\u771f\u6b63\u610f\u4e49\u4e0a\u7684\u6700\u65b0\u7248\u672c\u865a\u5e7b\u5f15\u64ce\u3002 \u5982\u679c\u60a8\u53d1\u73b0\u4e86\u6211\u4eec\u5c1a\u672a\u4fee\u6b63\u7684\u9519\u8bef\uff0c\u800c\u5b83\u5bf9\u60a8\u7684\u9879\u76ee\u5f71\u54cd\u53c8\u5f88\u5927\uff0c\u60a8\u53ef\u4ee5\u5728\u81ea\u5df1\u7684\u6e90\u4ee3\u7801\u7248\u672c\u4e2d\u4fee\u6b63\u5b83\uff0c\u5e76\u91cd\u65b0\u7f16\u8bd1\u81ea\u5df1\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u4ece\u800c\u907f\u514d\u803d\u8bef\u9879\u76ee\u8fdb\u5ea6\u3002 \u60a8\u53ef\u4ee5\u5c06\u81ea\u5df1\u7684\u9519\u8bef\u4fee\u6b63\u548c\u81ea\u5236\u529f\u80fd\u63d0\u4ea4\u7ed9Epic\uff0c\u4ee5\u6539\u8fdb\u5f15\u64ce\u5e76\u5e2e\u52a9\u6574\u4e2a\u865a\u5e7b\u793e\u533a\u3002","title":"\u6e90\u7801\u5b89\u88c5"},{"location":"ue4/ue4-note/#_2","text":"Project Object\uff1a\u57fa\u7c7b\uff0c\u63d0\u4f9b\u5e8f\u5217\u5316\u3001\u5783\u573e\u56de\u6536\u7b49\u529f\u80fd Class Actor\uff1a\u53ef\u653e\u5165\u5173\u5361\u4e2d\u7684\u5bf9\u8c61\u90fd\u662f Actor\uff0c\u662f\u652f\u6301\u4e09\u7ef4\u8f6c\u6362\uff08\u5982\u5e73\u79fb\u3001\u65cb\u8f6c\u548c\u7f29\u653e\uff09\u7684\u6cdb\u578b\u7c7b Component\uff1a\u4e0d\u53ef\u72ec\u7acb\u5b58\u5728\uff0c\u4f9d\u6258\u4e8e Actor Pawn \u4eba\u5f62\u4f53\uff1aActor\u7684\u5b50\u7c7b\uff0c\u53ef\u88ab\u63a7\u5236 Character \u89d2\u8272\uff1aPawn \u7684\u5b50\u7c7b\uff0c\u73a9\u5bb6\u89d2\u8272 PlayerController \u73a9\u5bb6\u63a7\u5236\u5668\uff1a\u5c06\u8f93\u5165\u8f6c\u6362\u4e3a\u4ea4\u4e92\uff0c\u62e5\u6709 Pawn/Character AIController \u4eba\u5de5\u667a\u80fd\u63a7\u5236\u5668\uff1a\u4e0e PlayerController \u4e00\u6837\u7528\u4e8e\u63a7\u5236\uff0c\u62e5\u6709 Pawn/Character Brush \u753b\u5237\uff1a\u4e00\u79cd Actor\uff0c\u7528\u4e8e\u5236\u4f5c\u5173\u5361\uff0c\u53ef\u4ee5\u9644\u52a0\u591a\u79cd\u6548\u679c\uff0c\u5982\u89e6\u53d1\u4f53\u79ef\u3001\u963b\u585e\u4f53\u79ef\u3001\u4f24\u5bb3\u4f53\u79ef\u7b49 Level \u5173\u5361\uff1a\u6e38\u620f\u533a\u57df\uff0c\u7528\u4e8e\u653e\u7f6e\u3001\u7f16\u8f91 Actor\uff0c\u88ab\u5355\u72ec\u4fdd\u5b58\u4e3a .umap \u6587\u4ef6 World \u4e16\u754c\uff1a\u5173\u5361\u5217\u8868 GameMode \u6e38\u620f\u6a21\u5f0f\uff1a\u8d1f\u8d23\u8bbe\u7f6e\u6e38\u620f\u89c4\u5219 GameState \u6e38\u620f\u72b6\u6001\uff1a\u6e38\u620f\u5206\u6570\u3001\u73a9\u5bb6\u4eba\u6570\u3001\u5176\u4ed6\u5fc5\u8981\u7684\u6e38\u620f\u4fe1\u606f PlayerState \u73a9\u5bb6\u72b6\u6001\uff1a\u73a9\u5bb6\u751f\u547d\u503c\u3001\u7b49\u7ea7\u7b49","title":"\u672f\u8bed"},{"location":"ue4/ue4-note/#_3","text":"\u5173\u5361\u7f16\u8f91\u5668\uff1a\u4e0e\u4e0a\u8ff0\u201cLevel \u5173\u5361\u201d\u6982\u5ff5\u5bf9\u5e94 \u6750\u8d28\u7f16\u8f91\u5668\uff1a\u5e94\u7528\u4e8e\u4e00\u4e2a\u6a21\u578b\u6765\u63a7\u5236\u6a21\u578b\u7684\u53ef\u89c1\u5916\u89c2 \u84dd\u56fe\u7f16\u8f91\u5668\uff1a\u53ef\u88ab\u5f53\u4f5c Actor \u521b\u5efa\uff0c\u7528\u811a\u672c\u54cd\u5e94\u5173\u5361\u4e8b\u4ef6 \u884c\u4e3a\u6811\u7f16\u8f91\u5668\uff1a\u53ef\u89c6\u5316\u7684\u57fa\u4e8e\u8282\u70b9\u7684\u811a\u672c\uff0c\u63a7\u5236 AI \u884c\u4e3a Persona \u7f16\u8f91\u5668\uff1a\u52a8\u753b\u7f16\u8f91\u5668 \u7ea7\u8054\u7c92\u5b50\u7f16\u8f91\u5668\uff1a\u7c92\u5b50\u6548\u679c\u67e5\u770b\u3001\u7f16\u8f91 UMG \u754c\u9762\u7f16\u8f91\u5668\uff1a\u521b\u5efa UI \u754c\u9762 Matinee \u7f16\u8f91\u5668\uff1a\u8fc7\u573a\u52a8\u753b\u7b49 Sound Cue \u7f16\u8f91\u5668\uff1a\u58f0\u97f3\u7f16\u8f91 Paper2D \u56fe\u7247\u7f16\u8f91\u5668\uff1a2D \u56fe\u7247\u663e\u793a Paper2D Flipbook \u7f16\u8f91\u5668\uff1a\u624b\u7ed8\u98ce 2D \u52a8\u753b Physics Asset \u5de5\u5177\u7f16\u8f91\u5668\uff1a\u4e3a \u9aa8\u67b6\u7f51\u683c\u4f53 \u521b\u5efa\u7269\u7406\u7ea6\u675f \u9759\u6001\u7f51\u683c\u4f53\u7f16\u8f91\u5668\uff1a\u5bf9\u6a21\u578b\u5916\u89c2\u3001\u78b0\u649e\u3001UV \u9884\u89c8 \u5a92\u4f53\u64ad\u653e\u7f16\u8f91\u5668\uff1a\u7f16\u8f91\u5a92\u4f53\u6587\u4ef6","title":"\u5de5\u5177\u548c\u7f16\u8f91\u5668"},{"location":"ue4/ue4-note/#_4","text":"","title":"\u865a\u5e7b\u7f16\u8f91\u5668\u624b\u518c"},{"location":"ue4/ue4-note/#_5","text":"","title":"\u5173\u5361\u8bbe\u8ba1\u5e08\u5feb\u901f\u5165\u95e8"},{"location":"ue4/ue4-note/#_6","text":"\u900f\u89c6\uff1a\u9f20\u6807+\u62d6\u52a8 = \u524d\u540e\u5de6\u53f3\u4e0a\u4e0b \u6b63\u4ea4\uff1a\u9f20\u6807+\u62d6\u52a8 = \u9009\u4e2d/\u5e73\u79fb/\u653e\u5927\u7f29\u5c0f \u900f\u89c6\uff1aR\u9f20\u6807+WSAD/EQ/ZC = \u524d\u540e\u5de6\u53f3/\u4e0a\u4e0b/\u7f29\u5c0f\u653e\u5927FOV Maya \u98ce\u683c - Alt+\u9f20\u6807\u5de6\u4e2d\u53f3+\u62d6\u52a8","title":"\u5bfc\u822a\u89c6\u53e3"},{"location":"ue4/ue4-note/#_7","text":"","title":"\u521b\u5efa\u65b0\u5173\u5361"},{"location":"ue4/ue4-note/#actor","text":"\u5f80\u573a\u666f\u4e2d\u653e\u7f6e\u7269\u4f53\u3001\u5149\u6e90\u3001\u5927\u6c14\u96fe\u7b49","title":"\u653e\u7f6e Actor"},{"location":"ue4/ue4-note/#actor_1","text":"\u7f29\u653e\u3001\u6750\u8d28","title":"\u7f16\u8f91\u653e\u7f6e\u7684Actor"},{"location":"ue4/ue4-note/#_8","text":"\u9884\u8ba1\u7b97\u5149\u7167","title":"\u8fd0\u884c\u6784\u5efa\u8fc7\u7a0b"},{"location":"ue4/ue4-note/#_9","text":"","title":"\u865a\u5e7b\u7f16\u8f91\u5668\u754c\u9762"},{"location":"ue4/ue4-note/#_10","text":"","title":"\u5173\u5361\u7f16\u8f91\u5668"},{"location":"ue4/ue4-note/#_11","text":"\u5f53\u524d\u5173\u5361","title":"\u9009\u5361\u680f"},{"location":"ue4/ue4-note/#_12","text":"","title":"\u83dc\u5355\u680f"},{"location":"ue4/ue4-note/#_13","text":"","title":"\u7ec4\u4ef6"},{"location":"ue4/ue4-note/#_14","text":"\u84dd\u56fe\u53ef\u4ee5\u7528\u4e8e\u7f16\u8f91\u5668\uff0c\u4e0e\u9879\u76ee\u5185\u5bb9\u4ea4\u4e92","title":"\u7f16\u8f91\u5668\u811a\u672c\u4e0e\u81ea\u52a8\u5316"},{"location":"ue4/ue4-note/#_15","text":"","title":"\u5f15\u64ce\u7684\u5404\u4e2a\u529f\u80fd"},{"location":"ue4/ue4-note/#_16","text":"\u5ef6\u8fdf\u7740\u8272 \u5149\u7167\u8def\u5f84 \u5e26\u5149\u7167\u7684\u534a\u900f\u660e\u7269\u4f53 \u5b50\u8868\u9762\u7740\u8272 \u540e\u671f\u7279\u6548 \u73af\u5883\u906e\u6321 \u73af\u5883\u7acb\u65b9\u4f53\u8d34\u56fe\uff08Ambient Cubemaps\uff09 \u5149\u6ea2\u51fa \u5149\u6ea2\u51fa Dirt Mask \u4eba\u773c\u9002\u5e94 \u955c\u5934\u7729\u5149 \u8272\u8c03\u6620\u5c04","title":"\u56fe\u5f62\u548c\u6e32\u67d3"},{"location":"ue4/ue4-note/#-","text":"\u84dd\u56fe\u6700\u9002\u5408\u521b\u5efa\u4e8b\u4ef6\u9a71\u52a8\u7684\u529f\u80fd\uff0c\u5982\u5904\u7406\u4f24\u5bb3\u63a5\u6536\u3001\u63a7\u5236\uff0c\u6216\u5176\u4ed6\u975e\u6bcf\u5e27\u8c03\u7528\u7684\u64cd\u4f5c","title":"\u84dd\u56fe-\u53ef\u89c6\u5316\u811a\u672c"},{"location":"ue4/ue4-note/#_17","text":"","title":"\u793a\u4f8b\u4e0e\u6559\u5b66"},{"location":"ue4/ue4-note/#_18","text":"","title":"\u5f15\u64ce\u7279\u6027\u793a\u4f8b"},{"location":"ue4/ue4-tutor/","text":"UE4 \u8d5b\u8f66 Demo Demo \u7ec4\u6210 \u914d\u7f6e TireConfig \u6570\u636e\u8d44\u6e90 \u4e3a\u524d\u540e\u8f6e\u914d\u7f6e\u8f6e\u5b50\u84dd\u56fe \u4e3a\u8f7d\u5177\u8bbe\u7f6e\u4e13\u7528\u52a8\u753b\u84dd\u56fe \u4f7f\u7528\u9aa8\u67b6\u7f51\u683c\u4f53\u3001\u52a8\u753b\u84dd\u56fe\u548c\u8f6e\u5b50\u84dd\u56fe\u914d\u7f6e\u8f7d\u5177\u84dd\u56fe \u914d\u7f6e\u8f74\u6620\u5c04\u548c\u7ed1\u5b9a\u4ee5\u64cd\u63a7\u8f7d\u5177 \u521b\u5efa\u548c\u6307\u5b9a\u65b0\u7684\u6e38\u620f\u6a21\u5f0f\u4ee5\u751f\u6210\u8f7d\u5177 \u8bbe\u7f6e TireConfig Data Asset \u548c Wheel Blueprint TireConfig \u5b58\u653e\u6469\u64e6\u529b\u7cfb\u6570 Wheel Blueprint \u4f7f\u7528\u5230TireConfig \u62e5\u6709\u8f6e\u80ce\u534a\u5f84\u3001\u5bbd\u5ea6\u3001\u91cd\u91cf\u3001\u8f6c\u5411\u89d2\u5ea6\u3001\u662f\u5426\u88ab\u624b\u5239\u5f71\u54cd\u7b49\u5c5e\u6027 \u521b\u5efa TireConfig \u6570\u636e\u8d44\u6e90\u548c\u8f6e\u5b50\u84dd\u56fe \u952e\u76d8\u8f93\u5165\uff0c\u8f7d\u5177\u63a7\u5236 \u53c2\u8003 https://docs.unrealengine.com/en-US/Engine/Physics/Vehicles/VehicleUserGuide/index.html","title":"UE4 \u8d5b\u8f66 Demo"},{"location":"ue4/ue4-tutor/#ue4-demo","text":"","title":"UE4 \u8d5b\u8f66 Demo"},{"location":"ue4/ue4-tutor/#demo","text":"\u914d\u7f6e TireConfig \u6570\u636e\u8d44\u6e90 \u4e3a\u524d\u540e\u8f6e\u914d\u7f6e\u8f6e\u5b50\u84dd\u56fe \u4e3a\u8f7d\u5177\u8bbe\u7f6e\u4e13\u7528\u52a8\u753b\u84dd\u56fe \u4f7f\u7528\u9aa8\u67b6\u7f51\u683c\u4f53\u3001\u52a8\u753b\u84dd\u56fe\u548c\u8f6e\u5b50\u84dd\u56fe\u914d\u7f6e\u8f7d\u5177\u84dd\u56fe \u914d\u7f6e\u8f74\u6620\u5c04\u548c\u7ed1\u5b9a\u4ee5\u64cd\u63a7\u8f7d\u5177 \u521b\u5efa\u548c\u6307\u5b9a\u65b0\u7684\u6e38\u620f\u6a21\u5f0f\u4ee5\u751f\u6210\u8f7d\u5177","title":"Demo \u7ec4\u6210"},{"location":"ue4/ue4-tutor/#tireconfig-data-asset-wheel-blueprint","text":"TireConfig \u5b58\u653e\u6469\u64e6\u529b\u7cfb\u6570 Wheel Blueprint \u4f7f\u7528\u5230TireConfig \u62e5\u6709\u8f6e\u80ce\u534a\u5f84\u3001\u5bbd\u5ea6\u3001\u91cd\u91cf\u3001\u8f6c\u5411\u89d2\u5ea6\u3001\u662f\u5426\u88ab\u624b\u5239\u5f71\u54cd\u7b49\u5c5e\u6027","title":"\u8bbe\u7f6e TireConfig Data Asset \u548c Wheel Blueprint"},{"location":"ue4/ue4-tutor/#tireconfig","text":"","title":"\u521b\u5efa TireConfig \u6570\u636e\u8d44\u6e90\u548c\u8f6e\u5b50\u84dd\u56fe"},{"location":"ue4/ue4-tutor/#_1","text":"","title":"\u952e\u76d8\u8f93\u5165\uff0c\u8f7d\u5177\u63a7\u5236"},{"location":"ue4/ue4-tutor/#_2","text":"https://docs.unrealengine.com/en-US/Engine/Physics/Vehicles/VehicleUserGuide/index.html","title":"\u53c2\u8003"},{"location":"ue4/ue4/","text":"\u7ec4\u5185 UE4 \u5b89\u88c5 \u73af\u5883 Visual Studio 2019 \u6d41\u7a0b Checkout \u5230 Release \u5206\u652f \u6309\u7167 UE4 Github \u9875\u9762\u8fdb\u884c\u914d\u7f6e\u3001\u7f16\u8bd1 FAQ \u65e0\u6cd5\u627e\u5230 metahost.h \u65e0\u6cd5\u627e\u5230 mscoree.lib \u89e3\u51b3\u65b9\u6cd5 \u9879\u76ee-\u5c5e\u6027-VC++ \u76ee\u5f55-\u5305\u542b\u76ee\u5f55 \u6dfb\u52a0 $(NETFXKitsDir)Include\\um\\x64 \u9879\u76ee-\u5c5e\u6027-VC++ \u76ee\u5f55 \u6dfb\u52a0 $(NETFXKitsDir)Lib\\um\\x64 \u53c2\u8003\u8be5 \u94fe\u63a5 \u8fd0\u884cUE4 \u5361\u5728 45% \u89e3\u51b3\u65b9\u6cd5 \u7b2c\u4e00\u6b21\u8fd0\u884c\u7f16\u8bd1shader\uff0c\u9700\u8981\u7b49\u4e00\u4e2a\u5c0f\u65f6\u5de6\u53f3 https://answers.unrealengine.com/questions/728178/how-to-fix-unreal-engine-4181-stuck-at-initializin.html \u6784\u5efa\u5149\u7167\u5931\u8d25 \u89e3\u51b3\u65b9\u6848 \u91cd\u65b0\u751f\u6210 UnrealLightmass https://answers.unrealengine.com/questions/405612/lighting-build-failed-swarm-failed-to-kick-off-ue.html \u63d2\u4ef6 VA \u76f8\u5173\u8d44\u6599 \u5b98\u65b9\u6587\u6863","title":"\u7ec4\u5185 UE4 \u5b89\u88c5"},{"location":"ue4/ue4/#ue4","text":"","title":"\u7ec4\u5185 UE4 \u5b89\u88c5"},{"location":"ue4/ue4/#_1","text":"Visual Studio 2019","title":"\u73af\u5883"},{"location":"ue4/ue4/#_2","text":"Checkout \u5230 Release \u5206\u652f \u6309\u7167 UE4 Github \u9875\u9762\u8fdb\u884c\u914d\u7f6e\u3001\u7f16\u8bd1","title":"\u6d41\u7a0b"},{"location":"ue4/ue4/#faq","text":"\u65e0\u6cd5\u627e\u5230 metahost.h \u65e0\u6cd5\u627e\u5230 mscoree.lib \u89e3\u51b3\u65b9\u6cd5 \u9879\u76ee-\u5c5e\u6027-VC++ \u76ee\u5f55-\u5305\u542b\u76ee\u5f55 \u6dfb\u52a0 $(NETFXKitsDir)Include\\um\\x64 \u9879\u76ee-\u5c5e\u6027-VC++ \u76ee\u5f55 \u6dfb\u52a0 $(NETFXKitsDir)Lib\\um\\x64 \u53c2\u8003\u8be5 \u94fe\u63a5 \u8fd0\u884cUE4 \u5361\u5728 45% \u89e3\u51b3\u65b9\u6cd5 \u7b2c\u4e00\u6b21\u8fd0\u884c\u7f16\u8bd1shader\uff0c\u9700\u8981\u7b49\u4e00\u4e2a\u5c0f\u65f6\u5de6\u53f3 https://answers.unrealengine.com/questions/728178/how-to-fix-unreal-engine-4181-stuck-at-initializin.html \u6784\u5efa\u5149\u7167\u5931\u8d25 \u89e3\u51b3\u65b9\u6848 \u91cd\u65b0\u751f\u6210 UnrealLightmass https://answers.unrealengine.com/questions/405612/lighting-build-failed-swarm-failed-to-kick-off-ue.html","title":"FAQ"},{"location":"ue4/ue4/#_3","text":"VA","title":"\u63d2\u4ef6"},{"location":"ue4/ue4/#_4","text":"\u5b98\u65b9\u6587\u6863","title":"\u76f8\u5173\u8d44\u6599"},{"location":"ue4/unreal-rendering/","text":"4.22.2 \u6e32\u67d3\u6d41\u53ca\u81ea\u5b9a\u4e49\u7740\u8272 \u57fa\u7840\u6982\u5ff5 Scene \u3001SceneManager SceneObject RHI Material Shader View PSO\u7f13\u5b58 \u8de8\u5e73\u53f0 \u5750\u6807\u7cfb \u6392\u5217 Mesh \u7ed8\u5236\u6d41\u7a0b \u9759\u6001\u7f51\u683c\u4f53\u7ed8\u5236 \u7f13\u5b58\u6240\u6709\u7ed8\u5236\u547d\u4ee4 void FScene::AddPrimitive(UPrimitiveComponent* Primitive) virtual FPrimitiveSceneProxy* CreateSceneProxy() FPrimitiveSceneInfo* PrimitiveSceneInfo = new FPrimitiveSceneInfo(Primitive, this); proxy info \u76f8\u4e92\u5f15\u7528 void FPrimitiveSceneInfo::AddStaticMeshes(FRHICommandListImmediate& RHICmdList, bool bAddToStaticDrawLists) Proxy->DrawStaticElements(&BatchingSPDI); PDI->DrawMesh(MeshBatch, FLT_MAX); PrimitiveSceneInfo->StaticMeshes PrimitiveSceneInfo->StaticMeshRelevances CacheMeshDrawCommands(RHICmdList); FStaticMeshBatchRelevance& MeshRelevance; FStaticMeshBatch& Mesh; PassMeshProcessor->AddMeshBatch(Mesh, BatchElementMask, Proxy); Process BuildMeshDrawCommands DrawListContext->FinalizeCommand FMeshDrawCommand CommandInfo StaticMeshCommandInfos void FParallelMeshDrawCommandPass::DispatchDraw(FParallelCommandListSet* ParallelCommandListSet, FRHICommandList& RHICmdList) const; FMeshDrawCommandPassSetupTaskContext FMeshCommandOneFrameArray MeshDrawCommands; FVisibleMeshDrawCommand const FMeshDrawCommand* \u5176\u4ed6\u4f7f\u7528 \u8ba1\u7b97\u53ef\u89c1\u7269\u4f53 InitViews - ComputeViewVisibility - ComputeAndMarkRelevanceForViewParallel \u53c2\u8003 https://zhuanlan.zhihu.com/p/74246048","title":"4.22.2 \u6e32\u67d3\u6d41\u53ca\u81ea\u5b9a\u4e49\u7740\u8272"},{"location":"ue4/unreal-rendering/#4222","text":"","title":"4.22.2 \u6e32\u67d3\u6d41\u53ca\u81ea\u5b9a\u4e49\u7740\u8272"},{"location":"ue4/unreal-rendering/#_1","text":"Scene \u3001SceneManager SceneObject RHI Material Shader View PSO\u7f13\u5b58","title":"\u57fa\u7840\u6982\u5ff5"},{"location":"ue4/unreal-rendering/#_2","text":"\u5750\u6807\u7cfb \u6392\u5217","title":"\u8de8\u5e73\u53f0"},{"location":"ue4/unreal-rendering/#mesh","text":"\u9759\u6001\u7f51\u683c\u4f53\u7ed8\u5236 \u7f13\u5b58\u6240\u6709\u7ed8\u5236\u547d\u4ee4 void FScene::AddPrimitive(UPrimitiveComponent* Primitive) virtual FPrimitiveSceneProxy* CreateSceneProxy() FPrimitiveSceneInfo* PrimitiveSceneInfo = new FPrimitiveSceneInfo(Primitive, this); proxy info \u76f8\u4e92\u5f15\u7528 void FPrimitiveSceneInfo::AddStaticMeshes(FRHICommandListImmediate& RHICmdList, bool bAddToStaticDrawLists) Proxy->DrawStaticElements(&BatchingSPDI); PDI->DrawMesh(MeshBatch, FLT_MAX); PrimitiveSceneInfo->StaticMeshes PrimitiveSceneInfo->StaticMeshRelevances CacheMeshDrawCommands(RHICmdList); FStaticMeshBatchRelevance& MeshRelevance; FStaticMeshBatch& Mesh; PassMeshProcessor->AddMeshBatch(Mesh, BatchElementMask, Proxy); Process BuildMeshDrawCommands DrawListContext->FinalizeCommand FMeshDrawCommand CommandInfo StaticMeshCommandInfos void FParallelMeshDrawCommandPass::DispatchDraw(FParallelCommandListSet* ParallelCommandListSet, FRHICommandList& RHICmdList) const; FMeshDrawCommandPassSetupTaskContext FMeshCommandOneFrameArray MeshDrawCommands; FVisibleMeshDrawCommand const FMeshDrawCommand*","title":"Mesh \u7ed8\u5236\u6d41\u7a0b"},{"location":"ue4/unreal-rendering/#_3","text":"\u8ba1\u7b97\u53ef\u89c1\u7269\u4f53 InitViews - ComputeViewVisibility - ComputeAndMarkRelevanceForViewParallel","title":"\u5176\u4ed6\u4f7f\u7528"},{"location":"ue4/unreal-rendering/#_4","text":"https://zhuanlan.zhihu.com/p/74246048","title":"\u53c2\u8003"},{"location":"ue4/vertex-rendering/","text":"\u7f51\u683c\u4f53\u7ed8\u5236\u4e2d\u7684\u5c5e\u6027 // UnrealEngine\\Engine\\Source\\Runtime\\Engine\\Private\\MeshParticleVertexFactory.cpp if ( BatchParameters -> PrevTransformBuffer && FeatureLevel >= ERHIFeatureLevel :: SM4 ) { ShaderBindings . Add ( PrevTransform0 , PrevTransformVertex -> PrevTransform0 ); ShaderBindings . Add ( PrevTransform1 , PrevTransformVertex -> PrevTransform1 ); ShaderBindings . Add ( PrevTransform2 , PrevTransformVertex -> PrevTransform2 ); }","title":"\u7f51\u683c\u4f53\u7ed8\u5236\u4e2d\u7684\u5c5e\u6027"},{"location":"ue4/vertex-rendering/#_1","text":"// UnrealEngine\\Engine\\Source\\Runtime\\Engine\\Private\\MeshParticleVertexFactory.cpp if ( BatchParameters -> PrevTransformBuffer && FeatureLevel >= ERHIFeatureLevel :: SM4 ) { ShaderBindings . Add ( PrevTransform0 , PrevTransformVertex -> PrevTransform0 ); ShaderBindings . Add ( PrevTransform1 , PrevTransformVertex -> PrevTransform1 ); ShaderBindings . Add ( PrevTransform2 , PrevTransformVertex -> PrevTransform2 ); }","title":"\u7f51\u683c\u4f53\u7ed8\u5236\u4e2d\u7684\u5c5e\u6027"},{"location":"ue4/vrs/","text":"\u53ef\u53d8\u901f\u7387\u7740\u8272 Turing Variable Rate Shading in VRWorks https://devblogs.nvidia.com/turing-variable-rate-shading-vrworks/ \u56fe\u5f62\u4e0d\u540c\u533a\u57df\uff0c\u5206\u914d\u4e0d\u540c\u7684\u7b97\u529b \u5bf9\u4e8e\u591a\u4e2a\u50cf\u7d20\u5524\u8d77\u4e00\u6b21 Shading \u64cd\u4f5c Overshading & Overdraw\uff1a - OVERSHADING\uff1agpu \u6bcf\u6b21\u8fdb\u884c4 pixel shading\uff0c\u4e09\u89d2\u5f62\u8fb9\u7f18\u9886\u57df\u50cf\u7d20\u6d6a\u8d39\u7740\u8272\u8d44\u6e90 - OVERDRAW\uff1a\u7269\u4f53\u4e4b\u95f4\u4ea4\u53e0\uff0c\u4e00\u4e2a\u50cf\u7d20\u88ab\u7740\u8272\u591a\u6b21 If a triangle overlap only a single pixel, then the budget for the other pixels in the 8 by 8 tile is wasted as only a single primitive can be scanned per cycle per tile. https://www.g-truc.net/post-0662.html https://www.geeks3d.com/20101201/amd-graphics-blog-tessellation-for-all/#more-7555 A close relative of overdraw is overshading, which is caused by tiny or thin triangles and can really hurt performance by wasting a significant portion of the GPU\u2019s time. It\u2019s done like this so the hardware can do things like comparing UVs between pixels to calculate appropriate mipmap levels. http://fragmentbuffer.com/gpu-performance-for-game-artists/ \u80cc\u666f 90FPS\uff0c\u9ad8\u5206\u8fa8\u7387\u5bf9\u7b97\u529b\u8981\u6c42\u9ad8 VRS \u8d5b\u8f66\u6e38\u620f https://devblogs.nvidia.com/zerolight-improves-automotive-product-visualisation-quality-and-performance-with-vrs/ https://developer.download.nvidia.com/video/gputechconf/gtc/2019/presentation/s9209-advances-in-real-time-automotive-visualisation.pdf \u5b9e\u9a8c \u662f\u5426\u4ee5 DrawCall \u4e3a\u5355\u4f4d \u8fd0\u52a8\u6a21\u7cca\u4e2d\u4f7f\u7528 VRS \u4f1a\u662f\u4ec0\u4e48\u7ed3\u679c \u8ddf\u8e2a VRS \u4f7f\u7528\u6d41\u7a0b \u6dfb\u52a0\u6839\u636e\u901f\u5ea6\u8c03\u6574\u7684 VRS \u6750\u8d28 \u5728 BasePass \u524d\u6e32\u67d3\u51fa Velocity \u4f7f\u7528 CS \u964d\u91c7\u6837\u6210\u4e00\u5f20 1/16 \u957f\u5bbd\u7684\u7eb9\u7406 \u5c06\u8be5\u7eb9\u7406\u7ed1\u5b9a\u5230 Base Pass SRRV \u4e0a Motion Blur \u62c6\u89e3\u6210\u72ec\u7acb\u7684 Pass \u8d44\u6599 \u641c\u7d22\u6700\u76f8\u5173\u7684\u9875\u9762\uff0c\u4e86\u89e3\u5230\u5df2\u7ecf\u96c6\u6210\u5230\u56fe\u5f62api\u4e2d https://developer.nvidia.com/vrworks/graphics/variablerateshading \u4e0a\u94fe\u63a5\u7684\u8d85\u94fe\uff0c\u627e\u5230 SDK https://devblogs.nvidia.com/turing-variable-rate-shading-vrworks/ \u4e0b\u8f7d vrworks 3.2\uff0c\u5185\u542b VRS Demo https://developer.nvidia.com/vrworks \u4e2d\u6587\u6280\u672f\u6587\u7ae0 https://zhuanlan.zhihu.com/p/73271446","title":"\u53ef\u53d8\u901f\u7387\u7740\u8272"},{"location":"ue4/vrs/#_1","text":"","title":"\u53ef\u53d8\u901f\u7387\u7740\u8272"},{"location":"ue4/vrs/#turing-variable-rate-shading-in-vrworks","text":"https://devblogs.nvidia.com/turing-variable-rate-shading-vrworks/ \u56fe\u5f62\u4e0d\u540c\u533a\u57df\uff0c\u5206\u914d\u4e0d\u540c\u7684\u7b97\u529b \u5bf9\u4e8e\u591a\u4e2a\u50cf\u7d20\u5524\u8d77\u4e00\u6b21 Shading \u64cd\u4f5c Overshading & Overdraw\uff1a - OVERSHADING\uff1agpu \u6bcf\u6b21\u8fdb\u884c4 pixel shading\uff0c\u4e09\u89d2\u5f62\u8fb9\u7f18\u9886\u57df\u50cf\u7d20\u6d6a\u8d39\u7740\u8272\u8d44\u6e90 - OVERDRAW\uff1a\u7269\u4f53\u4e4b\u95f4\u4ea4\u53e0\uff0c\u4e00\u4e2a\u50cf\u7d20\u88ab\u7740\u8272\u591a\u6b21 If a triangle overlap only a single pixel, then the budget for the other pixels in the 8 by 8 tile is wasted as only a single primitive can be scanned per cycle per tile. https://www.g-truc.net/post-0662.html https://www.geeks3d.com/20101201/amd-graphics-blog-tessellation-for-all/#more-7555 A close relative of overdraw is overshading, which is caused by tiny or thin triangles and can really hurt performance by wasting a significant portion of the GPU\u2019s time. It\u2019s done like this so the hardware can do things like comparing UVs between pixels to calculate appropriate mipmap levels. http://fragmentbuffer.com/gpu-performance-for-game-artists/","title":"Turing Variable Rate Shading in VRWorks"},{"location":"ue4/vrs/#_2","text":"90FPS\uff0c\u9ad8\u5206\u8fa8\u7387\u5bf9\u7b97\u529b\u8981\u6c42\u9ad8 VRS","title":"\u80cc\u666f"},{"location":"ue4/vrs/#_3","text":"https://devblogs.nvidia.com/zerolight-improves-automotive-product-visualisation-quality-and-performance-with-vrs/ https://developer.download.nvidia.com/video/gputechconf/gtc/2019/presentation/s9209-advances-in-real-time-automotive-visualisation.pdf","title":"\u8d5b\u8f66\u6e38\u620f"},{"location":"ue4/vrs/#_4","text":"\u662f\u5426\u4ee5 DrawCall \u4e3a\u5355\u4f4d \u8fd0\u52a8\u6a21\u7cca\u4e2d\u4f7f\u7528 VRS \u4f1a\u662f\u4ec0\u4e48\u7ed3\u679c \u8ddf\u8e2a VRS \u4f7f\u7528\u6d41\u7a0b \u6dfb\u52a0\u6839\u636e\u901f\u5ea6\u8c03\u6574\u7684 VRS \u6750\u8d28 \u5728 BasePass \u524d\u6e32\u67d3\u51fa Velocity \u4f7f\u7528 CS \u964d\u91c7\u6837\u6210\u4e00\u5f20 1/16 \u957f\u5bbd\u7684\u7eb9\u7406 \u5c06\u8be5\u7eb9\u7406\u7ed1\u5b9a\u5230 Base Pass SRRV \u4e0a Motion Blur \u62c6\u89e3\u6210\u72ec\u7acb\u7684 Pass","title":"\u5b9e\u9a8c"},{"location":"ue4/vrs/#_5","text":"\u641c\u7d22\u6700\u76f8\u5173\u7684\u9875\u9762\uff0c\u4e86\u89e3\u5230\u5df2\u7ecf\u96c6\u6210\u5230\u56fe\u5f62api\u4e2d https://developer.nvidia.com/vrworks/graphics/variablerateshading \u4e0a\u94fe\u63a5\u7684\u8d85\u94fe\uff0c\u627e\u5230 SDK https://devblogs.nvidia.com/turing-variable-rate-shading-vrworks/ \u4e0b\u8f7d vrworks 3.2\uff0c\u5185\u542b VRS Demo https://developer.nvidia.com/vrworks \u4e2d\u6587\u6280\u672f\u6587\u7ae0 https://zhuanlan.zhihu.com/p/73271446","title":"\u8d44\u6599"}]}